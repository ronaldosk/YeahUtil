<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Acey.ExcelX</name>
    </assembly>
    <members>
        <member name="T:Acey.ExcelX.ISheetCollection">
            <summary>
            A collection of all the sheets in the specified or active workbook.
            </summary>
            <example>
            How to get the sheet collection in workbook.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Moves the sheet object to the specified location.
            sheet.Move(1);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Moves the sheet object to the specified location.
            sheet.Move(1)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Clear">
            <summary> 
            Removes all the sheets 
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Add(Acey.ExcelX.SheetType)">
            <summary> Adds a new worksheet, chart, or macro sheet. The new worksheet becomes the active sheet
            </summary>
            <param name="sheetType">The sheet type.</param>
            <returns>The sheet of specified sheet type.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Adds a new sheet object by specifying sheet type. 
            ISheet sheet = sheets.Add(SheetType.Worksheet);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Adds a sheet in workbook object by specifying type and sheet name.
            Dim sheet As ISheet = sheets.Add(SheetType.Worksheet)
            </code>
            </example>        
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Add(Acey.ExcelX.SheetType,System.String)">
            <summary> 
            Creates a new worksheet, chart, or macro sheet. 
            </summary>
            <param name="sheetType">The sheet type.</param>
            <param name="sheetName">The name of sheet.</param>
            <returns>The sheet of specified sheet type and name.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Adds a new sheet object by specifying sheet type and sheet name. 
            ISheet sheet = sheets.Add(SheetType.Worksheet, "Sheet");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Adds a sheet in workbook object by specifying type and sheet name.
            Dim sheet As ISheet = sheets.Add(SheetType.Worksheet, "Sheet")
            </code>        
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">sheetName is a invalid sheet name -or- The same sheet name already exists.</exception>      
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Contains(Acey.ExcelX.ISheet)">
            <summary>
            Returns true if the specified ISheet is contained by the collection of sheets,
             otherwise false is returned.
            </summary>
            <param name="sheet">Specifies the sheet.</param>
            <returns>True if the sheet object is found in sheet collection; otherwise, false.</returns>
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Insert(System.Int32,Acey.ExcelX.SheetType)">
            <summary> 
            Inserts a new worksheet, chart, or macro sheet.
            </summary>
            <param name="index">Specifies the zero based index of the sheet.</param>
            <param name="sheetType">Specifies the sheet type.</param>
            <returns>Returns an inserted sheet.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Inserts a new sheet to the specified sheet index.
            ISheet sheet = sheets.Insert(0, SheetType.Worksheet);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Adds a sheet in workbook object by specifying type and sheet name.
            Dim sheet As ISheet = sheets.Insert(0, SheetType.Worksheet)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than ISheetCollection.Count.</exception>        
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Insert(System.Int32,Acey.ExcelX.SheetType,System.String)">
             <summary> 
            Inserts a new worksheet, chart, or macro sheet.
             </summary>
             <param name="index">Specifies the zero based index of the sheet.</param>
             <param name="sheetType">Specifies the sheet type.</param>
             <param name="sheetName">Specifies the sheet name.</param>
             <returns>Returns an inserted sheet</returns>
             <example>
             This example shows how you might use this method:
            <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a sheet collection from the workbook.
             ISheetCollection sheets = workbook.Sheets;
             
             //Inserts a new sheet to the specified sheet index.
             ISheet sheet = sheets.Insert(0, SheetType.Worksheet, "Sheet");
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a sheet collection from the workbook.
             Dim sheets As ISheetCollection = workbook.Sheets
             
             'Adds a sheet in workbook object by specifying type and sheet name.
             Dim sheet As ISheet = sheets.Insert(0, SheetType.Worksheet, "Sheet")
             </code>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-index is equal to or greater than ISheetCollection.Count.</exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="sheetName"/> is a invalid sheet name.</exception>    
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Remove(Acey.ExcelX.ISheet)">
            <summary>
            Removes the specified sheet.
            </summary>       
            <param name="sheet">The specified sheet</param>
            <returns>True if sheet is successfully removed; otherwise, false.
            This method also returns false if sheet was not found in sheet collection.
            </returns>
            <remarks>
            <p>A workbook must contain at least one visible sheet.
            Cann't delete all sheets from sheet collection, when the number of sheet collection is 1 then directly return false.</p>
            </remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet in sheet collection by using sheet name.
            ISheet sheet = sheets["Sheet1"];
            
            //Removes the specified sheet.
             sheets.Remove(sheet);
             
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet in sheet collection by using sheet name.
            Dim sheet As ISheet = sheets("Sheet1")
            
            'Removes the specified sheet.
            sheets.Remove(sheet)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.Remove(System.String)">
            <summary>
            Removes the specified name of sheet.
            </summary>
            <param name="sheetName">The specified name of sheet.</param>
            <returns>True if sheet is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Acey.ExcelX.ISheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the sheet of a specified zero-based index.
            </summary>
            <remarks>
            <p>
            A workbook must contain at least one visible sheet.
            Cann't delete all sheets from sheet collection, at least have one sheet in sheet collection.</p>
            </remarks>
            <param name="index">The zero-based index of the sheet to remove.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Removes a sheet by the specified zero-based index.
            sheets.RemoveAt(0);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Removes a sheet by the specified zero-based index.
            sheets.RemoveAt(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than ISheetCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.ISheetCollection.Count">
            <summary>  
            Gets the number of sheets in a workbook.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheetCollection.Workbook">
            <summary>
            Returns the workbook which contains the current sheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheetCollection.Item(System.Int32)">
            <summary>  
            Gets the sheet at the specified zero based index.
            </summary>
            <param name="index">Specifies the zero based index of the sheet.</param>
            <returns>The sheet at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet by using zero-based sheet index.
            ISheet sheet = sheets[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet by using zero-based sheet index.
            Dim sheet As ISheet = sheets(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than ISheetCollection.Count.</exception>        
        </member>
        <member name="P:Acey.ExcelX.ISheetCollection.Item(System.String)">
            <summary>  
            Gets the sheet with the specified name.
            </summary>
            <param name="name">Specifies the name of the sheet.</param>
            <returns>The sheet at the specified name. If don't exist in sheet collection, return null.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a sheet collection from the workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet in sheet collection by using sheet name.
            ISheet sheet = sheets["Sheet1"];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection from the workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet in sheet collection by using sheet name.
            Dim sheet As ISheet = sheets("Sheet1")
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.IPageSetup">
            <summary>
            Represents the page setup properties of a worksheet.
            </summary>
            <example>
            How to get page setup properties of a worksheet.
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a PageSetup object of the WorkSheet object.
            IPageSetup pageSetup = worksheet.PageSetup;
            
            //Sets print orientation constants. 
            pageSetup.Orientation = PageOrientation.Landscape;
            
            //Sets the size of the paper. 
            pageSetup.PaperSize = PaperSize.A3;
            
            //Sets the range to be printed.
            pageSetup.PrintArea = "A1:H10";
            
            //Sets the way comments are printed with the sheet. 
            pageSetup.PrintComments = PrintLocation.PrintInPlace;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a PageSetup object of the WorkSheet object.
            Dim pageSetup As IPageSetup = worksheet.PageSetup
            
            'Sets print orientation constants. 
            pageSetup.Orientation = PageOrientation.Landscape
            
            'Sets the size of the paper. 
            pageSetup.PaperSize = PaperSize.A3
            
            'Sets the range to be printed.
            pageSetup.PrintArea = "A1:H10"
            
            'Sets the way comments are printed with the sheet. 
            pageSetup.PrintComments = PrintLocation.PrintInPlace
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.AlignMarginsHeaderFooter">
            <summary>
            Gets or sets whether the left and right edges of the header and footer are lined up with the left and right margins of the sheet.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.BlackAndWhite">
            <summary>
            Gets or sets if elements of the document will be printed in black and white. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.BottomMargin">
            <summary>
            Gets or sets the size of the bottom margin,  in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.BottomMarginInch">
            <summary>
            Gets or sets the size of the bottom margin, in unit of inches.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.CenterFooter">
            <summary>
            Gets or sets the center footer text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.CenterHeader">
            <summary>
            Gets or sets the center header text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.CenterHorizontally">
            <summary>
            Gets or sets if the sheet is printed centered horizontally. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.CenterVertically">
            <summary>
            Gets or sets if the sheet is printed centered vertically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.DifferentFirstPageHeaderFooter">
            <summary>
            Gets or sets whether the first page uses a different header and footer from the rest of the pages. 
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.Draft">
            <summary>
            Gets or sets if the sheet will be printed without graphics. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.FirstPageNumber">
            <summary>
            Gets or sets the first page number that will be used when this sheet is printed. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.FitToPagesTall">
            <summary>
            Gets or sets the number of pages tall the worksheet will be scaled to when it's printed. 
            </summary>
            <remarks>The number should be between 1 and 32767.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">it should be between 1 and 32767.</exception>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.FitToPagesWide">
            <summary>
            Gets or sets the number of pages wide the worksheet will be scaled to when it's printed. 
            </summary>
            <remarks>The number should be between 1 and 32767.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">it should be between 1 and 32767.</exception>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.FooterMargin">
            <summary>
            Gets or sets the distance from the bottom of the page to the footer, in unit of centimeters.  
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.FooterMarginInch">
            <summary>
            Gets or sets the distance from the bottom of the page to the footer, in unit of inches.  
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.HeaderMargin">
            <summary>
            Gets or sets the distance from the top of the page to the header, in unit of centimeters. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.HeaderMarginInch">
            <summary>
            Gets or sets the distance from the top of the page to the header, in unit of inches.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.LeftFooter">
            <summary>
            Gets or sets the left footer text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.LeftHeader">
            <summary>
            Gets or sets the left header text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.LeftMargin">
            <summary>
            Gets or sets the size of the left margin, in unit of centimeters. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.LeftMarginInch">
            <summary>
            Gets or sets the size of the left margin, in unit of inches.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.OddAndEvenPagesHeaderFooter">
            <summary>
            Gets or sets whether the odd and even pages use a different header and footer. 
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.Order">
            <summary>
            Gets or sets the order that Microsoft Excel uses to number pages when printing a large worksheet. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.Orientation">
            <summary>
            Gets or sets print orientation constants. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PaperSize">
            <summary>
            Gets or sets the size of the paper. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintArea">
            <summary>
            Gets or sets the range to be printed. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintComments">
            <summary>
            Gets or sets the way comments are printed with the sheet. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintErrors">
            <summary>
             Gets or sets the type of print error displayed. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintGridlines">
            <summary>
            Gets or sets if cell gridlines are printed on the page. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintHeadings">
            <summary>
            Gets or sets if row and column headings are printed with this page. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintNotes">
            <summary>
            True if cell notes are printed as end notes with the sheet. Applies only to worksheets.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintQuality">
            <summary>
            Gets or sets the print quality. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintTitleColumns">
            <summary>
            Gets or sets the columns that contain the cells to be repeated on the left side of each page.  "$A:$A";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.PrintTitleRows">
            <summary>
            Gets or sets the rows that contain the cells to be repeated at the top of each page. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.RightFooter">
            <summary>
            Gets or sets the right footer text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.RightHeader">
            <summary>
            Gets or sets the right header text  of the current sheet when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.RightMargin">
            <summary>
            Gets or sets the size of the right margin,  in unit of centimeters
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.RightMarginInch">
            <summary>
            Gets or sets the size of the right margin, in unit of inches.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.ScaleWithDocHeaderFooter">
            <summary>
            Gets or sets whether the header and footer is scaled with the sheet.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.TopMargin">
            <summary>
            Gets or sets the size of the top margin, in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.TopMarginInch">
            <summary>
            Gets or sets the size of the top margin, in unit of inches.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IPageSetup.Zoom">
            <summary>
            Gets or sets the scaling factor in percent. It should be between 10 and 400 percent. 
            </summary>        
            <remarks>
            Default is 100.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">should be between 10 and 400.</exception>
        </member>
        <member name="T:Acey.ExcelX.IHyperlinkCollection">
            <summary>
            Represents the collection of hyperlinks for a worksheet or range.
            </summary>
            <example>
            How to get a collection of hyperlink from worksheet.
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a hyperlink collection of the worksheet.
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;   
            
            //Adds a hyperlink object to the hyperlink collection.
            hyperlinks.Add(range, "http://www.aceyoffice.com/", "", ".Net", ".Net");
            
            [Visual Basic]
            'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a hyperlink collection of the worksheet.
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Adds a hyperlink object to the hyperlink collection.
            hyperlinks.Add(range, "http://www.aceyoffice.com/", "", ".Net", ".Net")
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IHyperlinkCollection.Add(Acey.ExcelX.IRange,System.String,System.String,System.String,System.String)">
            <summary>
             Adds a hyperlink to the specified range. Returns a Hyperlink object.
            </summary>
            <param name="anchor"> The range which the hyperlink will be attached to.</param>
            <param name="address">The address of the hyperlink.</param>
            <param name="subAddress">The subaddress of the hyperlink.</param>
            <param name="screenTip">The screen tip to be displayed when the mouse pointer is paused over the hyperlink.</param>
            <param name="textToDisplay">The text to be displayed for the hyperlink.</param>
            <returns>The created hyperlink.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a hyperlink collection of the worksheet.
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
            
            //Adds a hyperlink object to the hyperlink collection.
            IHyperlink hyperlink = hyperlinks.Add(range, "http://www.aceyoffice.com", "", ".Net", ".Net");
            
            [Visual Basic]
            'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a hyperlink collection of the worksheet.
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Adds a hyperlink object to the hyperlink collection.
            Dim hyperlink As IHyperlink = hyperlinks.Add(range, "http://www.aceyoffice.com", "", ".Net", ".Net")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="anchor"/> is null for reference types.</exception>
            <remarks>        
            <p><paramref name="textToDisplay"/> will replace value, If range have string value.
            <paramref name="subAddress"/> is valid, If <paramref name="address"/> mailto:happyfish78@hotmail.com etc.
            </p>
            </remarks>
        </member>
        <member name="M:Acey.ExcelX.IHyperlinkCollection.Clear">
            <summary>
            Clears all of the hyperlinks in this collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a hyperlink collection of the worksheet
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
            
            //Clears all of hyperlink in the hyperlink collection.
            hyperlinks.Clear();
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a hyperlink collection of the worksheet
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Clears all of hyperlink in the hyperlink collection.
            hyperlinks.Clear()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IHyperlinkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a hyperlink collection of the worksheet
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
            
            //Removes the specified zero-based index.
            hyperlinks.RemoveAt(0);
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a hyperlink collection of the worksheet
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Removes the specified zero-based index.
            hyperlinks.RemoveAt(0)
            </code>
            </example> 
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0 or greater than IHyperlinkCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.IHyperlinkCollection.Count">
            <summary>
            Gets the number of hyperlinks in the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlinkCollection.Item(System.Int32)">
            <summary>
            Returns the hyperlink specified by the zero based index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>The hyperlink at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a hyperlink collection of the worksheet
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
            
            //Gets a hyperlink by using zero-based index.
            IHyperlink hyperlink = hyperlinks[0];
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a hyperlink collection of the worksheet
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Gets a hyperlink by using zero-based index.
            Dim hyperlink As IHyperlink = hyperlinks(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than IHyperlinkCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.IHPageBreak">
            <summary>
            Specifies a horizontal page break (a row page break) in a worksheet.
            </summary>
            <example>
            How to get a horizontal page break object from a collection.
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Gets a horizontal page break using zero-based index.
            IHPageBreak hPageBreak = hPageBreaks[0];
            
            //Deletes the horizontal page break
            hPageBreak.Delete();
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Gets a horizontal page break using zero-based index.
            Dim hPageBreak As IHPageBreak = hPageBreaks(0)
            
            'Deletes the horizontal page break
            hPageBreak.Delete()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IHPageBreak.Delete">
             <summary>
             Deletes the horizontal page break from the worksheet.
             </summary>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a workbook using reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
              
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets a horizontal page break collection of the worksheet.
             IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
             
             //Gets a horizontal page break using zero-based index.
             IHPageBreak hPageBreak = hPageBreaks[0];
            
             //Deletes the horizontal page break.
             hPageBreak.Delete();
             
             [Visual Basic]
             'Creates a workbook using reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a horizontal page break collection of the worksheet.
             Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
             
             'Gets a horizontal page break using zero-based index.
             Dim hPageBreak As IHPageBreak = hPageBreaks(0)
             
             'Deletes the horizontal page break.
             hPageBreak.Delete()
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.IHPageBreak.Location">
            <summary>
            Gets the location of the horizontal page break.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Gets a horizontal page break using zero-based index.
            IHPageBreak hPageBreak = hPageBreaks[0];
            
            // Gets the location of the horizontal page break.
            IRange range = hPageBreak.Location;
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Gets a horizontal page break using zero-based index.
            Dim hPageBreak As IHPageBreak = hPageBreaks(0)
            
            ' Gets the location of the horizontal page break.
            Dim range As IRange = hPageBreak.Location
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IPictureCollection">
            <summary>
             Represents a picture collection.
            </summary>
            <example>
            How to get the picture collection of a workbook.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Picture object collection in the Worksheet.
            IPictureCollection pictures = worksheet.Pictures;
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Picture object collection in the Worksheet. 
            Dim pictures As IPictureCollection = worksheet.Pictures
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.Drawing.Image)">
             <summary>
             Adds a pitcure to the picture collection.
             </summary>
             <param name="upperLeftRow">upper-left cell row index</param>
             <param name="upperLeftColumn">upper-left cell column index</param>
             <param name="image">Specifies a image object.</param>
             <returns>return a picture object.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/>is null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftRow"/> is less than 0 or greater than 65535.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftColumn"/> is less than 0 or greater than 255.</exception>
             <example>
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object.
              IWorksheet worksheet = workbook.Worksheets[0];
              
              //Gets a picture collection.
              IPictureCollection pictures = worksheet.Pictures;
              
             //Creates a image object.
             Image image = Image.FromFile(@"D:\Drawing001_Sheet1_1.png");
             
             //Adds a picture object to the picture collection.
             IPicture picture = pictures.Add(1, 2, image);
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
              [Visual Basic]
             'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a Picture object collection in the Worksheet. 
             Dim pictures As IPictureCollection = worksheet.Pictures
             
             'Creates a image object.
             Dim image As Image =  Image.FromFile("D:\Drawing001_Sheet1_1.png")
             
             'Adds a picture object to the picture collection.
             Dim picture As IPicture = pictures.Add(1, 2, image)
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a pitcure to the picture collection.
            </summary>
            <param name="upperLeftRow">upper-left cell row index.</param>
            <param name="upperLeftColumn">upper-left cell column index.</param>
            <param name="fileName"></param>
            <param name="widthScale"></param>
            <param name="heightScale"></param>
            <returns></returns>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a pitcure to the picture collection.
            </summary>
            <param name="upperLeftRow">upper-left cell row index.</param>
            <param name="upperLeftColumn">upper-left cell column index.</param>
            <param name="lowerRightRow">lower-right cell row index.</param>
            <param name="lowerRightColumn">lower-right cell column index.</param>
            <param name="fileName">Name of the shape.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a pitcure to the picture collection.
            </summary>
            <param name="upperLeftRow">upper-left cell row index.</param>
            <param name="upperLeftColumn">upper-left cell column index.</param>
            <param name="lowerRightRow">lower-right cell row index.</param>
            <param name="lowerRightColumn">lower-right cell column index.</param>
            <param name="image">Image object.</param>
            <returns>Added picture.</returns>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
             <summary>
             Adds a pitcure to the picture collection.
             </summary>
             <param name="upperLeftRow">upper-left cell row index.</param>
             <param name="upperLeftColumn">upper-left cell column index.</param>
             <param name="image">A image object.</param>
             <param name="widthScale">width scale</param>
             <param name="heightScale">height scale</param>
             <returns>return a picture object.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="image"/>is null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftRow"/>is less than 0 or greater than 65535.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftColumn"/>is less than 0 or greater than 255.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="widthScale"/> must be between be 0 and 10675.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="heightScale"/> must be between be 0 and 10675.</exception>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Add(System.Int32,System.Int32,System.String)">
             <summary>
              Adds a pitcure to the picture collection.
             </summary>
             <param name="fileName">specifies a picture name.</param>
             <param name="upperLeftRow">upper-left cell row index</param>
             <param name="upperLeftColumn">upper-left cell column index</param>
             <returns>return a picture object</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/>is null.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="fileName"/>is a zero-length string, contains only white space.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="fileName"/>The file specified in path was not found.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftRow"/>is less than 0 or greater than 65535.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="upperLeftColumn"/>is less than 0 or greater than 255.</exception>
            <example>
            <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object.
              IWorksheet worksheet = workbook.Worksheets[0];
              
              //Gets a picture collection.
              IPictureCollection pictures = worksheet.Pictures;
             
             //Adds a picture object to the picture collection.
             IPicture picture = pictures.Add(1, 2, @"d:\Drawing001_Sheet1_1.png");
             
             //Saves as the specified file format.
             workbook.SaveAs(@"d:\book1.xls", FileFormat.Excel97To2003);
             
              [Visual Basic]
             'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a Picture object collection in the Worksheet. 
             Dim pictures As IPictureCollection = worksheet.Pictures
             
             'Adds a picture object to the picture collection.
             Dim picture As IPicture = pictures.Add(1, 2, "d:\Drawing001_Sheet1_1.png")
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IPictureCollection.Clear">
            <summary>
            Clear all of pictures.
            </summary>
            <example>
            The example shows how to use the method.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\picture.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a picture collection.
            IPictureCollection pictures = worksheet.Pictures;
            
            //Clears all pictures.
            pictures.Clear();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\picture.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Picture object collection in the Worksheet. 
            Dim pictures As IPictureCollection = worksheet.Pictures
            
            'Clears all pictures.
            pictures.Clear()
             
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IPictureCollection.Count">
            <summary>
            Gets the number of the picture collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IPictureCollection.Sheet">
            <summary>
            Gets the parent ISheet of the instance.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IPictureCollection.Item(System.Int32)">
            <summary>
            Gets a picture object using zero-based picture index.
            </summary>
            <param name="index">Zero-based picture index.</param>
            <returns>A picture object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index must be greater than 0 or less than IPictureCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IPictureCollection.Item(System.String)">
            <summary>
            Gets a picture object using the name of the picture.
            </summary>
            <param name="name">The specified name of the picture.</param>
            <returns>A picture object.</returns>
            <remarks>Returns null if is not be found in IPictureCollection.</remarks>
        </member>
        <member name="T:Acey.ExcelX.InsertShiftDirection">
            <summary>
            Specifies whether to shift existing cells right or down when inserting cells.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.InsertShiftDirection.Right">
            <summary>
            Specifies that cells should shifted right when inserting cells. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.InsertShiftDirection.Down">
            <summary>
            Specifies that cells should be shifted down when inserting cells.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.DeleteShiftDirection">
            <summary>
            Specifies whether to shift cells left or up to replace deleted cells. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.DeleteShiftDirection.Left">
            <summary>
            Specifies cells should be shifted left to replace deleted cells.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.DeleteShiftDirection.Up">
            <summary>
            Specifies cell should be shifted up to replace deleted cells.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ILegendEntryCollection">
            <summary>
            A collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Legend object of the Chart object.
            ILegend legend = chart.Legend;
             
            //Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            ILegendEntryCollection legendEntries = legend.LegendEntries;
            
            //Gets a LegendEntry object by using zero-based index.
            ILegendEntry legendEntry = legendEntries[0];
            
            //Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI";
            
            //Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Legend object of the Chart object.
            Dim legend As ILegend = chart.Legend
            
            'Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            Dim legendEntries As ILegendEntryCollection = legend.LegendEntries
            
            'Gets a LegendEntry object by using zero-based index.
            Dim legendEntry As ILegendEntry = legendEntries(0)
            
            'Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI"
            
            'Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegendEntryCollection.Count">
            <summary>
            Returns the number of the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegendEntryCollection.Item(System.Int32)">
            <summary>
            Gets a Acey.ExcelX.Charts.LegendEntry object at the specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <returns>A Acey.ExcelX.Charts.LegendEntry object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less then zero or greater than or equal to ILegendEntryCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartFrame">
            <summary>
            Encapsulates the object that represents the frame object in a chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartFrame.BackgroundMode">
            <summary>
            Gets or sets the display mode of the background of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartFrame.Font">
            <summary>
            Gets a font object of the IChartFont object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartFrame.Border">
            <summary>
             Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartFrame.Area">
            <summary>
             Returns a Acey.ExcelX.Drawing.IArea object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartFrame.Shadow">
            <summary>
            True if the frame has a shadow.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChart">
            <summary>
            Specifies a graphic that displays data or the relationships between sets of data in a visual form.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Set type of the Chart object.
            chart.ChartType = ChartType.Line;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Set type of the Chart object.
            chart.ChartType = ChartType.Line
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChart.SetSourceData(Acey.ExcelX.IRange,Acey.ExcelX.Charts.RowCol)">
            <summary>
            Sets the source data range for the chart.
            </summary>
            <param name="source">Required Acey.ExcelX.IRange. The range that contains the source data.</param>
            <param name="plotBy">Optional Object. Specifies the way the data is to be plotted. </param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Sets value to the Cell object.
            cell.Value = "Quarter 1";
            
            //Gets a Cell object using cell name.
            cell = worksheet.Cells["A2"];
            //Sets value to the Cell object.
            cell.Value = 500;
            
            //Gets a Cell object using cell name.
            cell = worksheet.Cells["A3"];       
            //Sets value to the Cell object.
            cell.Value = 100;
            
            //Gets a Cell object using cell name.
            cell = worksheet.Cells["B1"];
            //Sets value to the Cell object.
            cell.Value = "Quarter 2";
            
            //Gets a Cell object using cell name.
            cell = worksheet.Cells["B2"];
            //Sets value to the Cell object.
            cell.Value = 800;
            
            //Gets a Cell object using cell name.
            cell = worksheet.Cells["B3"];
            //Sets value to the Cell object.
            cell.Value = 600;
            
            //Gets a Chart collection of the Worksheet object.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a new Chart object by adding the specified chart type and position.
            IChart chart = charts.Add(ChartType.ColumnClustered, 7, 4, 20, 12);
            
            //Gets a Range object.
            IRange range = worksheet.Cells.CreateRange("=Sheet1!$A$1:$B$3");
            
            //Sets source data for the Chart object.
            chart.SetSourceData(range, RowCol.Rows);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.AutoScaling">
            <summary>
            True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart. Default is true.
            </summary>
            <remarks>It's work when the RightAngleAxes property must be True.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.CategoryAxis">
            <summary>
            Gets the chart's X axis.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a CategoryAxis object of the Chart object.
            ICategoryAxis categoryAxis = chart.CategoryAxis;
             
            //Gets border of the CategoryAxis object.
            Acey.ExcelX.Drawing.ILine axisLine = categoryAxis.AxisLine;
            
            //Sets border's style of the CategoryAxis object.
            axisLine.Style = LineType.DarkGray;
            
            //Sets border's weight of the CategoryAxis object.
            axisLine.Weight = WeightType.WideLine;
            
            //Sets border's color of the CategoryAxis object.
            axisLine.Color = Color.Blue;
            
            //Gets title of the the CategoryAxis object.
            IAxisTitle axisTitle = categoryAxis.Title;
            
            //Sets title's text of the the CategoryAxis object.
            axisTitle.Text = "Region";
            
            //Sets the type of major tick mark for the specified axis.
            categoryAxis.MajorTickMark = TickMarkType.Cross;
            
            //Sets the type of minor tick mark for the specified axis.
            categoryAxis.MinorTickMark = TickMarkType.Outside;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a CategoryAxis object of the Chart object.
            Dim categoryAxis As ICategoryAxis = chart.CategoryAxis
            
            'Gets border of the CategoryAxis object.
            Dim axisLine As Acey.ExcelX.Drawing.ILine = categoryAxis.AxisLine
            
            'Sets border's style of the CategoryAxis object.
            axisLine.Style = LineType.DarkGray
            
            'Sets border's weight of the CategoryAxis object.
            axisLine.Weight = WeightType.WideLine
            
            'Sets border's color of the CategoryAxis object.
            axisLine.Color = Color.Blue
            
            'Gets title of the the CategoryAxis object.
            Dim axisTitle As IAxisTitle = categoryAxis.Title
            
            'Sets title's text of the the CategoryAxis object.
            axisTitle.Text = "Region"
            
            'Sets the type of major tick mark for the specified axis.
            categoryAxis.MajorTickMark = TickMarkType.Cross
            
            'Sets the type of minor tick mark for the specified axis.
            categoryAxis.MinorTickMark = TickMarkType.Outside
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.ChartArea">
            <summary>
            Represents the chart area of a chart. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ChartArea object of the Chart object.
            IChartArea chartArea = chart.ChartArea;
             
            //Gets border of the ChartArea object.
            Acey.ExcelX.Drawing.ILine line = chartArea.Border;
            
            //Sets border's style of the ChartArea object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the ChartArea object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the ChartArea object.
            line.Color = Color.Blue;
            
            //Gets area of the ChartArea object.
            Acey.ExcelX.Drawing.IArea area = chartArea.Area;;
            
            //Sets forefound color of the area of the ChartArea object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ChartArea object of the Chart object.
            Dim chartArea As IChartArea = chart.ChartArea
            
            'Gets border of the ChartArea object.
            Dim line As Acey.ExcelX.Drawing.ILine = chartArea.Border
            
            'Sets border's style of the ChartArea object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the ChartArea object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the ChartArea object.
            line.Color = Color.Blue
            
            'Gets area of the ChartArea object.
            Dim area As Acey.ExcelX.Drawing.IArea = chartArea.Area
            
            'Sets forefound color of the area of the ChartArea object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.ChartTitle">
            <summary>
            Represents the chart title.
            </summary>
            <example>
            How to get a ChartTitle object.
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets chart title of the Chart object.
            IChartTitle title = chart.ChartTitle;
            
            //Sets text of the ChartTitle object.
            title.Text = "2012 Year Sales Report";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Sets text of the ChartTitle object.
            title.Text = "2012 Year Sales Report"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.ChartType">
            <summary>
            Gets or sets the type of the Chart object.
            </summary>
            <remarks>
            <p>1.A surface chart must contain at least two series.</p>
            <p>2.A stock chart requires three, four or five series of data plot a single point.</p>
            <p>3. A bubble chart requires at least two value per data point.</p>
            <p></p>
            </remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.DataTable">
            <summary>
            Represents the chart data table.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart datatable of the Chart object.
             IChartDataTable dataTable = chart.DataTable;
             
             //Sets the chart data table whether has horizontal border.
             dataTable.HasBorderHorizontal = true;
             
             //Sets the chart data table whether has outline borders.
             dataTable.HasBorderOutline = false;
             
             //Sets the chart data table whether has vertical border.
             dataTable.HasBorderVertical = true;  
             
             //Sets the chart data table whether the text is attached to a legend key.
             dataTable.ShowLegendKey = false;   
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart datatable of the Chart object.
            Dim dataTable As IChartDataTable = chart.DataTable
            
            'Sets the chart data table whether has horizontal border.
            dataTable.HasBorderHorizontal = True
            
            'Sets the chart data table whether has outline borders.
            dataTable.HasBorderOutline = False
            
            'Sets the chart data table whether has vertical border.
            dataTable.HasBorderVertical = True
            
            'Sets the chart data table whether the text is attached to a legend key.
            dataTable.ShowLegendKey = False
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>    
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.DepthPercent">
            <summary>
            Returns or sets the depth of a 3-D chart as a percentage of the chart width (between 20 and 2000 percent).
            </summary>
            <remarks>The number should be between 20 and 2000 percent.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 20 or greater than 2000 percent.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Elevation">
            <summary>
            Returns or sets the elevation of the 3-D chart view, in degrees (must be between -90 and 90 degrees).
            </summary>
            <remarks>The number should be between -90 and 90 degrees.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than -90 or greater than 90 degrees.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Floor">
            <summary>
            Represents the floor of a 3-D chart.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Floor object of the Chart object.
            IFloor floor = chart.Floor;
             
            //Gets border of the Floor object.
            Acey.ExcelX.Drawing.ILine line = floor.Border;
            
            //Sets border's style of the Floor object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the Floor object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Floor object.
            line.Color = Color.Blue;
            
            //Gets area of the Floor object.
            Acey.ExcelX.Drawing.IArea area = floor.Area;
            
            //Sets forefound color of the area of the Floor object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Floor object of the Chart object.
            Dim floor As IFloor = chart.Floor
            
            'Gets border of the Floor object.
            Dim line As Acey.ExcelX.Drawing.ILine = floor.Border
            
            'Sets border's style of the Floor object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the Floor object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Floor object.
            line.Color = Color.Blue
            
            'Gets area of the Floor object.
            Dim area As Acey.ExcelX.Drawing.IArea = floor.Area
            
            'Sets forefound color of the area of the Floor object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.GapDepth">
            <summary>
            Returns or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.(between 0 and 500.)
            </summary>
            <remarks>The number should be between 0 and 500.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 500.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.HasDataTable">
            <summary>
            True if the chart has a data table.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.HasLegend">
            <summary>
            True if the chart has a legend object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.HeightPercent">
            <summary>
            Gets or sets the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
            </summary>
            <remarks>The number must be between 5 and 500 percent.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 5 or greater than 500 percent.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Is3D">
            <summary>
            Indicates whether the chart is a 3d chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.IsRoundCornered">
            <summary>
            Gets or sets a value indicating whether the chart area is round cornered.  
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Legend">
             <summary>
             Gets the chart legend.
             </summary>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Legend object of the Chart object.
             ILegend legend = chart.Legend;
              
             //Sets the legend position type.
             legend.Position = LegendPositionType.Bottom;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
            
             [Visual Basic] 
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Legend object of the Chart object.
             Dim legend As ILegend = chart.Legend
             
             'Sets the legend position type.
             legend.Position = LegendPositionType.Bottom
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>    
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Name">
            <summary>
            Gets the name of the Chart object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.PageSetup">
            <summary>
            Represents the page setup description in this chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Acey.ExcelX.IPageSetup object of the Chart object.
            Acey.ExcelX.IPageSetup pageSetup = chart.PageSetup;
             
            //Sets print orientation constants. 
            pageSetup.Orientation = PageOrientation.Landscape;            
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Acey.ExcelX.IPageSetup object of the Chart object.
            Dim pageSetup As Acey.ExcelX.IPageSetup = chart.PageSetup
            
            'Sets print orientation constants. 
            pageSetup.Orientation = PageOrientation.Landscape
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Perspective">
            <summary>
            Returns or sets the perspective for the 3-D chart view. Must be between 0 and 100. 
            </summary>
            <remarks> This property is ignored if the RightAngleAxes property is True.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 100.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.PlotArea">
            <summary>
            Gets chart's plot area.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a PlotArea object of the Chart object.
            IPlotArea plotArea = chart.PlotArea;
             
            //Gets border of the PlotArea object.
            Acey.ExcelX.Drawing.ILine line = plotArea.Border;
            
            //Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the PlotArea object.
            line.Color = Color.Blue;
            
            //Gets area of the PlotArea object.
            Acey.ExcelX.Drawing.IArea area = plotArea.Area;
            
            //Sets forefound color of the area of the PlotArea object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a PlotArea object of the Chart object.
            Dim plotArea As IPlotArea = chart.PlotArea
            
            'Gets border of the PlotArea object.
            Dim line As Acey.ExcelX.Drawing.ILine = plotArea.Border
            
            'Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the PlotArea object.
            line.Color = Color.Blue
            
            'Gets area of the PlotArea object.
            Dim area As Acey.ExcelX.Drawing.IArea = plotArea.Area
            
            'Sets forefound color of the area of the PlotArea object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.RightAngleAxes">
            <summary>
            True if the chart axes are at right angles.Applies only for 3-D charts(except Column3D and 3-D Pie Charts).
            </summary>
            <remarks>If this property is True, the Perspective property is ignored.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Rotation">
            <summary>
            Returns or sets the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).(between 0 and 360 degrees).
            </summary>
            <remarks>Should be between 0 and 360 degrees.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 360.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.SecondCategoryAxis">
            <summary>
            Gets the chart's second X axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.SecondValueAxis">
            <summary>
            Gets the chart's second Y axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.SeriesAxis">
            <summary>
            Gets the chart's series axis.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a SeriesAxis object of the Chart object.
            ISeriesAxis seriesAxis = chart.SeriesAxis;
                 
            //Gets border of the SeriesAxis object.
            Acey.ExcelX.Drawing.ILine line = seriesAxis.AxisLine;
            
            //Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the PlotArea object.
            line.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a SeriesAxis object of the Chart object.
            Dim seriesAxis As ISeriesAxis = chart.SeriesAxis
            
            'Gets border of the SeriesAxis object.
            Dim line As Acey.ExcelX.Drawing.ILine = seriesAxis.AxisLine
            
            'Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the PlotArea object.
            line.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.SeriesCollection">
            <summary>
            Collection of the all series of this chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Shapes">
            <summary>
            Returns all drawing shapes in this chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.ValueAxis">
            <summary>
            Gets the chart's Y axis.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
             
            //Sets the major units for the axis.
            valueAxis.MajorUnit = 500;
            
            //Sets the minor units for the axis.
            valueAxis.MinorUnit = 100;
            
            //Sets the maximum value on the axis.
            valueAxis.MaxValue = 1000;
            
            //Sets the minimum value on the value axis.
            valueAxis.MinValue = 50;
            
            //Sets the point on the axis another axis crosses it.
            valueAxis.CrossesAt = 200;
            
            //Gets a AxisTitle of the the ValueAxis object.
            IAxisTitle axisTitle = valueAxis.Title;
            
            //Sets title's text of the the ValueAxis object.
            axisTitle.Text = "Sales";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Sets the major units for the axis.
            valueAxis.MajorUnit = 500
            
            'Sets the minor units for the axis.
            valueAxis.MinorUnit = 100
            
            'Sets the maximum value on the axis.
            valueAxis.MaxValue = 1000
            
            'Sets the minimum value on the value axis.
            valueAxis.MinValue = 50
            
            'Sets the point on the axis another axis crosses it.
            valueAxis.CrossesAt = 200
            
            'Gets a AxisTitle of the the ValueAxis object.
            Dim axisTitle As IAxisTitle = valueAxis.Title
            
            'Sets title's text of the the ValueAxis object.
            axisTitle.Text = "Sales"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.Walls">
            <summary>
             Represents the walls of a 3-D chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Walls object of the Chart object.
            IWalls walls = chart.Walls;
             
            //Gets border of the Walls object.
            Acey.ExcelX.Drawing.ILine line = walls.Border;
            
            //Sets border's style of the Walls object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the Walls object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Walls object.
            line.Color = Color.Blue;
            
            //Gets area of the Walls object.
            Acey.ExcelX.Drawing.IArea area = walls.Area;
            
            //Sets forefound color of the area of the Walls object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Walls object of the Chart object.
            Dim walls As IWalls = chart.Walls
            
            'Gets border of the Walls object.
            Dim line As Acey.ExcelX.Drawing.ILine = walls.Border
            
            'Sets border's style of the Walls object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the Walls object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Walls object.
            line.Color = Color.Blue
            
            'Gets area of the Walls object.
            Dim area As Acey.ExcelX.Drawing.IArea = walls.Area
            
            'Sets forefound color of the area of the Walls object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChart.WallsAndGridlines2D">
            <summary>
            Gets or sets whether the walls are rendered in 2-D.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.GradientColorType">
            <summary>
            Represents gradient color type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientColorType.None">
            <summary>
            No gradient color
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientColorType.OneColor">
            <summary>
            Represents one color gradient style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientColorType.TwoColors">
            <summary>
            Represents two color gradient style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientColorType.PresetColors">
            <summary>
            Represents preset gradient style.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.BackgroundMode">
            <summary>
             Specifies  the type of background for text used in charts.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.BackgroundMode.Automatic">
            <summary>
            Automatic background
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.BackgroundMode.Transparent">
            <summary>
            Transparent background
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.BackgroundMode.Opaque">
            <summary>
            Opaque background
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IHyperlink">
             <summary>
             Represents a hyperlink.
             </summary>
             <example>
             <code>
             [C#]
             //Creates a workbook using reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a hyperlink collection from the specified worksheet object.
             IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
             
             //Gets a hyperlink object by using zero-based index.
             IHyperlink hyperlink = hyperlinks[0];
             
             //Gets the address of the target document.
             string address = hyperlink.Address;
             
             //Gets the range the specified hyperlink is attached to.
             IRange range = hyperlink.Range;
             
            
              [Visual Basic]
             'Creates a workbook by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a hyperlink collection from the specified worksheet object.
             Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
             
             'Gets a hyperlink object by using zero-based index.
             Dim hyperlink As IHyperlink = hyperlinks(0)
             
             'Gets the address of the target document.
              Dim address As String = hyperlink.Address
              
             'Gets the range the specified hyperlink is attached to
             Dim range As IRange = hyperlink.Range
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.IHyperlink.Delete">
            <summary>
             Deletes the hyperlinks in this collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a hyperlink collection from the worksheet object.
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks;
            
            //Gets a hyperlink object by using zero-based index.
            IHyperlink hyperlink = hyperlinks[0];
             
            //Deletes the hyperlink.
            hyperlink.Delete();
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a hyperlink collection from the specified worksheet object.
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            
            'Gets a hyperlink object by using zero-based index.
            Dim hyperlink As IHyperlink = hyperlinks(0)
            
            'Deletes the hyperlink.
            hyperlink.Delete()
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.Address">
            <summary>
            Gets or sets the address of the target document.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.EmailSubject">
            <summary>
            Gets or sets the text string of the specified hyperlink’s e-mail subject line. The subject line is appended to the hyperlink’s address.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.Range">
            <summary>
            Gets the range the specified hyperlink is attached to.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.ScreenTip">
            <summary>
            Gets or sets the ScreenTip text for the specified hyperlink.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.SubAddress">
            <summary>
            Gets or sets the location within the document associated with the hyperlink (such as "Sheet1!A1"). 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHyperlink.TextToDisplay">
            <summary>
            Gets or sets the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ICharacters">
            <summary>
            Represents the RichText.
            </summary>
            <example>
            How to use the RichText.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Sets string value to the cell.
            cell.Value = "Hello World";
            
            //Gets a Characters object of the cell.
            ICharacters characters = cell.Characters;
            
            //Sets the font to the Characters.
            characters.SubCharacters(1, 2).Font.Bold = true; 
            characters.SubCharacters(1, 2).Font.Color = System.Drawing.Color.Red;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Sets string value to the cell.
            cell.Value = "Hello World"
            
            'Gets a Characters object of the cell.
            Dim characters As ICharacters = cell.Characters
            
            'Sets the font to the Characters.
            characters.SubCharacters(1, 2).Font.Bold = True
            characters.SubCharacters(1, 2).Font.Color = System.Drawing.Color.Red
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICharacters.Copy(Acey.ExcelX.ICharacters)">
            <summary>
            Copy the content from other ICharacters
            </summary>
            <param name="source">The specified Characters object.</param>
        </member>
        <member name="M:Acey.ExcelX.ICharacters.Equals(Acey.ExcelX.ICharacters)">
            <summary>
            Compares two ICharacters object.   
            </summary>
            <param name="other">other ICharacters</param>
            <returns>Returns true if the instance is equal other ICharacters object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ICharacters.Remove(System.Int32,System.Int32)">
            <summary>
            Removes some characters from ICharacters.
            </summary>
            <param name="index">The position to begin deleting characters.</param>
            <param name="length">The number of characters to delete.</param>
            <returns>Returns true if is deleted successfully, otherwise false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a characters of the cell.
            ICharacters characters = cell.Characters;
            
            //Removes some characters that the specified poistion.
            characters.Remove(0, 1);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a characters of the cell.
            Dim characters As ICharacters = cell.Characters
            
            'Removes some characters that the specified poistion.
            characters.Remove(0, 1)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICharacters.SubCharacters(System.Int32)">
            <summary>
             Retrieves a subcharacters from this instance. The subcharacters starts at a specified
              character position and has a specified length.
            </summary>
            <param name="startIndex">The index of the start of the subcharacters.</param>
            <returns>
              A ICharacters equivalent to the subcharacters of length length that begins
                at startIndex in this instance.
            </returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a characters of the cell.
            ICharacters characters = cell.Characters;
            
            //Retrieves a subcharacters from this instance.
            ICharacters subcharacter =  characters.SubCharacters(2);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a characters of the cell.
            Dim characters As ICharacters = cell.Characters
            
            'Retrieves a subcharacters from this instance.
            Dim subcharacter As ICharacters = characters.SubCharacters(2)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than or equal to the length of this instance.</exception>
        </member>
        <member name="M:Acey.ExcelX.ICharacters.SubCharacters(System.Int32,System.Int32)">
            <summary>
             Retrieves a subcharacters from this instance. The subcharacters starts at a specified
              character position and has a specified length.
            </summary>
            <param name="startIndex">The index of the start of the subcharacters.</param>
            <param name="length"> The number of characters in the subcharacters.</param>
            <returns>
              A ICharacters equivalent to the subcharacters of length length that begins
                at startIndex in this instance, or null if startIndex is equal
                to the length of this instance and length is zero.
            </returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a characters of the cell.
            ICharacters characters = cell.Characters;
            
            //Retrieves a subcharacters from this instance.
            ICharacters subcharacter = characters.SubCharacters(2, 3);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a characters of the cell.
            Dim characters As ICharacters = cell.Characters
            
            'Retrieves a subcharacters from this instance.
            Dim subcharacter As ICharacters = characters.SubCharacters(2, 3)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
             startIndex plus length indicates a position not within this instance.-or-
                startIndex or length is less than zero.
            </exception>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.Count">
            <summary>
            Gets number of IFontText in the ICharacters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.Font">
            <summary>
            Gets the first fontText's font.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.IsRichText">
            <summary>
            Represents if a ICharacters is RichText which has many fontTexts.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a characters of the cell.
            ICharacters characters = cell.Characters;
            
            //Gets whether is rich text.
            bool isRichText = characters.IsRichText;
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a characters of the cell.
            Dim characters As ICharacters = cell.Characters
            
            'Gets whether is rich text.
            Dim isRichText As Boolean = characters.IsRichText
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.Length">
            <summary>
            Gets the length of text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.Text">
            <summary>
            Gets the text of ICharacters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICharacters.Item(System.Int32)">
            <summary>
            Gets the IFontText by zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <returns>IFontText object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to length of this instance.</exception>
        </member>
        <member name="T:Acey.ExcelX.IFontText">
             <summary>
            Represents a ICharacters which every char contained with same fontStyle.
             </summary>
        </member>
        <member name="P:Acey.ExcelX.IFontText.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFontText.Length">
            <summary>
            Gets the length of Text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFontText.Text">
            <summary>
            Gets the Text.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IBorders">
            <summary>
            Represents the border color and border style of a cell or range of cells.
            </summary>
            <example>
            How to get border collection from style object.
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets left border from the border collection.
            IBorder leftBorder = borders.LeftBorder;
            
            //Sets the color of left border.
            leftBorder.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of left border.
            leftBorder.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets left border from the border collection.
            Dim leftBorder As IBorder = borders.LeftBorder
            
            'Sets the color to left border.
            leftBorder.Color = System.Drawing.Color.Blue
            
            'Sets the line style of left border.
            leftBorder.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IBorders.SetLineStyle(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>
             Sets the borders' border style.
            </summary>
            <param name="borders">Border Members.</param>
            <param name="lineStyle">Line Style.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Range object.
            IRange range = worksheet.Cells.CreateRange("B2:C3");
            
            //Gets format of the Range object.
            ICellFormat cellFormat = range.CellFormat;
            
            //Gets Borders of the format.
            IBorders borders = cellFormat.Borders;
            
            //Sets border style to the specified members.
            borders.SetLineStyle(BorderMembers.Top | BorderMembers.Right, LineStyle.DashDot);
            
            //Sets border color to the specified members.
            borders.SetLineColor(BorderMembers.Top, Color.Blue);   
            
            [Visual Basic] 
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Range object.
            Dim range As IRange = worksheet.Cells.CreateRange("B2:C3")
            
            'Gets format of the Range object.
            Dim cellFormat As ICellFormat = range.CellFormat
            
            'Gets Borders of the format.
            Dim borders As IBorders = cellFormat.Borders
            
            'Sets border style to the specified members.
            borders.SetLineStyle(BorderMembers.Top, LineStyle.DashDot)
            
            'Sets border color to the specified members.
            borders.SetLineColor(BorderMembers.Top, Color.Blue)
            </code>
            </example>         
        </member>
        <member name="M:Acey.ExcelX.IBorders.SetLineColor(Acey.ExcelX.BorderMembers,System.Drawing.Color)">
            <summary>
            Sets the borders' border color.
            </summary>
            <param name="borders">Border Members</param>
            <param name="lineColor">Line color.</param>
            <example>
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Range object.
            IRange range = worksheet.Cells.CreateRange("B2:C3");
            
            //Gets format of the Range object.
            ICellFormat cellFormat = range.CellFormat;
            
            //Gets Borders of the format.
            IBorders borders = cellFormat.Borders;
            
            //Sets border style to the specified members.
            borders.SetLineStyle(BorderMembers.Top | BorderMembers.Right, LineStyle.DashDot);
            
            //Sets border color to the specified members.
            borders.SetLineColor(BorderMembers.Top, Color.Blue);   
            
            [Visual Basic] 
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Range object.
            Dim range As IRange = worksheet.Cells.CreateRange("B2:C3")
            
            'Gets format of the Range object.
            Dim cellFormat As ICellFormat = range.CellFormat
            
            'Gets Borders of the format.
            Dim borders As IBorders = cellFormat.Borders
            
            'Sets border style to the specified members.
            borders.SetLineStyle(BorderMembers.Top, LineStyle.DashDot)
            
            'Sets border color to the specified members.
            borders.SetLineColor(BorderMembers.Top, Color.Blue)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IBorders.SetLineStyleAndColor(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            Sets the borders' border style and color
            </summary>
            <param name="borders">Border Members.</param>
            <param name="lineStyle">Line Style.</param>
            <param name="lineColor">Line color.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Range object.
            IRange range = worksheet.Cells.CreateRange("B2:C3");
            
            //Gets format of the Range object.
            ICellFormat cellFormat = range.CellFormat;
            
            //Sets line style and color to the specified members.
            cellFormat.Borders.SetLineStyleAndColor(BorderMembers.Outside, LineStyle.Double, Color.Blue);
            
            [Visual Basic] 
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Range object.
            Dim range As IRange = worksheet.Cells.CreateRange("B2:C3")
            
            'Gets format of the Range object.
            Dim cellFormat As ICellFormat = range.CellFormat
            
            'Sets line style and color to the specified members.
             cellFormat.Borders.SetLineStyleAndColor(BorderMembers.Outside, LineStyle.Double, Color.Blue)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorders.BottomBorder">
            <summary>
            Gets the color and line style for the bottom border.
            </summary>   
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets bottom border.
            IBorder border = borders.BottomBorder;
            
            //Sets the color of bottom border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of bottom border.
            border.LineStyle = LineStyle.Dashed; 
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets bottom border.
            Dim border As IBorder = borders.BottomBorder
            
            'Sets the color to bottom border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of bottom border.
            border.LineStyle = LineStyle.Dashed
            </code>
            </example>     
        </member>
        <member name="P:Acey.ExcelX.IBorders.DiagonalDownBorder">
            <summary>
            Gets the diagonal border running from top-left to bottom-right.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
             //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets diagonal border.
            IBorder border = borders.DiagonalDownBorder;
            
            //Sets the color of diagonal border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of diagonal border.
            border.LineStyle = LineStyle.Dashed;  
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets diagonal border.
            Dim border As IBorder = borders.DiagonalDownBorder
            
            'Sets the color to diagonal border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of diagonal border.
            border.LineStyle = LineStyle.Dashed 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorders.DiagonalUpBorder">
            <summary>
             Gets the diagonal border running from bottom-left to top-right.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets the diagonal border.
            IBorder border = borders.DiagonalUpBorder;
            
            //Sets the color of diagonal border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of diagonal border.
            border.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets the diagonal border.
            Dim border As IBorder = borders.DiagonalUpBorder
            
            'Sets the color to diagonal border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of diagonal border.
            border.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorders.LeftBorder">
            <summary>
            Gets the color and line style for the left border.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets the left border.
            IBorder border = borders.LeftBorder;
            
            //Sets the color of left border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of left border.
            border.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets the left border.
            Dim border As IBorder = borders.LeftBorder
            
            'Sets the color to left border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of left border.
            border.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorders.RightBorder">
            <summary>
            Gets the color and line style for the right border.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets the right border.
            IBorder border = borders.RightBorder;
            
            //Sets the color of right border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of right border.
            border.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders objectn of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets the right border.
            Dim border As IBorder = borders.RightBorder
            
            'Sets the color to right border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of right border.
            border.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorders.TopBorder">
            <summary> 
            Gets the color and line style for the top border.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a Borders object of the style.
            IBorders borders = style.Borders;
            
            //Gets the top border.
            IBorder border = borders.TopBorder;
            
            //Sets the color of top border.
            border.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of top border.
            border.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a Borders object of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets the top border.
            Dim border As IBorder = borders.TopBorder
            
            'Sets the color to top border.
            border.Color = System.Drawing.Color.Blue
            
            'Sets the line style of top border.
            border.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.FileFormat">
            <summary>
             Specifies the file format with which to save a file.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FileFormat.Excel97To2003">
            <summary>
            Represents an Excel97-2003 xls file.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FileFormat.CSV">
            <summary>
            Represents a CSV file.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FileFormat.TabDelimited">
            <summary>
            Represents a tab delimited text file.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.MsoLineStyle">
            <summary>
            Specifies style of drawing lines.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineStyle.Single">
            <summary>
            Represents single line style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineStyle.ThinThin">
            <summary>
            Represents thin thin line style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineStyle.ThickThin">
            <summary>
            Represents thick thin line style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineStyle.ThinThick">
            <summary>
            Represents thin thick line style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineStyle.ThickBetweenThin">
            <summary>
            Represents thick between thin line style.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IOutline">
            <summary>
            Represents an outline on a worksheet.
            </summary>
            <example>
            This example shows how to set outline of worksheet.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets outline of the Worksheet object.
            IOutline outline = worksheet.Outline;
            
            //Sets whether to apply styles in an outline when an outline is applied.
            outline.AutomaticStyles = true;
            
            //Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryColumn = SummaryColumn.SummaryOnLeft;
            
            //Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryRow = SummaryRow.SummaryAbove;
            
            //Groups rows.
            worksheet.GroupRows(1, 3);
            
            //Groups columns.
            worksheet.GroupColumns(2, 6);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003); 
            
            
             [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets outline of the Worksheet object.
            Dim outline As IOutline = worksheet.Outline
            
            'Sets whether to apply styles in an outline when an outline is applied.
            outline.AutomaticStyles = True
            
            'Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryColumn = SummaryColumn.SummaryOnLeft
            
            'Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryRow = SummaryRow.SummaryAbove
            
            'Groups rows.
            worksheet.GroupRows(1, 3)
            
            'Groups columns.
            worksheet.GroupColumns(2, 6)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IOutline.AutomaticStyles">
            <summary>
            Gets or sets whether to apply styles in an outline when an outline is applied.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IOutline.SummaryColumn">
            <summary>
            Gets or sets whether summary columns appear right an outline's detail columns.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IOutline.SummaryRow">
            <summary>
            Gets or sets whether summary rows appear below an outline's detail rows.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ILegend">
            <summary>
            Represents the legend in a chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Legend object of the Chart object.
            ILegend legend = chart.Legend;
             
            //Sets the legend position type.
            legend.Position = LegendPositionType.Bottom;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Legend object of the Chart object.
            Dim legend As ILegend = chart.Legend
            
            'Sets the legend position type.
            legend.Position = LegendPositionType.Bottom
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ILegend.Delete">
            <summary>
            Deletes chart legend.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Legend object of the Chart object.
            ILegend legend = chart.Legend;
             
            //Deletes the Legend object from the Chart object.
            legend.Delete();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Legend object of the Chart object.
            Dim legend As ILegend = chart.Legend
            
            'Deletes the Legend object from the Chart object.
            legend.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>        
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.Position">
            <summary>
            Gets or sets the legend position type.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.LegendEntries">
            <summary>
            Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Legend object of the Chart object.
            ILegend legend = chart.Legend;
             
            //Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            ILegendEntryCollection legendEntries = legend.LegendEntries;
            
            //Gets a LegendEntry object by using zero-based index.
            ILegendEntry legendEntry = legendEntries[0];
            
            //Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI";
            
            //Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Legend object of the Chart object.
            Dim legend As ILegend = chart.Legend
            
            'Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            Dim legendEntries As ILegendEntryCollection = legend.LegendEntries
            
            'Gets a LegendEntry object by using zero-based index.
            Dim legendEntry As ILegendEntry = legendEntries(0)
            
            'Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI"
            
            'Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.Height">
            <summary>
            specify the height of the legend, in points.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.Width">
            <summary>
            specify the width of the legend, in points.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.X">
            <summary>
            Gets or sets the x coordinate of the upper left corne in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegend.Y">
            <summary>
            Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.TextDirectionType">
            <summary>
            Specifies the reading order.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.TextDirectionType.Context">
            <summary>
            Specifies context reading order.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.TextDirectionType.LeftToRight">
             <summary>
            Specifies left-to-right reading order.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.TextDirectionType.RightToLeft">
            <summary>
            Specifies right-to-left reading order.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.PatternType">
            <summary>
            Specifies shapes fill pattern types.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.None">
            <summary>
            The fill pattern is none (no fill).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Solid">
            <summary>
            The fill pattern is solid.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray5">
            <summary>
            5%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray10">
            <summary>
            10%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray20">
            <summary>
            20%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray30">
            <summary>
            30%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray40">
            <summary>
            40%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray50">
            <summary>
            50%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray60">
            <summary>
            60%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray70">
            <summary>
            70%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray75">
            <summary>
            75%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray80">
            <summary>
            80%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray90">
            <summary>
            90%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Gray25">
            <summary>
            25%
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LightDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, but are not anti-aliased.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, but they are not anti-aliased.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DarkDownwardDiagonal">
            <summary>
            Dark downward diagonal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DarkUpwardDiagonal">
            <summary>
            Dark upward diagonal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.WideDownwardDiagonal">
            <summary>
            Wide downward diagonal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.WideUpwardDiagonal">
            <summary>
            Wide upward diagonal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LightVertical">
            <summary>
            Light vertical
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LightHorizontal">
            <summary>
            Light horizontal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.NarrowVertical">
            <summary>
            Narrow vertical
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.NarrowHorizontal">
            <summary>
            Narrow horizontal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DarkVertical">
            <summary>
            Dark vertical
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DarkHorizontal">
            <summary>
            Dark horizontal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DashedDownwardDiagonal">
            <summary>
            Dashed downward diagonal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DashedVertical">
            <summary>
            Dashed vertical
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DashedHorizontal">
            <summary>
            Dashed horizontal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.SmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LargeConfetti">
            <summary>
            Large confetti
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Wave">
            <summary>
            Specifies horizontal lines that is composed of tildes.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DiagonalBrick">
            <summary>
            Diagonal brick
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.HorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Weave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Plaid">
            <summary>
            Plaid
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Divot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DottedGrid">
            <summary>
            Specifies horizontal and vertical lines (each of which is composed of dots) that cross.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.DottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines (each of which is composed of dots) that cross.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Shingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Trellis">
            <summary>
            Trellis
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.SmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style LargeGrid.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LargeGrid">
            <summary>
            Specifies horizontal and vertical lines that cross.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.SmallCheckerBoard">
            <summary>
            Small checker board
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.LargeCheckerBoard">
            <summary>
            Large checker board
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.OutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not anti-aliased.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PatternType.SolidDiamond">
            <summary>
            Solid diamond
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ErrorBarDisplayType">
            <summary>
            Specifies the direction of the error bars.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarDisplayType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarDisplayType.Minus">
            <summary>
            Minus direction.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarDisplayType.Plus">
             <summary>
            Plus direction.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarDisplayType.Both">
             <summary>
            Both direction.
             </summary>
        </member>
        <member name="T:Acey.ExcelX.IWorkbookWindowInfo">
            <summary>
            Represents workbook specific window information.
            </summary>
            <example>
            How to get window information of workbook from a workbook object.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets workbook specific window information.
            IWorkbookWindowInfo windowInfo = workbook.WindowInfo;
            
            //Sets horizontal scrolling is synchronized across multiple windows displaying this sheet.
            windowInfo.DisplayHorizontalScrollBar = true;
            
            //Sets vertical scrolling is synchronized across multiple windows displaying this sheet.
            windowInfo.DisplayVerticalScrollBar = true;
            
            //Sets workbook tabs are displayed for the workbook.
            windowInfo.DisplaySheetTabs = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets workbook specific window information.
            Dim windowInfo As IWorkbookWindowInfo = workbook.WindowInfo
            
            'Sets horizontal scrolling is synchronized across multiple windows displaying this sheet.
            windowInfo.DisplayHorizontalScrollBar = True
            
            'Sets vertical scrolling is synchronized across multiple windows displaying this sheet.
            windowInfo.DisplayVerticalScrollBar = True
            
            'Sets workbook tabs are displayed for the workbook.
            windowInfo.DisplaySheetTabs = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookWindowInfo.DisplayHorizontalScrollBar">
            <summary>
            Gets or sets whether horizontal scrolling is synchronized across multiple windows displaying this sheet.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookWindowInfo.DisplaySheetTabs">
            <summary>
            Gets or sets the property which specifies whether workbook tabs are displayed for the workbook.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookWindowInfo.DisplayVerticalScrollBar">
            <summary>
            Gets or sets whether vertical scrolling is synchronized across multiple windows displaying this sheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookWindowInfo.Workbook">
            <summary>
            Gets the workbook associated with this IWorkbookWindowInfo.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IHPageBreakCollection">
            <summary>
            Specifies a list of explicit row page breaks.
            </summary>
            <remarks>The number of page breaks must be less than or equal to 1026.</remarks>
            <example>
            How to get a collection of horizontal page break objects.
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Gets a horizontal page break using zero-based index.
            IHPageBreak hPageBreak = hPageBreaks[0];
            
            //Gets the location of the horizontal page break.
            IRange range = hPageBreak.Location;
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Gets a horizontal page break using zero-based index.
            Dim hPageBreak As IHPageBreak = hPageBreaks(0)
            
            'Gets the location of the horizontal page break.
            Dim range As IRange = hPageBreak.Location
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IHPageBreakCollection.Add(Acey.ExcelX.IRange)">
            <summary>
            Adds a new horizontal page break to a worksheet and returns a reference to it.
            </summary>
            <param name="before">The range before which to add the horizontal page break.</param>
            <returns>Horizontal page break</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Adds a horizontal page break to the horizontal page break collection.
            hPageBreaks.Add(range);
            
            [Visual Basic]
            'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Adds a horizontal page break to the horizontal page break collection.
            hPageBreaks.Add(range)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="before"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IHPageBreakCollection.Clear">
            <summary>
            Clears all of horizontal page break in horizontal page break collection.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Clears all of horizontal page break in horizontal page break collection.
            hPageBreaks.Clear();
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Clears all of horizontal page break in horizontal page break collection.
            hPageBreaks.Clear()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IHPageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified zero-based index.
            </summary>
            <param name="index">the specified zero-based index.</param>     
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Removes the specified zero-based index.
            hPageBreaks.RemoveAt(0);
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Removes the specified zero-based index.
            hPageBreaks.RemoveAt(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than IHPageBreakCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.IHPageBreakCollection.Count">
            <summary>
            Get the number of page breaks. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IHPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets the horizontal page break specified by the zero based index.
            </summary>
            <param name="index">The zero-based index of the horizontal page break.</param>
            <returns>The horizontal page break at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a horizontal page break collection of the worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            //Gets a horizontal page break using zero-based index.
            IHPageBreak hPageBreak = hPageBreaks[0];
            
            
            [Visual Basic]
            'Creates a workbook using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a horizontal page break collection of the worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            
            'Gets a horizontal page break using zero-based index.
            Dim hPageBreak As IHPageBreak = hPageBreaks(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than IHPageBreakCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.ValueError">
            <summary>
            Specifies the possible formula error conditions.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Null">
            <summary>
            Cell error value: #NULL!
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Div0">
            <summary>
            Cell error value: #DIV/0!
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Value">
            <summary>
            Cell error value: #VALUE!
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Ref">
            <summary>
            Cell error value: #REF!
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Name">
            <summary>
            Cell error value: #NAME?
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.Num">
            <summary>
            Cell error value: #NUM!
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueError.NA">
            <summary>
            Cell error value: #N/A
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ValidationType">
            <summary>
            Specifies the type of data validation.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.AnyValue">
            <summary>
            Specifies that the data validation allows any type of value and does not check for a type or range of values.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.WholeNumber">
            <summary>
            Specifies that the data validation checks for and allows whole number values satisfying the given condition.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.Decimal">
            <summary>
            Specifies that the data validation checks for and allows decimal values satisfying the given condition.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.List">
            <summary>
            Specifies that the data validation checks for and allows a value that matches one in a list of values.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.Date">
            <summary>
            Specifies that the data validation checks for and allows date values satisfying the given condition.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.Time">
            <summary>
            Specifies that the data validation checks for and allows time values satisfying the given condition.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.TextLength">
            <summary>
            Specifies that the data validation checks for and allows text values whose length satisfies the given condition.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationType.Custom">
            <summary>
            Specifies that the data validation uses a custom formula to check the cell value.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.PrintLocation">
            <summary>
            Specifies whether and where to print cell comments.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintLocation.PrintInPlace">
            <summary>
            Represents to print comments as displayed on sheet. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintLocation.PrintNoComments">
            <summary>
            Represents not to print comments. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintLocation.PrintSheetEnd">
            <summary>
            Represents to print comments at end of sheet. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.DisplayDrawingObjects">
            <summary>
            Specifies how ActiveX objects, OLE objects, 
            and drawing objects appear in a window that contains the workbook.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.DisplayDrawingObjects.ShowAll">
            <summary>
            ActiveX objects, OLE objects, and drawing objects are displayed in the window that contains the workbook.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.DisplayDrawingObjects.ShowPlaceHolder">
            <summary>
            Placeholders are displayed in place of ActiveX objects, OLE objects, and drawing objects in the window that contains the workbook.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.DisplayDrawingObjects.HideAll">
            <summary>
            ActiveX objects, OLE objects, and drawing objects are not displayed in the window that contains the workbook.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IChartSheetCollection">
            <summary>
             Represents a collection of chartsheet in a workbook.
            </summary>
            <example>
            How to get a collection of chartsheet in a workbook.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Removes the sheet that specified zero-based index.
            chartsheets.RemoveAt(0);
            
            //Adds a new chartsheet object to the chartsheet collection, the chartsheet name will be gerenated.
            IChartSheet chartsheet = chartsheets.Add();
            
            //Inserts the specified name of chartsheet into the specified zero-based index.
            chartsheets.Insert(1, "Sheet");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Removes the sheet that specified zero-based index.
            chartsheets.RemoveAt(0)
            
            'Adds a new chartsheet object to the chartsheet collection, the chartsheet name will be gerenated.
            Dim chartsheet As IChartSheet = chartsheets.Add()
            
            'Inserts the specified name of chartsheet into the specified zero-based index.
            chartsheets.Insert(1, "Sheet")
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Clear">
            <summary>
            Clears all chartsheets in the workbook
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Add">
             <summary>
              Adds a new chartsheet.
             </summary>
             <returns>The new Worksheet object.</returns>
             <remarks>The name of the new chartsheet is automatically generated.</remarks>
             <example>
             The example shows how to use the method.
             <code>
             //Creates a new workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
              
             //Gets a chartsheet collection in the workbook object.
             IChartSheetCollection chartsheets = workbook.ChartSheets;
            
             //Adds a chartsheet to the chartsheet collection.
             IChartSheet chartsheet = chartsheets.Add();
             
             [Visual Basic]
             'Creates a new workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a chartsheet collection in the workbook object.
             Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
             
             'Adds a chartsheet to the chartsheet collection.
             Dim chartsheet As IChartSheet = chartsheets.Add()
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Add(System.String)">
            <summary>
             Adds the specified name Worksheet object.
            </summary>
            <param name="sheetName">The name of chartsheet.</param>
            <returns>The new chartsheet.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Adds a new chartsheet object by using chartsheet name.
            IChartSheet chartsheet = chartsheets.Add("Sheet");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Adds a new chartsheet object by using chartsheet name.
            Dim chartsheet As IChartSheet = chartsheets.Add("Sheet")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sheetName"/>is an invalid sheet name.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Contains(Acey.ExcelX.IChartSheet)">
            <summary>
            Returns whether contains the specified WorkSheet object.
            </summary>
            <param name="chartsheet">The specified WorkSheet object.</param>
            <returns>True if the chartsheet is found in chartsheet collection;otherwise, false.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Gets a chartsheet object by using chartsheet name.
            IChartSheet chartsheet = chartsheets["Sheet1"];
            
            //Gets whether contains the specified chartsheet object.
            bool flag = chartsheets.Contains(chartsheet);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Gets a chartsheet object by using chartsheet name.
            Dim chartsheet As IChartSheet = chartsheets("Sheet1")
            
            'Gets whether contains the specified chartsheet object.
            Dim flag As Boolean = chartsheets.Contains(chartsheet)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Insert(System.Int32,System.String)">
             <summary>
             Inserts the specified name Worksheet object at the specified index.
             </summary>
             <param name="index">The zero based index of the chartsheet in chartsheet collection of the workbook.</param>
             <param name="sheetName">The name of chartsheet.</param>
             <returns>The new chartsheet.</returns>
             <example>
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a chartsheet collection in the workbook object.
             IChartSheetCollection chartsheets = workbook.ChartSheets;
             
             //Inserts a chartsheet to the specified location by using chartsheet name.
             IChartSheet chartsheet = chartsheets.Insert(1, "Sheet");
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
             'Gets a chartsheet collection in the workbook object.
             Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
             
             'Inserts a chartsheet to the specified location by using chartsheet name.
             Dim chartsheet As IChartSheet = chartsheets.Insert(1, "Sheet")
             </code>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-index is equal to or greater than IChartsheetCollection.Count.</exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="sheetName"/> is a invalid name or exists the specified name in IChartsheetCollection.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Remove(Acey.ExcelX.IChartSheet)">
            <summary>
             Removes the specified chartsheet.
            </summary>
            <param name="chartsheet">The specified chartsheet.</param>
            <returns>Returns true if it is deleted, otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.Remove(System.String)">
            <summary>
            Removes the specified name of chartsheet.
            </summary>
            <param name="sheetName">The specified name of chartsheet.</param>
            <returns>Returns true if it is deleted, otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IChartSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the chartsheet of a specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than IChartSheetCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.IChartSheetCollection.Count">
            <summary>
            Gets the number of chartsheet in the workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Gets the number of chartsheet in the workbook.
            int count = chartsheets.Count;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Gets the number of chartsheet in the workbook.
            Dim count As Integer = chartsheets.Count
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IChartSheetCollection.Workbook">
            <summary>
            Gets the parent workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Gets the parent workbook.
            IWorkbook parentWorkbook = chartsheets.Workbook;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Gets the parent workbook.
            Dim parentWorkbook As IWorkbook = chartsheets.Workbook
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IChartSheetCollection.Item(System.Int32)">
            <summary>
             Gets the chartsheet specified by the zero based index.
            </summary>
            <param name="index">The zero based index of the chartsheet.</param>
            <returns>The chartsheet at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Gets a Worksheet object by using zero-based index.
            IChartSheet chartsheet = chartsheets[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Gets a Worksheet object by using zero-based index.
            Dim chartsheet As IChartSheet = chartsheets(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than IChartsheetCollection.Count.</exception>       
        </member>
        <member name="P:Acey.ExcelX.IChartSheetCollection.Item(System.String)">
            <summary>
             Gets Worksheet object by the specified name. 
            </summary>
            <param name="name">The name of chartsheet.</param>
            <returns>The chartsheet at the specified name which is not case sensitive.
            if don't find in chartsheet collection, return null.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            //Gets a chartsheet object by using chartsheet name.
            IChartSheet chartsheet = chartsheets["Chart1"];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            
            'Gets a chartsheet object by using chartsheet name.
            Dim chartsheet As IChartSheet = chartsheets("Chart1")
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IValueAxis">
            <summary>
            Represents the chart value axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
             
            //Sets the major units for the axis.
            valueAxis.MajorUnit = 500;
            
            //Sets the minor units for the axis.
            valueAxis.MinorUnit = 100;
            
            //Sets the maximum value on the axis.
            valueAxis.MaxValue = 1000;
            
            //Sets the minimum value on the value axis.
            valueAxis.MinValue = 50;
            
            //Sets the point on the axis another axis crosses it.
            valueAxis.CrossesAt = 200;
            
            //Gets a AxisTitle of the the ValueAxis object.
            IAxisTitle axisTitle = valueAxis.Title;
            
            //Sets title's text of the the ValueAxis object.
            axisTitle.Text = "Sales";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Sets the major units for the axis.
            valueAxis.MajorUnit = 500
            
            'Sets the minor units for the axis.
            valueAxis.MinorUnit = 100
            
            'Sets the maximum value on the axis.
            valueAxis.MaxValue = 1000
            
            'Sets the minimum value on the value axis.
            valueAxis.MinValue = 50
            
            'Sets the point on the axis another axis crosses it.
            valueAxis.CrossesAt = 200
            
            'Gets a AxisTitle of the the ValueAxis object.
            Dim axisTitle As IAxisTitle = valueAxis.Title
            
            'Sets title's text of the the ValueAxis object.
            axisTitle.Text = "Sales"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IAxis">
            <summary>
            Represents a Excel chart Axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.AxisLine">
            <summary>
            Gets a Acey.ExcelX.Drawing.ILine object of the Axis object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.Chart">
            <summary>
            Returns the Chart object which contains the current object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.IsReversePlotOrder">
            <summary>
            Gets or sets whether the values on the axis are displayed in reverse order.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.MajorGridlines">
            <summary>
            Represents major gridlines on a chart axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.MajorTickMark">
             <summary>
            Gets or sets the location of major tick marks.
             </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.MinorGridLines">
            <summary>
            Represents minor gridlines on a chart axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.MinorTickMark">
            <summary>
            Gets or sets the location of minor tick marks.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.TickLabels">
            <summary>
            Specifies the attributes of the axis labels, major tick marks, and minor tick marks associated with an axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.TickLabelPosition">
            <summary>
            Gets or sets the location of axis labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.Title">
            <summary>
            Gets Acey.ExcelX.Charts.IAxisTitle object of the Axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IAxis.Visible">
            <summary>
            Represents if the axis is visible.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.CrossesAt">
            <summary>
            Represents the point on the axis another axis crosses it.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.HasDisplayUnitLabel">
            <summary>
            True if the label is displayed on the specified axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.DisplayUnit">
            <summary>
            Gets or sets the unit label for the specified axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
                
            //Sets the unit label for the specified axis.
            valueAxis.DisplayUnit = DisplayUnitType.Hundreds;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Sets the unit label for the specified axis.
            valueAxis.DisplayUnit = DisplayUnitType.Hundreds
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.DisplayUnitLabel">
            <summary>
            Represents a unit label on an axis in the specified chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
                 
            //Gets a DisplayUnitLabel object of the ValueAxis object.
            IDisplayUnitLabel displayUnitLabel = valueAxis.DisplayUnitLabel;
            
            //Sets shadow of the DisplayUnitLabel object.
            displayUnitLabel.Shadow = true;
            
            //Gets a Characters object of the DisplayUnitLabel object.
            ICharacters characters = displayUnitLabel.Characters;
            
            //Sets font' bold of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Bold = true;
            
            //Sets font' size of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Size = 16;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Gets a DisplayUnitLabel object of the ValueAxis object.
            Dim displayUnitLabel As IDisplayUnitLabel = valueAxis.DisplayUnitLabel
            
            'Sets shadow of the DisplayUnitLabel object.
            displayUnitLabel.Shadow = True
            
            'Gets a Characters object of the DisplayUnitLabel object.
            Dim characters As ICharacters = displayUnitLabel.Characters
            
            'Sets font' bold of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Bold = True
            
            'Sets font' size of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Size = 16
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.DisplayUnitCustom">
            <summary>
            Represents custom unit to display.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
                
            //Sets custom unit to display.
            valueAxis.DisplayUnitCustom = 200;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Sets custom unit to display.
            valueAxis.DisplayUnitCustom = 200
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.MajorUnit">
            <summary>
            Represents the major units for the axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.MaxValue">
            <summary>
            Represents the maximum value on the axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.MinorUnit">
            <summary>
            Represents the minor units for the axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.MinValue">
            <summary>
            Represents the minimum value on the value axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsAutoCross">
            <summary>
            Gets or sets whether cross is calculated automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsAutoMajor">
            <summary>
            Gets or sets whether major unit is calculated automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsAutoMaxValue">
            <summary>
            Gets or sets whether max value is calculated automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsMaxCross">
            <summary>
            Gets or sets whether the other axes in the axis group cross this value axis at the maximum value.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsAutoMinValue">
            <summary>
            Gets or sets whether min value is calculated automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsAutoMinor">
            <summary>
            Gets or sets whether minor unit is calculated automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IValueAxis.IsLogarithmic">
            <summary>
            Gets or sets whether the value axis has a logarithmic scale.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ILeaderLines">
            <summary>
            Represents leader lines on a chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\ColumnChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a LeaderLines object of the Series object.
            ILeaderLines leaderLines = series.LeaderLines;
            
            //Sets border's style of the Series object.
            leaderLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            leaderLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            leaderLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\ColumnChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a LeaderLines object of the Series object.
            Dim leaderLines As ILeaderLines = series.LeaderLines
            
            'Sets border's style of the Series object.
            leaderLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            leaderLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            leaderLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ILine">
            <summary>
            Specifies the appearance of a line.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.Color">
            <summary>
            Gets or sets color of the line.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.IsAuto">
            <summary>
            Gets or sets whether the line has default formatting.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.IsAutomaticColor">
            <summary>
            Gets whether the color of line is auotmatic assigned.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.Visible">
            <summary>
            Gets or sets whether is visible.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.Style">
            <summary>
            Gets or sets the style of the line.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILine.Weight">
            <summary>
            Gets or sets the thickness of the line.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IColumnCollection">
            <summary>
            Collects the objects that represent the individual columns in a worksheet.
            </summary>
            <example>
            How to get a collection of column objects.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection from the worksheet object.
            IColumnCollection columns = worksheet.Columns;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumnCollection.WorkSheet">
            <summary>
            Returns the parent IWorkSheet of this column.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection from the worksheet object.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets the parent IWorkSheet of this column.
            IWorksheet parentWorksheet = columns.WorkSheet;
            
            //Gets a column using zero-based column index.
            IColumn column = columns[0];
            
            //Hides the column.
            column.IsHidden = true; 
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets the parent IWorkSheet of this column.
            Dim parentWorksheet As IWorksheet = columns.WorkSheet
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(0)
            
            'Hides the column.
            column.IsHidden = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumnCollection.Item(System.Int32)">
            <summary>
             Returns the Column object by zero-based column index. The Column object of the specified column index will be instantiated if it does not exist. 
            </summary>
            <param name="index">The zero-based index of the column.</param>
            <returns>The column at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection from the worksheet object.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using zero-based column index.
            IColumn column = columns[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.-or- <paramref name="index"/> is or greater than max column.
            </exception>
        </member>
        <member name="P:Acey.ExcelX.IColumnCollection.Item(System.String)">
            <summary>
            Gets the column object by column name. The Column object of the specified column name will be instantiated if it does not exist.
            </summary>
            <param name="colName">Column Name. such as A,B,CD etc</param>
            <returns>A Column object.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection from the worksheet object.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using column Name.
            IColumn column = columns["A"];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using column Name.
            Dim column As IColumn = columns("A")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="colName"/> is null. </exception>
            <exception cref="T:System.ArgumentException">Invalid column name.</exception>
        </member>
        <member name="T:Acey.ExcelX.Drawing.MsoTextureType">
            <summary>
            Specifies type of textured fill.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.BlueTissuePaper">
            <summary>
            Blue tissue paper
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Bouquet">
            <summary>
            Bouquet
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.BrownMarble">
            <summary>
            Brown marble
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Canvas">
            <summary>
            Canvas
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Cork">
            <summary>
            Cork
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Denim">
            <summary>
            Denim
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.FishFossil">
            <summary>
            Fish fossil
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Granite">
            <summary>
            Granite
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.GreenMarble">
            <summary>
            Green marble
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.MediumWood">
            <summary>
            Medium wood
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Newsprint">
            <summary>
            Newsprint
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Oak">
            <summary>
            Oak
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.PaperBag">
            <summary>
            Paper bag
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Papyrus">
            <summary>
            Papyrus
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Parchment">
            <summary>
            Parchment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.PinkTissuePaper">
            <summary>
            Pink tissue paper
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.PurpleMesh">
            <summary>
            Purple mesh
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.RecycledPaper">
            <summary>
            Recycled paper
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Sand">
            <summary>
            Sand
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Stationery">
            <summary>
            Stationery
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.Walnut">
            <summary>
            Walnut
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.WaterDroplets">
            <summary>
            Water droplets
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.WhiteMarble">
            <summary>
            White marble
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoTextureType.WovenMat">
            <summary>
            Woven mat
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.MsoLineDashStyle">
            <summary>
            Specifies the type of line style of the shape.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.RoundDot">
            <summary>
            RoundDot
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.SquareDot">
            <summary>
            SquareDot
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.DashDot">
            <summary>
            Dash Dot
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.LongDash">
            <summary>       
            Long Dash
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.LongDashDot">
            <summary>
            Long Dash Dot
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.MsoLineDashStyle.LongDashDotDot">
            <summary>
            Long Dash Dot Dot
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.FillType">
            <summary>
            Specifies the fill types.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.Solid">
            <summary>
            A solid fill.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.Gradient">
            <summary>
            A gradient fill.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.Texture">
            <summary>
            A textured fill.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FillType.Pattern">
            <summary>
            A patterned fill.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.EditionType">
            <summary>
            license edition
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.EditionType.Evalucation">
            <summary>
            Evalucation
            </summary>
        </member>
        <member name="F:Acey.ExcelX.EditionType.Standard">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:Acey.ExcelX.EditionType.Professional">
            <summary>
            Professional
            </summary>
        </member>
        <member name="F:Acey.ExcelX.EditionType.Enterprise">
            <summary>
            Enterprise
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IFilter">
            <summary>
            Respresents a filter for a single column. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFilter.Criteria1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFilter.Criteria2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFilter.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ICheckBoxCollection">
            <summary>
             Represents a collection of Acey.ExcelX.Drawing.CheckBox objects in a worksheet.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICheckBoxCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="upperLeftRow">Upper left row index.</param>
            <param name="upperLeftColumn">Upper left column index.</param>
            <param name="height">Height of checkBox, in unit of pixel.</param>
            <param name="width">Width of checkBox, in unit of pixel.</param>
            <returns>A new CheckBox object.</returns>
            This example shows how you might use this instance:
            <example>
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a CheckBox object collection in the Worksheet.
            ICheckBoxCollection checkBoxes = worksheet.CheckBoxes;
            
            //Gets  a Newly CheckBox.
            ICheckBox checkBox = checkBoxes.Add(3, 5, 100, 50);
            
             //Sets whether the control is expected to be displayed without three-dimensional effects.
             checkBox.Display3DShading = true;
             
            //Indicates whether check box is checked.
            checkBox.CheckState = CheckState.Checked;
            
            //Sets text of the CheckBox object.
            checkBox.Text = "Selected";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003); 
            
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a CheckBox object collection in the Worksheet.
            Dim checkBoxes As ICheckBoxCollection = worksheet.CheckBoxes
            
            'Gets  a Newly CheckBox.
            Dim checkBox As ICheckBox =  checkBoxes.Add(3, 5, 100, 50)
            
            'Sets whether the control is expected to be displayed without three-dimensional effects.
            checkBox.Display3DShading = True
             
            'Indicates whether check box is checked.
            checkBox.CheckState = CheckState.Checked
            
            'Sets text of the CheckBox object.
            checkBox.Text = "Selected"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBoxCollection.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBoxCollection.Item(System.Int32)">
            <summary>
            Returns single item from the collection at the specified index.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartPoint">
            <summary>
            Represents a single point in a series in a chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
            
            //Sets shadow of the ChartPoint object.
            point.Shadow = true;
            
            //Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Sets shadow of the ChartPoint object.
            point.Shadow = True
            
            'Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.Area">
            <summary>
            Gets a Acey.ExcelX.Drawing.IArea object of the ChartPoint object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
               
            //Gets a Area object of the ChartPoint object.
            Acey.ExcelX.Drawing.IArea area = point.Area;
            
            //Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Gets a Area object of the ChartPoint object.
            Dim area As Acey.ExcelX.Drawing.IArea = point.Area
            
            'Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.Border">
            <summary>
            Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
               
            //Gets a Line object of the ChartPoint object.
            Acey.ExcelX.Drawing.ILine line = point.Border;
            
            //Sets border's style of the ChartPoint object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the ChartPoint object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the ChartPoint object.
            line.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Gets a Line object of the ChartPoint object.
            Dim line As Acey.ExcelX.Drawing.ILine = point.Border
            
            'Sets border's style of the ChartPoint object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the ChartPoint object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the ChartPoint object.
            line.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.DataLabel">
            <summary>
            Gets properties of a data label on a chart group data point.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
               
            //Gets a DataLabel object of the ChartPoint object.
            IDataLabel dataLabel = point.DataLabel;
            
            //Sets text of the DataLabel object.
            dataLabel.Text = "Sales";
            
            //Sets orientation of the DataLabel object.
            dataLabel.Orientation = 30;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Gets a DataLabel object of the ChartPoint object.
            Dim dataLabel As IDataLabel = point.DataLabel
            
            'Sets text of the DataLabel object.
            dataLabel.Text = "Sales"
            
            'Sets orientation of the DataLabel object.
            dataLabel.Orientation = 30
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.Explosion">
            <summary>
            The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter. Should be greater than or equal to 0.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
               
            //Sets the distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
            point.Explosion = 50;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Sets the distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
            point.Explosion = 50
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.HasDataLabel">
            <summary>
            Gets whether has data label of the current object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.MarkerBackgroundColor">
            <summary>
            Gets or sets the  background color of the data marker in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.MarkerForegroundColor">
            <summary>
            Gets or sets the foreground color of the data marker  in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.MarkerSize">
            <summary>
            Gets or sets the size of the data marker in a line chart, scatter chart, or radar chart.The default value is 5.
            </summary>
            <remarks>The number must be between 2 and 72. </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 2 or greater than 72.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.MarkerStyle">
            <summary>
            Gets or sets the type of data marker  in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.Series">
            <summary>
            Gets the parent object of the current object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPoint.Shadow">
            <summary>
            True if the ChartPoint object has a shadow.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IAxisTitle">
            <summary>
            Specifies title of the axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a CategoryAxis object of the Chart object.
            ICategoryAxis categoryAxis = chart.CategoryAxis;
            
            //Gets a AxisTitle object of the the CategoryAxis object.
            IAxisTitle axisTitle = categoryAxis.Title;
            
            //Sets title's text of the AxisTitle object.
            axisTitle.Text = "2012 Region";
            
            //Sets text's orientation.
            axisTitle.Orientation = 30;
            
            //Gets a Characters object of the AxisTitle object.
            ICharacters characters = axisTitle.Characters;
            
            //Sets font's color for the specified position.
            characters.SubCharacters(0, 4).Font.Color = Color.Blue;
            
            //Sets font's bold for the specified position.
            characters.SubCharacters(0, 4).Font.Bold = true;
            
            //Sets font's italic for the specified position.
            characters.SubCharacters(0, 4).Font.Italic = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a CategoryAxis object of the Chart object.
            Dim categoryAxis As ICategoryAxis = chart.CategoryAxis
            
            'Gets a AxisTitle object of the the CategoryAxis object.
            Dim axisTitle As IAxisTitle = categoryAxis.Title
            
            'Sets title's text of the AxisTitle object.   
            axisTitle.Text = "2012 Region"
            
            'Sets text's orientation.
            axisTitle.Orientation = 30
            
            'Gets a Characters object of the AxisTitle object.
            Dim characters As ICharacters = axisTitle.Characters
            
            'Sets font's color for the specified position.
            characters.SubCharacters(0, 4).Font.Color = Color.Blue
            
            'Sets font's bold for the specified position.
            characters.SubCharacters(0, 4).Font.Bold = True
            
            'Sets font's italic for the specified position.
            characters.SubCharacters(0, 4).Font.Italic = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartTitle">
            <summary>
            Represents the chart title.
            </summary>
            <example>
            How to get a ChartTitle object.
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets chart title of the Chart object.
            IChartTitle title = chart.ChartTitle;
            
            //Sets text of the ChartTitle object.
            title.Text = "2012 Year Sales Report";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Sets text of the ChartTitle object.
            title.Text = "2012 Year Sales Report"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChartTitle.RemoveCharacters">
            <summary>
            Removes all of Characters object.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart title of the Chart object.
             IChartTitle title = chart.ChartTitle;
             
             //Removes all of Characters object.
             title.RemoveCharacters();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Removes all of Characters object.
            title.RemoveCharacters()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Area">
            <summary>
            Returns a Acey.ExcelX.Drawing.IArea object that represents the area of the object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart title of the Chart object.
             IChartTitle title = chart.ChartTitle;
            
             //Gets area of the chart title.
             Acey.ExcelX.Drawing.IArea area = title.Area;
            
             //Sets background color of the chart title's area.
             area.BackgroundColor = Color.Gray;
             
             //Sets foreground color of the chart title's area.
             area.ForegroundColor = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Gets area of the chart title.
            Dim area As Acey.ExcelX.Drawing.IArea = title.Area
            
            'Sets background color of the chart title's area.
            area.BackgroundColor = Color.Gray
            
            'Sets foreground color of the chart title's area.
            area.ForegroundColor = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Border">
            <summary>
            Returns a Acey.ExcelX.Drawing.ILine object that represents the border of the object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart title of the Chart object.
             IChartTitle title = chart.ChartTitle;
            
             //Gets border of the chart title.
             Acey.ExcelX.Drawing.ILine line = title.Border;
            
             //Sets style of the chart title's border.
             line.Style = LineType.MediumGray;
             
             //Sets color of the chart title's border.
             line.Color = Color.Blue;
             
             //Sets weight of the chart title's border.
             line.Weight = WeightType.WideLine;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Gets border of the chart title.
            Dim line As Acey.ExcelX.Drawing.ILine = title.Border
            
            'Sets style of the chart title's border.
            line.Style = LineType.MediumGray
            
            'Sets color of the chart title's border.
            line.Color = Color.Blue
            
            'Sets weight of the chart title's border.
            line.Weight = WeightType.WideLine
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Font">
            <summary>
            Returns a Font object that represents the font of the specified object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart title of the Chart object.
             IChartTitle title = chart.ChartTitle;
            
             //Gets border of the chart title.
             Acey.ExcelX.IFont font = title.Font;
            
             //Sets name of the chart title's font.
             font.Name = "Verdana";
             
             //Sets color of the chart title's font.
             font.Color = Color.Blue;
             
             //Sets size of the chart title's font.
             font.Size = 16;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Gets border of the chart title.
            Dim font As Acey.ExcelX.IFont = title.Font
            
            'Sets name of the chart title's font.
            font.Name = "Verdana"
            
            'Sets color of the chart title's font.
            font.Color = Color.Blue
            
            'Sets size of the chart title's font.
            font.Size = 16
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment for the specified object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Orientation">
            <summary>
            Gets or sets the text rotation. Must be between -90 and 90 degrees.
            </summary>
            <remarks>The number must be between -90 and 90.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than -90 or greater than 90 degrees.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Text">
            <summary>
            Gets or sets the text for the specified object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ChartTitle object of the Chart object.
            IChartTitle title = chart.ChartTitle;
            
            //Sets text of the ChartTitle object.
            title.Text = "Report";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ChartTitle object of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Sets text of the ChartTitle object.
            title.Text = "Report"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.TextDirection">
            <summary>
            Gets or sets the reading order of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.BackgroundMode">
            <summary>
            Gets or sets the display mode of the background of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Shadow">
            <summary>
            True if the object has a shadow.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Characters">
            <summary>
            Returns a Characters object of the title.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart title of the Chart object.
             IChartTitle title = chart.ChartTitle;
             
             //Sets text of the chart title's.
             title.Text = "2012 Year Sales";
            
             //Gets character of the chart title.
             Acey.ExcelX.ICharacters characters = title.Characters;
            
             //Sets name of the font.
             characters.SubCharacters(0, 3).Font.Name = "Verdana";
             
             //Sets color of the font.
             characters.SubCharacters(0, 3).Font.Color = Color.Blue;
             
             //Sets size of the font.
             characters.SubCharacters(0, 3).Font.Size = 16;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart title of the Chart object.
            Dim title As IChartTitle = chart.ChartTitle
            
            'Sets text of the chart title's.
            title.Text = "2012 Year Sales"
            
            'Gets character of the chart title.
            Dim characters As Acey.ExcelX.ICharacters = title.Characters
            
            'Sets name of the font.
            characters.SubCharacters(0, 3).Font.Name = "Verdana"
            
            'Sets color of the font.
            characters.SubCharacters(0, 3).Font.Color = Color.Blue
            
            'Sets size of the font.
            characters.SubCharacters(0, 3).Font.Size = 16
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Height">
            <summary>
            Gets or sets the height of the ChartTitle object.
            </summary>
            <remarks>Height is in units of 1/4000 of the chart area.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartTitle.Width">
            <summary>
            Gets or sets the width of the ChartTitle object.
            </summary>
            <remarks>Width is in units of 1/4000 of the chart area.</remarks>
        </member>
        <member name="T:Acey.ExcelX.IWorksheetWindowInfo">
            <summary>
            Specifies attributes of the window used to display a sheet in a workbook.
            </summary>
            <example>
            How to get attributes of the window used to display a sheet in a workbook.
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by using sheet name.
            IWorksheet worksheet = worksheets["Sheet1"];
            
            //Gets a WorksheetWindowInfo object of the Worksheet.
            IWorksheetWindowInfo worksheetWindowInfo = worksheet.WindowInfo;
            
            //Specifies whether the window displays gridlines. 
            worksheetWindowInfo.DisplayGridlines = false;
            
            //Specifies whether the window displays row headings and column headings. 
            worksheetWindowInfo.DisplayHeadings = false;
            
            //Specifies whether the text is displayed in right-to-left mode in the window.
            worksheetWindowInfo.DisplayRightToLeft = false;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by using sheet name.
            Dim worksheet As IWorksheet = worksheets("Sheet1")
            
            'Gets a WorksheetWindowInfo object of the Worksheet.
            Dim worksheetWindowInfo As IWorksheetWindowInfo = worksheet.WindowInfo
            
            'Specifies whether the window displays gridlines. 
            worksheetWindowInfo.DisplayGridlines = False
            
            'Specifies whether the window displays row headings and column headings. 
            worksheetWindowInfo.DisplayHeadings = False
            
            'Specifies whether the text is displayed in right-to-left mode in the window.
            worksheetWindowInfo.DisplayRightToLeft = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayFormulas">
            <summary>
            Specifies whether the window displays formulas or values.
            </summary>
            <remarks>Default is false. </remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayGridlines">
            <summary>
            Specifies whether the window displays gridlines. 
            </summary>
            <remarks>Default is true. </remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayHeadings">
            <summary>
            Specifies whether the window displays row headings and column headings. 
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayOutline">
            <summary>
            Specifies whether the window displays the outline state.
            </summary>
            <remarks>Defalut is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayRightToLeft">
            <summary>
             Specifies whether the text is displayed in right-to-left mode in the window.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.DisplayZeros">
            <summary>
            Specifies whether the window displays zero values.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.FreezePanes">
            <summary>
            Specifies whether the panes in the window are frozen.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.GridlineColor">
            <summary>
             Gets or sets the color to use for gridlines.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.View">
            <summary>
            Gets or sets whether the worksheet is viewed normally or in page break preview mode.
            </summary>
            <remarks>Default is normal mode.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetWindowInfo.Zoom">
            <summary>
            Gets or sets  the zoom level in the Page Break Preview view. 
            </summary>
            <remarks>
            Default is 100.
            The number must be between 10 and 400.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value less than 10 or greater than 400.</exception>
        </member>
        <member name="T:Acey.ExcelX.IValidationCollection">
            <summary>
            Specifies a data validation collection.
            </summary>
            <example>
            How to get a Validation object collection from worksheet object.
            <code>
            [C#]
            //Creates a Workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Validation object collection of the Worksheet.
            IValidationCollection validations = worksheet.Validations;
            
            //Gets a Validation object by using zero-based index.
            IValidation validation = validations[0];
            
            //Sets to display an error message when the data validation fails.
            validation.ShowError = true;
            
            //Sets the style of error alert to be used.
            validation.AlertStyle = ValidationAlertType.Warning;
            
            //Sets the title of the error that is displayed.
            validation.ErrorTitle = "Warning";
             
            //Sets the message shown in the input prompt that is displayed when the cell is selected.
            validation.ErrorMessage = "Warning Message";
            
            [Visual Basic]
            'Creates a Workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Validation object collection of the Worksheet.
            Dim validations As IValidationCollection = worksheet.Validations
            
            'Gets a Validation object by using zero-based index.
            Dim validation As IValidation = validations(0)
            
            'Sets to display an error message when the data validation fails.
            validation.ShowError = True
            
            'Sets the style of error alert to be used.
            validation.AlertStyle = ValidationAlertType.Warning
            
            'Sets the title of the error that is displayed.
            validation.ErrorTitle = "Warning"
            
            'Sets the message shown in the input prompt that is displayed when the cell is selected.
            validation.ErrorMessage = "Warning Message"
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IValidationCollection.Add">
            <summary>
            Adds a new data validation object.
            </summary>
            <returns>Reurns a new data validation object.</returns>
        </member>
        <member name="P:Acey.ExcelX.IValidationCollection.Count">
            <summary>
            Gets the number of the data validation collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidationCollection.Item(System.Int32)">
            <summary>
            Gets a data validation by using zero-based index.
            </summary>
            <param name="index">zero-based index</param>
            <returns>Gets a data validation by using zero-based index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to the Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.IColorCollection">
            <summary>
             Represents the color palette of a workbook.
            </summary>
            <example>
            how to get the color palette of a workbook.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a color collection from the workbook object.
            IColorCollection colors = workbook.Colors;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a color collection from the workbook object.
            Dim colors As IColorCollection = workbook.Colors
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColorCollection.Count">
            <summary>
            Gets the number of colors in the color palette.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IColorCollection.Item(System.Int32)">
            <summary>
             Gets the color at the specified zero based index.
            </summary>
            <param name="index">The zero based index of the color to get.</param>
            <returns>The color at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a color collection from the workbook object.
            IColorCollection colors = workbook.Colors;
            
            //Gets a color using zero-based index.
            System.Drawing.Color color = colors[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a color collection from the workbook object.
            Dim colors As IColorCollection = workbook.Colors
            
            'Gets a color using zero-based index.
            Dim color As System.Drawing.Color = colors(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0.-or-index is equal to or greater than IColorCollection.Count.
            </exception>
        </member>
        <member name="T:Acey.ExcelX.ICellCollection">
            <summary>
             Represents a collection of Cell objects.
            </summary>
            <remarks> for example when you need to apply style to some continuous cells in a woksheet, you can use IRange interface.
            however you need to apply style to discontinuous some cells in a worksheet.you can use ICell or ICellCollection.
             </remarks>
             <example>
             How to get a collection of cell objects.
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a cell collection from the worksheet object.
             ICellCollection selectedCells = worksheet.Selection;
             
             //Gets a cell object.
             ICell cell = worksheet.Cells["A1"];
             
             //Sets formual to the cell.
             cell.Formula = "=SUM(1,2)";
             
             //Adds the cell to the cell collection.
             selectedCells.Add(cell);
             
             //Gets a cell object.
             cell = worksheet.Cells["C5"];
             
             //Sets a interger value to the cell.
             cell.Value = 12;
             
             //Adds the cell to the cell collection.
             selectedCells.Add(cell);
             
             //Clears formulas and values from the cell collection.
             selectedCells.ClearContents();
             
             [Visual Basic] 
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a cell collection from the worksheet object.
             Dim selectedCells As ICellCollection = worksheet.Selection
             
             'Gets a cell object.
             Dim cell As ICell = worksheet.Cells("A1")
             
             'Sets formual to the cell.
             cell.Formula = "=SUM(1,2)"
             
             'Adds the cell to the cell collection.
             selectedCells.Add(cell)
             
             //Gets a cell object.
             cell = worksheet.Cells("C5")
             
             'Sets a interger value to the cell.
             cell.Value = 12
             
             'Adds the cell to the cell collection.
             selectedCells.Add(cell)
              
             'Clears formulas and values from the cell collection.
             selectedCells.ClearContents();
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.Add(Acey.ExcelX.ICell)">
            <summary>
            Adds a cell to a collection of Cell objects.
            </summary>
            <param name="cell">Specifies cell.</param>
            <remarks>Collections cell object to cell collection. you can add continue or discontinue cell to it.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="cell"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.ApplyStyle(Acey.ExcelX.IStyle)">
            <summary>
            Applies formattings for a collection of cell objects.
            </summary>
            <param name="style">Specifies style.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            ICell cell;
            //Gets a cell using cell name.
            cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a style object using style name.
            IStyle style = workbook.Styles["Percent"];
            
            //Applies the style to all of cell in cell collection.
            selectedCells.ApplyStyle(style);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            Dim cell As ICell
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a style object using style name.
            Dim style As IStyle = workbook.Styles("Percent")
            
            'Applies the style to all of cell in cell collection.
            selectedCells.ApplyStyle(style)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.Clear">
            <summary>
            Clear all cell objects. 
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Clears the cell collection.
            selectedCells.Clear();
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Clears the cell collection.
            selectedCells.Clear()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.ClearContents">
            <summary>
             Clears formulas and values from the cell collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Clears contents of all of cell in cell collection.
            selectedCells.ClearContents();
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Clears contents of all of cell in cell collection.
            selectedCells.ClearContents()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.ClearFormats">
            <summary>
             Clears all formatting from the cell collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Clears format of all of cell in cell collection.
            selectedCells.ClearFormats();
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Clears format of all of cell in cell collection.
            selectedCells.ClearFormats()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICellCollection.Contains(Acey.ExcelX.ICell)">
            <summary>
            Determines whether a cell object is in the collection of cell objects.
            </summary>
            <param name="cell">Specifies cell.</param>
            <returns>true if the cell is found in the collection of cell objects;otherwise, false. </returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell collection.
            ICellCollection selectedCells = worksheet.Selection;
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["B3"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Gets a cell using cell name.
            cell = worksheet.Cells["F10"];
            //Adds the cell to the cell collection.
            selectedCells.Add(cell);
            
            //Returns whether contains the cell in cell collection.
            bool isContains = selectedCells.Contains(cell);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell collection.
            Dim selectedCells As ICellCollection = worksheet.Selection
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("B3")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("F10")
            
            'Adds the cell to the cell collection.
            selectedCells.Add(cell)
            
            'Returns whether contains the cell in cell collection.
            Dim isContains As Boolean = selectedCells.Contains(cell)
            </code>
            </example> 
        </member>
        <member name="P:Acey.ExcelX.ICellCollection.Count">
            <summary>
            Gets the number of cell objects in the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICellCollection.Item(System.Int32)">
            <summary>
            Gets cell object by sepcify index.
            </summary>
            <param name="index">Specifies the zero based index of the cell.</param>
            <returns>The Cell at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than ICellCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.PrintErrors">
            <summary>   
             Specifies the type of print error displayed.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintErrors.PrintErrorsDisplayed">
            <summary>
            Display all print errors.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintErrors.PrintErrorsBlank">
            <summary>
             Print errors as blank.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintErrors.PrintErrorsDash">
            <summary>
             Print errors as dashes ("---").
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PrintErrors.PrintErrorsNA">
            <summary>
             Print errors as #N/A. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FormatConditionType">
            <summary>
            Specifies type of a condition formatting.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FormatConditionType.CellValue">
            <summary>
            CellValue
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FormatConditionType.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="T:Acey.ExcelX.LineStyle">
            <summary>
            Specifies the border line style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Thin">
            <summary>
            Thin line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Medium">
            <summary>
            Medium line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Dashed">
            <summary>
            Dashed line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Dotted">
            <summary>
            Dotted line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Thick">
            <summary>
            Thick line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Double">
            <summary>
            Double line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.Hairline">
            <summary>
            Hairline
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.MediumDashed">
            <summary>
            Medium dashed line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.DashDot">
            <summary>
            Dash-dot line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.MediumDashDot">
            <summary>
            Medium dash-dot line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.DashDotDot">
            <summary>
            Dash-dot-dot line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot line
            </summary>
        </member>
        <member name="F:Acey.ExcelX.LineStyle.SlantedDashDotDot">
            <summary>
            Slanted dash-dot-dot
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IAutoFilter">
             <summary>
            Represents autofiltering for the specified worksheet.
             </summary>
             <remarks>To create a AutoFilter object for a worksheet, you must turn autofiltering on for a range on the worksheet either manually or using the AutoFilter method of the Range object.</remarks>
             <example>
             How to auto filter the range object.
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Creates two array object.
             object[,] array = new object[3, 2] { { "Name", "Score" }, { "Tom", 80 }, { "Jack", 90 } };
             
             //Imports array to the specified location of worksheet.
             worksheet.ImportArray(array, 1, 1);
             
             //Gets a range object by using valid reference.
             IRange range = worksheet.Cells.CreateRange("B2:C4");
             
             //Filters the specified range.
             range.AutoFilter(0, "=T*", AutoFilterOperator.And, null, true);
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.IAutoFilter.ShowAllData">
            <summary>
            Displays all the data.
            </summary>
            <example>
            How to displays all the data.
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\autoFilter.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets autoFilter object of the Worksheet object.
            IAutoFilter autoFilter = worksheet.AutoFilter;
            
            //Displays all the data.
            autoFilter.ShowAllData();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\autoFilter.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets autoFilter object of the Worksheet object.
            Dim autoFilter As IAutoFilter = worksheet.AutoFilter
            
            'Displays all the data.
            autoFilter.ShowAllData()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IAutoFilter.Range">
            <summary>
            Represents the range to which the specified AutoFilter applies.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IAutoFilter.Filters">
            <summary>
            Gets the collection of the filer columns.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ITrendlineCollection">
            <summary>
            Represents a Acey.ExcelX.Charts.ITrendline object collection.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic;
            
            //True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic
            
            'True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ITrendlineCollection.Add(Acey.ExcelX.Charts.TrendlineType)">
            <summary>
            Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type.
            </summary>
            <param name="type">The specified type.</param>
            <returns>A Acey.ExcelX.Charts.ITrendline object.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type.
            ITrendline trendline = trendlines.Add(TrendlineType.Logarithmic);
            
            //True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type.
            Dim trendline As ITrendline = trendlines.Add(TrendlineType.Logarithmic)
            
            'True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ITrendlineCollection.Add(Acey.ExcelX.Charts.TrendlineType,System.String)">
            <summary>
            Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type and name.
            </summary>
            <param name="type">The specified type.</param>
            <param name="name">The specified name.</param>
            <returns>A Acey.ExcelX.Charts.ITrendline object.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type and name.
            ITrendline trendline = trendlines.Add(TrendlineType.Logarithmic, "abc");
            
            //True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Adds a Acey.ExcelX.Charts.ITrendline object to this collection with the specified type and name.
            Dim trendline As ITrendline = trendlines.Add(TrendlineType.Logarithmic, "abc")
            
            'True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ITrendlineCollection.RemoveAt(System.Int32)">
             <summary>
             Removes Trendline object from collection at the zero-based index.
             </summary>
             <param name="index">The zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to the ITrendlineCollection.Count.</exception>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
             ITrendlineCollection trendlines = series.TrendLines;
             
             //Removes Trendline object from collection at the zero-based index.
             trendlines.RemoveAt(0);
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
             Dim trendlines As ITrendlineCollection = series.TrendLines
             
             'Removes Trendline object from collection at the zero-based index.
             trendlines.RemoveAt(0)
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ITrendlineCollection.Clear">
            <summary>
            Clears current collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Clears current collection.
            trendlines.Clear();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Clears current collection.
            trendlines.Clear()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendlineCollection.Count">
            <summary>
            Gets the number of Acey.ExcelX.Charts.ITrendline.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendlineCollection.Item(System.Int32)">
            <summary>
            Gets a Acey.ExcelX.Charts.ITrendline object by using zero-based index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>A Acey.ExcelX.Charts.ITrendline object at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than zero or greater than or equal to the ITrendlineCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.Drawing.FormattingType">
            <summary>
            Represents the type of formatting applied to Acey.ExcelX.Drawing.IArea.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FormattingType.Automatic">
            <summary>
            Represents automatic formatting type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FormattingType.Custom">
            <summary>
            Represents custom formatting type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.FormattingType.None">
            <summary>
            Represents none formatting type.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ExcelxHelper">
            <summary>
            Provides helper functions.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.DecToLetter26(System.Int32)">
            <summary>
            十进制转换为字母进制（26进制）
            </summary>
            <param name="dec"></param>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.CellIndexToName(System.Int32,System.Int32)">
            <summary>
            Gets cell name according to its row and column indexes.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <returns>Name of cell.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">row is less than 0 or greater than max row index. -or-
            column is less than 0 or greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.Letter26ToDec(System.String)">
            <summary>
            将26进制转换为10进制
            </summary>
            <param name="letter26"></param>
            <returns></returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.CellNameToIndex(System.String,System.Int32@,System.Int32@)">
            <summary>
             Gets the cell row and column indexes according to its name. such as A1,AB12 etc.
            </summary>
            <param name="cellName">Name of cell.</param>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <exception cref="T:System.ArgumentNullException">cellName is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.ColumnIndexToName(System.Int32)">
            <summary>
            Gets column name according to column index.
            </summary>
            <param name="column">The zero-based column index.</param>
            <returns>Name of column.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.ColumnNameToIndex(System.String)">
            <summary>
            Gets column index according to column name.
            </summary>
            <param name="columnName">Name of column.</param>
            <returns>The zero-based column index.</returns>
            <exception cref="T:System.ArgumentNullException">columnName is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid column name.</exception>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.RowIndexToName(System.Int32)">
            <summary>
            Gets row name according to row index.
            </summary>
            <param name="row">The zero-based row index.</param>
            <returns> Name of row.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">row is out of range.</exception>
        </member>
        <member name="M:Acey.ExcelX.ExcelxHelper.RowNameToIndex(System.String)">
            <summary>
            Gets row index according to row name.
            </summary>
            <param name="rowName">Name of row.</param>
            <returns>The zero-based row index.</returns>
            <exception cref="T:System.ArgumentNullException">Invalid row name.</exception>
        </member>
        <member name="T:Acey.ExcelX.IWorksheet">
             <summary>
             Represents a worksheet.
             </summary>
            <example>
             How to get a worksheet object.  
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a Worksheet object collection in the Workbook.
             IWorksheetCollection worksheets = workbook.Worksheets;
             
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = worksheets[0];
             
             //Creates a Range object.
             IRange range = worksheet.Cells.CreateRange("A1:B2");
             
             //Add a horizontal pagebreak in worksheet.
             worksheet.HPageBreaks.Add(range);
             
             //Add a hyperlink in worksheet.   
             worksheet.Hyperlinks.Add(range, "http://msdn.microsoft.com", "", ".Net", ".Net");
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a Worksheet object collection in the Workbook.
             Dim worksheets As IWorksheetCollection = workbook.Worksheets
             
             'Gets a Worksheet object by using zero-based index.
             Dim worksheet As IWorksheet = worksheets(0)
             
             'Creates a Range object.
             Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
             
             'Add a horizontal pagebreak in worksheet.
             worksheet.HPageBreaks.Add(range)
             
             'Add a hyperlink in worksheet.   
             worksheet.Hyperlinks.Add(range, "http://msdn.microsoft.com", "", ".Net", ".Net")
             </code>
             </example>
        </member>
        <member name="T:Acey.ExcelX.ISheet">
            <summary>
            The base interface of all sheets in a workbook, including worksheets, chart
                sheets, dialog sheets, macro sheets and VBA modules.
            </summary>
            <example>
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Sets the sheet is actived.
            sheet.Activate();
            
            //Gets a sheet object by using zero-based index.
            sheet = sheets[1];
            
            //Hides the sheet object.
            sheet.Visible = SheetVisibility.Hidden;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Sets the sheet is actived.
            sheet.Activate()
            
            'Gets a sheet object by using zero-based index.
            sheet = sheets(1)
            
            //Hides the sheet object.
            sheet.Visible = SheetVisibility.Hidden
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ISheet.Copy(Acey.ExcelX.ISheet)">
            <summary>
            Copies contents and formats from another sheet. 
            </summary>
            <param name="sheet">Source sheet.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheetSource = sheets[0];
            
            //Gets a sheet object by using zero-based index.
            ISheet sheetDest = sheets[1];
            
            //Copies contents and formats from another sheet.
            sheetDest.Copy(sheetSource);
            
            [Visual Basic]
            'Creates a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheetSource As ISheet = sheets(0)
            
            'Gets a sheet object by using zero-based index.
            Dim sheetDest As ISheet = sheets(1)
            
            'Copies contents and formats from another sheet.
            sheetDest.Copy(sheetSource)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="sheet"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.ISheet.Activate">
            <summary>
            Activates the first window associated with the sheet.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ISheet.Delete">
            <summary>
            Deletes the speicified sheet.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Deletes the speicified sheet.
            sheet.Delete();
            
            [Visual Basic]
            'Creates a Workbook object
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Deletes the speicified sheet.
            sheet.Delete()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ISheet.DeleteBackground">
            <summary>
            Deletes sheet background.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ISheet.Move(System.Int32)">
            <summary>
            Moves the specified sheet to another location in a workbook. 
            </summary>
            <param name="index">The zero-based index of the sheet.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Moves the specified sheet to another location in a workbook. 
            sheet.Move(1);
            
            [Visual Basic]
            'Creates a Workbook object
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Moves the specified sheet to another location in a workbook. 
            sheet.Move(1)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than ISheetCollection.Count.</exception>       
        </member>
        <member name="P:Acey.ExcelX.ISheet.Index">
            <summary>
            Gets the index number of the object within the collection of ISheetCollection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheet.HasBackground">
            <summary>
            Gets whether has a sheet background. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheet.Name">
            <summary>
            Gets or sets the unique case-insensitive name of the sheet. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheet.SheetType">
             <summary>
            Gets sheet type of the specified sheet object.
             </summary>  
        </member>
        <member name="P:Acey.ExcelX.ISheet.Tab">
            <summary>
            Gets a sheet tab of worksheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Gets a sheet tab of worksheet.
            ITab tab = sheet.Tab;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Gets a sheet tab of worksheet.
            Dim tab As ITab = sheet.Tab
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ISheet.Visible">
            <summary>
             Gets or sets the property which indicates whether or not a sheet is visible.
            </summary>
            <remarks>Cannot set all sheet are hidden. at least one is visible.</remarks>
        </member>
        <member name="P:Acey.ExcelX.ISheet.Workbook">
             <summary>
             Gets the workbook which contains the current sheet.
             </summary>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a Workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a Sheet object collection in the Workbook.
             ISheetCollection sheets = workbook.Sheets;
             
             //Gets a sheet object by using zero-based index.
             ISheet sheet = sheets[0];
             
             //Gets the workbook which contains the current sheet.
             IWorkbook currentWorkbook = sheet.Workbook;
            
             [Visual Basic]
             'Creates a Workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a Sheet object collection in the Workbook.
             Dim sheets As ISheetCollection = workbook.Sheets
             
             'Gets a sheet object by using zero-based index.
             Dim sheet As ISheet = sheets(0)
             
             'Gets the workbook which contains the current sheet.
             Dim currentWorkbook As IWorkbook = sheet.Workbook
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.ISheet.WorkbookSet">
            <summary>
             Returns the parent IWorkbookSet of this sheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Sheet object collection in the Workbook.
            ISheetCollection sheets = workbook.Sheets;
            
            //Gets a sheet object by using zero-based index.
            ISheet sheet = sheets[0];
            
            //Gets the parent IWorkbookSet of this sheet.
            IWorkbookSetting workbookSet = sheet.WorkbookSet;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Sheet object collection in the Workbook.
            Dim sheets As ISheetCollection = workbook.Sheets
            
            'Gets a sheet object by using zero-based index.
            Dim sheet As ISheet = sheets(0)
            
            'Gets the parent IWorkbookSet of this sheet.
            Dim workbookSet As IWorkbookSetting = sheet.WorkbookSet
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ISheet.Shapes">
            <summary>
            Gets a collection of shape that represents the shapes for the sheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ISheet.PageSetup">
            <summary>
             Gets an instance of IPageSetup which provides access to page setup options.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets PageSetup object of the Worksheet.
            IPageSetup pageSetup = worksheet.PageSetup;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets PageSetup object of the Worksheet.
            Dim pageSetup As IPageSetup = worksheet.PageSetup
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ISheet.Zoom">
            <summary>
            Represents the scaling factor in percent. It should be btween 10 and 400.
            </summary> 
            <remarks>Default is 100.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value less than 10 or greater than 400.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFit">
            <summary>
            Autofits the height and width of cell according to the content. 
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFitColumn(System.Int32)">
            <summary>
            Autofits the width of column according to the column's cells content.
            </summary>
            <param name="columnIndex">The specified zero-based column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than 0 or greater than the max column.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFitColumn(System.String)">
            <summary>
            Autofits the width of column according to the column's cells content.
            </summary>
            <param name="columnName">The specified column name.</param>
            <exception cref="T:System.ArgumentException">the column name must be between "A" and "IV"(in Excel2003).</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFitColumns">
            <summary>
            Autofits the width of cell according to the content.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFitRow(System.Int32)">
            <summary>
            Autofits the height of cell according to the content by the specified zero-based row index.
            </summary>
            <param name="rowIndex">The specified zero-based row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is less than 0 or greater than the 65535.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.AutoFitRows">
            <summary>
            Autofits the height of cell according to the content.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Deletes a column from worksheet at the specified zero-based column index.
            </summary>
            <param name="columnIndex">Specified zero-based column index.</param>      
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Creates a workbook object by opening a excel format file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Deletes a single column from worksheet object at the specified column index.
             worksheet.DeleteColumn(1);
             
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Deletes a single column from worksheet object at the specified column index.
            worksheet.DeleteColumn(1)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is negative or greater than 255.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.DeleteColumns(System.Int32,System.Int32)">
            <summary>
            Deletes multiple columns from worksheet.
            </summary>
            <param name="columnIndex">Specified zero-based column index.</param>
            <param name="totalColumns">Deletes column number.</param>   
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by opening a excel format file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
            //Deletes multiple columns from worksheet object.
            worksheet.DeleteColumns(1, 2);
            
            [Visual Basic]
            </code> 
            </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> or <paramref name="totalColumns"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> + <paramref name="totalColumns"/> is out of range.</exception>          
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.DeleteRow(System.Int32)">
            <summary>
            Deletes a row from worksheet at the specified zero-based row index.
            </summary>
            <param name="rowIndex">Specified zero-based row index.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by opening a excel format file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets the first worksheet object from the workbook object.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Deletes a single row from worksheet object at the specified row index.
            worksheet.DeleteRow(1);
            
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Deletes multiple columns from worksheet object.
            worksheet.DeleteRow(1)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/>is negative or greater than 65535.</exception>          
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.DeleteRows(System.Int32,System.Int32)">
            <summary>
            Deletes multiple rows from worksheet.
            </summary>
            <param name="rowIndex">Specified zero-based row index.</param>
            <param name="totalRows">Deletes row number.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by opening a excel format file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets the first worksheet object from the workbook object.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Deletes multiple rows from worksheet object.
            worksheet.DeleteRows(1, 2);
            
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Deletes multiple rows from worksheet object.
            worksheet.DeleteRows(1, 2)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> or <paramref name="totalRows"/> is out of range.<br></br>
            or <paramref name="rowIndex"/> + <paramref name="totalRows"/> is out of range.</exception>               
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ExportToFile(System.String)">
            <summary>
            Exports the worksheet data to file(support .csv file format )
            </summary>
            <param name="fileName">The specified file.</param> 
            <example>
            the example shows how to export worhsheets' datas to file
            <code>
            [C#]
            string path = @"d:\Book1.xls";
            IWorkbook workbook = ExcelxApplication.Open(path);
            foreach (IWorksheet worksheet in workbook.Worksheets)
            {
                string csvFileName = @"d:\Book1_"+worksheet.Name+".csv";
                worksheet.ExportToFile(csvFileName);
            } 
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.FreezePanes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Freezes panes at the specified cell in the worksheet.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <param name="freezedRows">Number of visible rows in top pane. less than or equal to row.</param>
            <param name="freezedColumns">Number of visible columns in left pane. less than or equal to column.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Freezes panes at the specified cell in the worksheet.
            worksheet.FreezePanes(1, 2, 2, 3);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Freezes panes at the specified cell in the worksheet.
            worksheet.FreezePanes(1, 2, 2, 3)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than 65535.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0 or greater than 255.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="freezedRows"/> is less than 0 or greater than 65535.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="freezedColumns"/> is less than 0 or greater than 255.</exception>       
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.FreezePanes(System.Int32,System.Int32)">
            <summary>
            Freezes panes at the specified cell in the worksheet.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Freezes panes at the specified cell in the worksheet.
            worksheet.FreezePanes(1, 2);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Freezes panes at the specified cell in the worksheet.
            worksheet.FreezePanes(1, 2)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than 65535.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0 or greater than 255.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GetFreezedPanes(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets Freezes panes at the specified cell in the worksheet.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <param name="freezedRows">Number of visible rows in top pane. less than or equal to row index.</param>
            <param name="freezedColumns">Number of visible columns in top pane. less than or equal to column index.</param>
            <returns>Returns true if the worksheet has Freezes panes, otherwise false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\FreezePanes.xls");
            
            //Gets a worksheet by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            int row, col, freezedcolumns, freezedrows;
            
            //Gets Freezes panes at the specified cell in the worksheet.
            bool result = worksheet.GetFreezedPanes(out row, out col, out freezedrows, out freezedcolumns);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\FreezePanes.xls") 
            
            'Gets a worksheet by using zero-based index.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            Dim row As Integer,col As Integer,freezedcolumns As Integer,freezedrows As Integer
            
            'Gets Freezes panes at the specified cell in the worksheet.
            Dim result As Boolean =  worksheet.GetFreezedPanes( row,out col,out freezedrows,out freezedcolumns)
            </code>
            </example>    
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GetFreezedPanes(System.Int32@,System.Int32@)">
            <summary>
            Gets Freezes panes at the specified cell in the worksheet.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param> 
            <returns>Returns true if the worksheet has Freezes panes, otherwise false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\FreezePanes.xls");
            
            //Gets a worksheet by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            int row, col, freezedcolumns, freezedrows;
            
            //Gets Freezes panes at the specified cell in the worksheet.
            bool result = worksheet.GetFreezedPanes(out row, out col );
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\FreezePanes.xls") 
            
            'Gets a worksheet by using zero-based index.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            Dim row As Integer,col As Integer,freezedcolumns As Integer,freezedrows As Integer
            
            'Gets Freezes panes at the specified cell in the worksheet.
            Dim result As Boolean =  worksheet.GetFreezedPanes( out row,out col )
            </code>
            </example>    
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Groups columns.
            </summary>
            <param name="firstColumn">The first column zero-based index to be grouped.</param>
            <param name="lastColumn">The last column zero-based index to be grouped.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start column index. -or- Invalid end column index.</exception>
            <exception cref="T:System.ArgumentException">start column index greater than end column index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GroupColumns(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups columns.
            </summary>
            <param name="firstColumn">The first column zero-based index to be grouped.</param>
            <param name="lastColumn">The last column zero-based index to be grouped.</param>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start column index. -or- Invalid end column index.</exception>
            <exception cref="T:System.ArgumentException">start column index greater than end column index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GroupRows(System.Int32,System.Int32)">
            <summary>
            Groups rows.
            </summary>
            <param name="firstRow">The first row zero-based index to be grouped.</param>
            <param name="lastRow">The last row zero-based index to be grouped.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start row index. -or- Invalid end row index.</exception>
            <exception cref="T:System.ArgumentException">start row index greater than end row index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.GroupRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups rows.
            </summary>
            <param name="firstRow">The first row zero-based index to be grouped.</param>
            <param name="lastRow">The last row zero-based index to be grouped.</param>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start row index. -or- Invalid end row index.</exception>
            <exception cref="T:System.ArgumentException">start row index greater than end row index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.HideColumn(System.Int32)">
            <summary>
            Hides the specified column.
            </summary>
            <param name="column">The zero-based column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">column is out of range.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.HideColumns(System.Int32,System.Int32)">
            <summary>
            Hides the specified columns.
            </summary>
            <param name="column">The zero-based column index.</param>
            <param name="totalColumns">Column number.</param>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.HideRow(System.Int32)">
            <summary>
            Hides the specified row.
            </summary>
            <param name="row">The zero-based row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is out of range.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.HideRows(System.Int32,System.Int32)">
            <summary>
            Hides multiple rows.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="totalRows">Row number</param>
            <exception cref="T:System.ArgumentOutOfRangeException">row or  totalRows are out of range.</exception>
            <exception cref="T:System.ArgumentException">row + totalRows is out of range.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column at the specified zero-based column index.
            </summary>
            <param name="columnIndex">The specified zero-based column index.</param>   
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Creates a workbook object by opening a excel format file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Deletes a single row from worksheet object at the specified row index.
             worksheet.InsertColumn(1);
             
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\book1.xls") 
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            'Deletes a single row from worksheet object at the specified row index.
            worksheet.InsertColumn(1)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than 0 or greater than 255.</exception>
            <exception cref="T:System.InvalidOperationException">To prevent possible loss of data. e.g. Inserts row If last row has data or formatting.</exception>            
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.InsertColumns(System.Int32,System.Int32)">
            <summary>
             Inserts multiple columns into the worksheet.
            </summary>
            <param name="columnIndex">Specifies zero-based column index.</param>
            <param name="columnNumber">Number of column to be inserted.</param>     
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Creates a workbook object by opening a excel format file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Deletes multiple columns from worksheet object.
             worksheet.InsertColumns(1, 2);
             
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\book1.xls") 
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            'Deletes multiple columns from worksheet object.
            worksheet.InsertColumns(1, 2)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> or <paramref name="columnNumber"/> is negative or greater than 255.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> + <paramref name="columnNumber"/> is greater than 255.</exception>
            <exception cref="T:System.InvalidOperationException">To prevent possible loss of data. e.g. Inserts column if last column has data or formatting in worksheet.</exception>          
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.InsertRow(System.Int32)">
            <summary>
            Inserts a new row at the specified zero-based row index.
            </summary>
            <param name="rowIndex">Specifies zero-based row index.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Creates a workbook object by opening a excel format file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Deletes a single row from worksheet object at the specified row index.
             worksheet.InsertRow(1);
             
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\book1.xls") 
            
            'Gets the first worksheet object from the workbook object.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            'Deletes a single row from worksheet object at the specified row index.
            worksheet.InsertRow(1)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/>is negative or greater than 65535.</exception>
            <exception cref="T:System.InvalidOperationException">To prevent possible loss of data. e.g. Inserts row if last row has data or formatting in worksheet.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.InsertRows(System.Int32,System.Int32)">
            <summary>
            Inserts multiple rows into the worksheet.
            </summary>
            <param name="rowIndex">Specifies zero-based row index.</param>
            <param name="rowNumber">Number of rows to be inserted.</param>  
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
             //Creates a workbook object by opening a excel format file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
             //Gets the first worksheet object from the workbook object.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Deletes multiple rows from worksheet object.
             worksheet.InsertRows(1, 2);
             
            [Visual Basic]
            //Creates a workbook object by opening a excel format file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets the first worksheet object from the workbook object.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Deletes multiple rows from worksheet object.
            worksheet.InsertRows(1, 2);
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> or <paramref name="rowNumber"/> is negative or greater than 65535.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> + <paramref name="rowNumber"/> is greater than 65535.</exception>
            <exception cref="T:System.InvalidOperationException">To prevent possible loss of data. e.g. Inserts row if last row has data or formatting in worksheet.</exception>             
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
            <summary>
             Imports an array of value into a worksheet.
            </summary>
            <param name="objArray">Array to import.</param>
            <param name="firstRow">The row zero-based index of the first cell to be imported.</param>
            <param name="firstColumn">The column zero-based index of the first cell to be imported.</param>
            <param name="isVertical">True if array should be imported vertically; False - horizontally.</param>
            <exception cref="T:System.ArgumentNullException">objArray is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row index. -or-
                firstColumn is less than 0 or greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportArray(System.Object[0:,0:],System.Int32,System.Int32)">
            <summary>
            Imports an array of value into a worksheet.
            </summary>
            <param name="arrObject">Array to import.</param>
            <param name="firstRow">The row zero-based index of the first cell to be imported.</param>
            <param name="firstColumn">The column zero-based index of the first cell to be imported.</param>
            <exception cref="T:System.ArgumentNullException">arrObject is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row index. -or-
                firstColumn is less than 0 or greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataTable(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            Imports the data from the specified dataTable.
            </summary>
            <param name="dataTable">The DataTable object to be imported.</param>
            <param name="isFieldNameShown">Whether show fieldName.</param>
            <param name="startCell">The name of start cell to insert the DataTable, such as "A1".</param>
            <exception cref="T:System.ArgumentNullException">dataTable is null or startCell is null.</exception>
            <exception cref="T:System.ArgumentException">startCell is invalid name.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports the data from the specified dataTable.
            </summary>
            <param name="dataTable">The DataTable object to be imported.</param>
            <param name="isFieldNameShown">Whether show fieldName.</param>
            <param name="firstRow">The row number of the first cell to import.</param>
            <param name="firstColumn">The column number of the first cell to import.</param>
            <exception cref="T:System.ArgumentNullException">dataTable is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row index. -or-
                firstColumn is less than 0 or greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataColumn(System.Data.DataColumn,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports data from a DataColumn into worksheet.
            </summary>
            <param name="dataColumn">DataColumn with desired data.</param>
            <param name="isFieldNameShown">True if column name must also be imported.</param>
            <param name="firstRow">Row of the first cell where DataColumn should be imported.</param>
            <param name="firstColumn">Column of the first cell where DataColumn should be imported.</param>
            <exception cref="T:System.ArgumentNullException">dataColumn is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataRow(System.Data.DataRow,System.Int32,System.Int32)">
            <summary>
            Imports data from a DataRow into worksheet.
            </summary>
            <param name="dataRow">DataRow with desired data.</param>
            <param name="firstRow">Row of the first cell where DataRow should be imported.</param>
            <param name="firstColumn">Column of the first cell where DataRow should be imported.</param>
            <exception cref="T:System.ArgumentNullException">dataRow is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports data from a DataView into worksheet.
            </summary>
            <param name="dataView">DataView with desired data.</param>
            <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
            <param name="firstRow">Row of the first cell where DataView should be imported.</param>
            <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
            <returns>Number of imported rows.</returns>
            <exception cref="T:System.ArgumentNullException">dataView is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ImportDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Imports data from a DataView into worksheet.
            </summary>
            <param name="dataView">DataView with desired data.</param>
            <param name="isFieldNameShown">TRUE if column names must also be imported.</param>
            <param name="firstRow">Row of the first cell where DataView should be imported.</param>
            <param name="firstColumn">Column of the first cell where DataView should be imported.</param>
            <param name="totalRows">Number of rows to be imported.</param>
            <param name="totalColumns">Number of columns to be imported.</param>
            <returns>Number of imported rows.</returns>
            <exception cref="T:System.ArgumentNullException">dataView is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">totalRows is less than 0 or greater than max row. -or- 
            totalColumns  is less than 0 or greater than max column.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ExportArray(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the specified cells range to a two-dimension array object.
            </summary>       
            <param name="firstRow">The row number of the first cell to export out.</param>
            <param name="firstColumn">The column number of the first cell to export out.</param>
            <param name="totalRows">Number of rows to be exported.</param>
            <param name="totalColumns">Number of columns to be exported</param>
            <returns>Two-dimension array object.</returns>
            <exception cref="T:System.ArgumentNullException">dataView is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">totalRows is less than 0 or greater than max row. -or- 
            totalColumns  is less than 0 or greater than max column.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="firstRow"/>+<paramref name="totalRows"/> is greater than max row index. -o-
            <paramref name="firstColumn"/>+<paramref name="totalColumns"/> is greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the specified cells range to a DataTable object.
            </summary>
            <param name="firstRow">The row number of the first cell to export out.</param>
            <param name="firstColumn">The column number of the first cell to export out.</param>
            <param name="totalRows">Number of rows to be exported.</param>
            <param name="totalColumns">Number of columns to be exported</param>
            <returns>A DataTable object.</returns>
            <exception cref="T:System.ArgumentNullException">dataView is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstRow is less than 0 or greater than max row. -or- 
            firstColumn  is less than 0 or greater than max column.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">totalRows is less than 0 or greater than max row. -or- 
            totalColumns  is less than 0 or greater than max column.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="firstRow"/>+<paramref name="totalRows"/> is greater than max row index. -o-
            <paramref name="firstColumn"/>+<paramref name="totalColumns"/> is greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.Merge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges a specified range of cells into a single cell.
            </summary>
            <param name="firstRow">First row of this range(zero based).</param>
            <param name="firstColumn">First column of this range(zero based).</param>
            <param name="totalRows">Number of rows.</param>
            <param name="totalColumns">Number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="firstRow"/> or <paramref name="totalRows"/> is less than 0 or greater than max row index. -or-
            <paramref name="firstColumn"/> or <paramref name="totalColumns"/> is less than 0 or greater than max column index.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="firstRow"/>+<paramref name="totalRows"/> is greater than max row index. -or-
            <paramref name="firstColumn"/>+<paramref name="totalColumns"/> is greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.UnMerge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unmerges a specified range of merged cells.
            </summary>
            <param name="firstRow">First row of this range(zero based).</param>
            <param name="firstColumn">First column of this range(zero based).</param>
            <param name="totalRows">Number of rows.</param>
            <param name="totalColumns">Number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="firstRow"/> or <paramref name="totalRows"/> is less than 0 or greater than max row index. -or-
            <paramref name="firstColumn"/> or <paramref name="totalColumns"/> is less than 0 or greater than max column index.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="firstRow"/>+<paramref name="totalRows"/> is greater than max row index. -or-
            <paramref name="firstColumn"/>+<paramref name="totalColumns"/> is greater than max column index.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.ResetAllPageBreaks">
            <summary>
            Reset all of page break.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = worksheets[0];
            
            //Reset all of page break.
            worksheet.ResetAllPageBreaks();
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook =  ExcelxApplication.CreateWorkbook() 
            
            'Gets a worksheet collection in workbook object.
            Dim worksheets As IWorksheetCollection =  workbook.Worksheets
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet =  worksheets(0) 
            
            'Reset all of page break.
            worksheet.ResetAllPageBreaks()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.RemoveSplit">
            <summary>
            Removes splitted window.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by opening a excel format file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets a worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Removes splitted window.
            worksheet.RemoveSplit();
            
            [Visual Basic]
            'Creates a workbook object by opening a excel format file.
            Dim workbook As IWorkbook =  ExcelxApplication.Open("D:\book1.xls") 
            
            'Gets a worksheet object by zero-based index.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            'Removes splitted window.
            worksheet.RemoveSplit()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetRowHeight(System.Int32,System.Double)">
            <summary>
            Sets the height of the specified row.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="height">height of row.In unit of point It should be between 0 and 409.5.</param>
            <remarks>To hide a row, sets row height to zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than max row index.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="height"/> is less than 0 or greater than 409.5.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetRowHeightInch(System.Int32,System.Double)">
            <summary>
            Sets row height in unit of inches.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="height">Number of inches.It should be between 0 and 409.5/72.</param>
            <remarks>To hide a row, sets row height to zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than max row index.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="height"/> is less than 0 or greater than 409.5/72.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetRowHeightPixel(System.Int32,System.Double)">
            <summary>
            Sets row height in unit of pixels.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="height">Number of inches.It should be between 0 and 409.5*72 / 96.</param>
            <remarks>To hide a row, sets row height to zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than max row index.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="height"/> is less than 0 or greater than 409.5*72 / 96.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Sets the width of the specified column.
            </summary>
            <remarks>如果要隐藏指定列,则设置该列的列宽为0。</remarks>
            <remarks>To hide a column, sets column width to zero.</remarks>
            <param name="column">The zero-based column index.</param>
            <param name="width">Width of column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0 or greater than max column index.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> is less than 0 or greater than 255.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetColumnWidthInch(System.Int32,System.Double)">
            <summary>
            Sets column width in unit of inches.
            </summary>
            <param name="column">The zero-based column index.</param>
            <param name="width">width of column in unit of inches.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0 or greater than max column index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.SetColumnWidthPixel(System.Int32,System.Double)">
            <summary>
            Sets column width in unit of pixels.
            </summary>
            <param name="column">The zero-based column index.</param>
            <param name="width">Number of pixels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0 or greater than max column index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.UnFreezePanes">
            <summary>
            Unfreezes panes in the worksheet.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
             
            //Gets a Worksheet object at the specified index.
            IWorksheet worksheet = worksheets[0];
            
            //Unfreezes panes in the worksheet.
            worksheet.UnFreezePanes();
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook =  ExcelxApplication.CreateWorkbook() 
            
            'Gets a worksheet collection in workbook object.
            Dim worksheets As IWorksheetCollection =  workbook.Worksheets 
            
            'Gets a Worksheet object at the specified index.
            Dim worksheet As IWorksheet =  workbook.Worksheets(0) 
            
            'Unfreezes panes in the worksheet.
            worksheet.UnFreezePanes()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroup Rows.
            </summary>
            <param name="firstRow">The first row zero-based index to be ungrouped.</param>
            <param name="lastRow">The last row zero-based index to be ungrouped.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start row index. -or- Invalid end row index.</exception>
            <exception cref="T:System.ArgumentException">start row index greater than end row index.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorksheet.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroup Columns.
            </summary>
            <param name="firstColumn">The first column zero-based index to be ungrouped.</param>
            <param name="lastColumn">The last column zero-based index to be ungrouped.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid start column index. -or- Invalid end column index.</exception>
            <exception cref="T:System.ArgumentException">start column index greater than end column index.</exception>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.ActiveCell">
            <summary>
            Gets or sets the active cell in the worksheet. such as "A1".
            </summary>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Sets the active cell in the worksheet.
            worksheet.ActiveCell = "B1";
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Sets the active cell in the worksheet.
            worksheet.ActiveCell = "B1"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.AutoFilter">
            <summary>
            Represents autofiltering for the specified worksheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Cells">
            <summary>
            Gets a Range object that represents all the cells on the worksheet. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a Range object that represents all the cells on the worksheet. 
            IRange range = worksheet.Cells;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Range object that represents all the cells on the worksheet. 
            Dim range As IRange = worksheet.Cells
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.CheckBoxes">
            <summary>
            Gets a ICheckBoxCollection object collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.TextBoxes">
            <summary>
            Gets a textbox collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Charts">
            <summary>
             Specifies a collection of Acey.ExcelX.Charts.Chart object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Columns">
            <summary>
            Returns a column collection.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = worksheets[0];
             
            //Get a Column object collection of the Worksheet.
            IColumnCollection columns = worksheet.Columns;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Get a Column object collection of the Worksheet.
            Dim columns As IColumnCollection = worksheet.Columns
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Comments">
            <summary>
            Gets a comment collection that represents the comments for the worksheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.ConditionalFormattings">
            <summary>
            Gets a condition formatting collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.DisplayPageBreaks">
            <summary>
            Gets or sets whether page breaks  inserted automatically are visible on the sheet.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Sets page breaks  inserted automatically are visible on the sheet.
            worksheet.DisplayPageBreaks = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Sets page breaks  inserted automatically are visible on the sheet.
            worksheet.DisplayPageBreaks = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.HPageBreaks">
            <summary>
             Gets a reference to the horizontal page break collection for the worksheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a HPageBreak object collection of the Worksheet.
            IHPageBreakCollection hPageBreaks = worksheet.HPageBreaks;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a HPageBreak object collection of the Worksheet.
            Dim hPageBreaks As IHPageBreakCollection = worksheet.HPageBreaks
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Hyperlinks">
            <summary>
            Returns a Hyperlinks collection that represents the hyperlinks for the worksheet. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading the specified excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a Hyperlink object collection of the Worksheet.
            IHyperlinkCollection hyperlinks = worksheet.Hyperlinks; 
            
            [Visual Basic]
            'Creates a workbook object using reading the specified excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a Hyperlink object collection of the Worksheet.
            Dim hyperlinks As IHyperlinkCollection = worksheet.Hyperlinks
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Outline">
            <summary>
            Represents an outline on a worksheet.
            </summary>
            <example>
            This example shows how to set outline of worksheet.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets outline of the Worksheet object.
            IOutline outline = worksheet.Outline;
            
            //Sets whether to apply styles in an outline when an outline is applied.
            outline.AutomaticStyles = true;
            
            //Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryColumn = SummaryColumn.SummaryOnLeft;
            
            //Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryRow = SummaryRow.SummaryAbove;
            
            //Groups rows.
            worksheet.GroupRows(1, 3);
            
            //Groups columns.
            worksheet.GroupColumns(2, 6);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003); 
            
            
             [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets outline of the Worksheet object.
            Dim outline As IOutline = worksheet.Outline
            
            'Sets whether to apply styles in an outline when an outline is applied.
            outline.AutomaticStyles = True
            
            'Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryColumn = SummaryColumn.SummaryOnLeft
            
            'Sets whether summary rows appear below an outline's detail rows.
            outline.SummaryRow = SummaryRow.SummaryAbove
            
            'Groups rows.
            worksheet.GroupRows(1, 3)
            
            'Groups columns.
            worksheet.GroupColumns(2, 6)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Pictures">
            <summary>
            Gets a picture collection that represents the pictures for the worksheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Protected">
            <summary>
            Gets whether the worksheet is protected.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Rows">
            <summary>
            Returns a row collection.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Row object collection of the Worksheet.
            IRowCollection rows = worksheet.Rows;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Row object collection of the Worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Selection">
            <summary>
            Gets a collection of cell objects.
            </summary>
            <remarks>Selects multiple discontiguous or contiguous cell objects. However cell must be from the same worksheet.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.StandardHeight">
            <summary>
            Gets the standard (default) height of all the rows in the worksheet in points.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.StandardWidth">
            <summary>
            Gets or sets the standard (default) width of all the columns in the worksheet in points.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.TransitionExpEval">
            <summary>
            Gets or sets whether the sheet uses transition formula evaluation.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.TransitionFormEntry">
            <summary>
            Gets or sets whether the sheet uses transition formula entry.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.UsedRange">
            <summary>
            Gets the used range of the Worksheet.
            </summary>
            This example shows how you might use this property:
            <example>
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a Range object that represents the used range on the specified worksheet. 
            IRange usedRange = worksheet.UsedRange;
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Range object that represents the used range on the specified worksheet. 
            Dim usedRange As IRange = worksheet.UsedRange
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.Validations">
            <summary>
            Gets  a data validation collection of the worksheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.VPageBreaks">
            <summary>
            Gets a reference to the vertical page break collection in a worksheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object using reading the specified excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a vertical page break collection in a worksheet.
             IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
             
            [Visual Basic]
            'Creates a workbook object using reading the specified excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a vertical page break collection in a worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheet.WindowInfo">
            <summary>
             Returns IWorksheetWindowInfo object which represents worksheet specific window options.
            </summary>   
            <example>
             This example shows how you might use this property:
             <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object collection in the Workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by using worksheet name.
            IWorksheet worksheet = worksheets["Sheet1"];
            
            //Gets IWorksheetWindowInfo object of the Worksheet.
            IWorksheetWindowInfo worksheetWindowInfo = worksheet.WindowInfo;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by using worksheet name.
            Dim worksheet As IWorksheet = worksheets("Sheet1")
            
            'Gets IWorksheetWindowInfo object of the Worksheet.
            Dim worksheetWindowInfo As IWorksheetWindowInfo = worksheet.WindowInfo
            </code>
            </example>     
        </member>
        <member name="T:Acey.ExcelX.ICell">
            <summary>
            Represents a cell.
            </summary>
            <example>
            how to get a cell from worksheet.
            <code>
            [C#] 
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Sets a formula of the cell.
            cell.Formula = "=SUM(B1:B2)";
            
            //Gets a cell using zero-based row and column index.
            cell = worksheet.Cells[1, 0];
            
            //Sets the cell format of the cell.
            cell.CellFormat.Font.Name = "Arial";
             
            //Gets a cell using cell name.
            cell = worksheet.Cells["A1"];
            
            //Sets a interger value to the cell.
            cell.Value = 12;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Sets a formula of the cell.
            cell.Formula = "=SUM(B1:B2)"
            
            'Gets a cell using zero-based row and column index.
            cell = worksheet.Cells(1, 0) 
            
            'Sets the cell format of the cell.
            cell.CellFormat.Font.Name = "Arial";
            
            'Gets a cell using cell name.
            cell = worksheet.Cells("A3")
            
            'Sets a interger value to the cell.
            cell.Value = 12
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICell.AddComment">
            <summary>
            Adds a comment to the cell.
            </summary> 
            <returns>A Comment object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ICell.AddComment(System.String)">
            <summary>
            Adds a comment to the cell.
            </summary> 
            <param name="text">The text of comment.</param>
            <returns>A Comment object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ICell.ApplyStyle(Acey.ExcelX.IStyle)">
            <summary>  Applies formattings for a cell.
            </summary>
            <param name="style">applies formatting.</param>
            <remarks>Once the cell applies specify style, when the style is changed, 
             The cell format is changed following the style.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection of the workbook.
            IStyleCollection styles = workbook.Styles;
            
            //Gets a style object using style name.
            IStyle style = styles["Comma"];
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Applies the specified style to the cell.
            cell.ApplyStyle(style);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection of the workbook.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets a style object using style name.
            Dim style As IStyle = styles("Comma")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Applies the specified style to the cell.
            cell.ApplyStyle(style)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/>is null for reference types.</exception>
        </member>
        <member name="M:Acey.ExcelX.ICell.Copy(Acey.ExcelX.ICell)">
            <summary>  Copies data and format from the Specified cell.
            </summary>
            <param name="source">Specified source cell.</param>
            <remarks>Copies data、formual and format.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading the specified excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a source cell using cell name.
            ICell cellSource = worksheet.Cells["A1"];
            
            //Gets a destination cell using cell name.
            ICell cellDest = worksheet.Cells["A2"];
            
            //Copies content of the source cell to the destination cell.
            cellDest.Copy(cellSource);
            
            [Visual Basic] 
            'Creates a workbook using reading the specified excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a source cell using cell name.
            Dim cellSource As ICell = worksheet.Cells("A1")
            
            'Gets a destination cell using cell name.
            Dim cellDest As ICell = worksheet.Cells("A2")
            
            'Copies content of the source cell to the destination cell.
            cellDest.Copy(cellSource)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>        
        </member>
        <member name="M:Acey.ExcelX.ICell.CopyFormat(Acey.ExcelX.ICell)">
            <summary>  Only copy format from the Specified cell.
            </summary>
            <param name="source">Specified source cell.</param>
            <remarks>When source format is changed, the cell format isn't changed.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading the specified excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a source cell using cell name.
            ICell cellSource = worksheet.Cells["A1"];
            
            //Gets a destination cell using cell name.
            ICell cellDest = worksheet.Cells["A2"];
            
            //Copies only format of the source cell to the destination cell.
            cellDest.CopyFormat(cellSource);
            
            [Visual Basic] 
            'Creates a workbook using reading the specified excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a source cell using cell name.
            Dim cellSource As ICell = worksheet.Cells("A1")
            
            'Gets a destination cell using cell name.
            Dim cellDest As ICell = worksheet.Cells("A2")
            
            'Copies only format of the source cell to the destination cell.
            cellDest.CopyFormat(cellSource)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>is null for reference types.</exception>
        </member>
        <member name="M:Acey.ExcelX.ICell.GetStyle">
            <summary>  Gets the style of the cell.
            </summary>
            <returns>The style of the cell.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook using reading the specified excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets style of the cell.
            IStyle style = cell.GetStyle();
            
            [Visual Basic] 
            'Creates a workbook using reading the specified excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets style of the cell.
            Dim style As IStyle = cell.GetStyle()
            </code>      
            </example>
        </member>
        <member name="M:Acey.ExcelX.ICell.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>  Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
        </member>
        <member name="M:Acey.ExcelX.ICell.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
            <param name="lineColor">Line color.</param>
        </member>
        <member name="P:Acey.ExcelX.ICell.CellFormat">
            <summary>
            Gets format of the cell. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets format of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets format of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Column">
            <summary>
            Returns the zero based column index.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets column index of the cell.
            int columnIndex = cell.Column;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets column index of the cell.
            Dim columnIndex As Integer = cell.Column
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Formula">
             <summary>
             Gets or sets a formula of the cell.
             </summary>
             <remarks>       
             <p> A formula string always begins with an equal sign (=). </p>
             <p>such as  "=SUM(A1)", "=SUM(A$1)", "=SUM($A1)", "=SUM($A$1)", "=SUM(A1,B1)", "=SUM(A1:B1)", "=SUM(Sheet1!A1:B2)", "=SUM({1,2}).</p>
             
            <p> The following operator are supported:</p>
            <p>  a unaray-operator: +,-,% </p>
             <p> a binary-operator:  +, -, *, /, :, &gt;,  &gt;=, ^, etc.</p>
             <p>The following formula are supported: </p>
             
             <p>[A] ABS, ACOS, ADDRESS, AND, ASIN, ATAN, AVEDEV, AVERAGE, AVERAGEA</p>
             
            <p> [C] CEILING, CHOOSE, COLUMN, COLUMNS, COS, COSH, COUNT, COUNTA, COUNTBLANK</p>
             
             <p>[D] DAY</p>
             
             <p>[F] FALSE</p>
             
             <p>[H] HOUR </p>
             
             <p>[I] IF, ISBLANK, ISERR, ISERROR,  ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISREF, ISTEXT </p> 
             
             <p>[M] MAX, MAXA, MEDIAN, MIN, MINA, MINUTE, MONTH </p>
             
             <p>[N] NA, NOT, NOW </p>
             
             <p>[O] OR</p>
             
             <p>[P] PI, POWER </p>
             
             <p>[R] ROUND, ROW, ROWS</p>
             
             <p>[S] SECOND, SIGN, SIN, SINH, SQRT, SUM, SUMIF, SUMSQ, SUMPRODUCT</p>
             
             <p>[T] TAN, TANH, TIME, TODAY, TRUE, TYPE</p>
             
             <p>[Y] YEAR</p>
             </remarks>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a cell object using cell name.
             ICell cell = worksheet.Cells["A1"];
             //Sets a formual to the cell.
             cell.Formula = "=SUM(1,2)";
             
             //Gets a cell object using cell name.
             cell = worksheet.Cells["A2"];
             //Sets a formual to the cell.
             cell.Formula = "=SUM({10,20,30})";
             
             //Gets a cell object using cell name.
             cell = worksheet.Cells["A3"];
             //Sets a formual to the cell.
             cell.Formula = "=SUM(A1,A2,A3)";
             
             //Gets a cell object using cell name.
             cell = worksheet.Cells["A4"];
             //Sets a formual to the cell.
             cell.Formula = "=SUM(A1:A3)"; 
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             [Visual Basic] 
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a cell object using cell name.
             Dim cell As ICell = worksheet.Cells("A1")
             
             'Sets a formual to the cell.
             cell.Formula = "=SUM(1,2)"
             
             'Gets a cell object using cell name.
             cell = worksheet.Cells("A2")
            
             'Sets a formual to the cell.
             cell.Formula = "=SUM({10,20,30})"
             
             'Gets a cell object using cell name.
             cell = worksheet.Cells("A3")
             
             'Sets a formual to the cell.
             cell.Formula = "=SUM(A1,A2,A3)"
             
             'Gets a cell object using cell name.
             cell = worksheet.Cells("A4")
             
             'Sets a formual to the cell.
             cell.Formula = "=SUM(A1:A3)"
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
             <exception cref="T:Acey.ExcelX.FormulaInvalidFormatException"> If parameters less than speicify function or parameters contains invalid value.</exception>       
        </member>
        <member name="P:Acey.ExcelX.ICell.FormulaR1C1">
            <summary>
            Gets or sets a R1C1 formula of the Cell object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets the row object that specified row and column index.
            ICell cell = worksheet.Cells[0, 0];
            
            //Sets a R1C1 formula of the Cell object.
            cell.FormulaR1C1 = "=SUM(R1C2:R2C2)";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells(0, 0)
            
            'Sets a R1C1 formula of the Cell object.
            cell.FormulaR1C1 = "=SUM(R1C2:R2C2)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.FullName">
            <summary>
            Gets the full name of the cell that include sheetName, as Sheet1!A1.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICell.HasFormula">
            <summary>
            Represents if the specified cell contains formula.
            </summary>   
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Returns if the specified cell contains formula.
            bool hasFormula = cell.HasFormula;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Returns if the specified cell contains formula.
            Dim hasFormula As Boolean = cell.HasFormula
            </code>      
            </example>    
        </member>
        <member name="P:Acey.ExcelX.ICell.IsRichText">
            <summary>
            Indicates whether the cell value is a rich text.
            </summary> 
            <example>
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Returns whether the cell value is a rich text.
            bool isRichText = cell.IsRichText;
            
            [Visual Basic] 
             'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Returns whether the cell value is a rich text.
            Dim isRichText As Boolean = cell.IsRichText
            </code>
            <seealso cref="T:Acey.ExcelX.ICharacters"/>How to set rich text to cell.
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Name">
             <summary>
            Gets the name of the cell.
             </summary>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a cell object using zero-based row and column index.
             ICell cell = worksheet.Cells[0, 0];
             
             //Gets name of the cell.
             string name = cell.Name;
             
             [Visual Basic] 
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a cell object using zero-based row and column index.
             Dim cell As ICell = worksheet.Cells(0, 0)
             
             'Gets name of the cell.
             Dim name As String = cell.Name
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Characters">
            <summary>
            Gets the characters of cell text.
            </summary>        
            <remarks>Return null if cell.ValueType isn't ValueType.Text.</remarks>
        </member>
        <member name="P:Acey.ExcelX.ICell.Row">
            <summary>
            Returns the zero based row index.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a row index of the cell.
            int rowIndex = cell.Row;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a row index of the cell.
            Dim rowIndex As Integer = cell.Row
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Text">
            <summary>
            Gets or Sets display text in this cell.
            Note:if the setted text is number,formula or datetime format string,the text will be auto converted to number,formula or datetime .
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets text of the cell.
            string text = cell.Text;
            //Sets string to the cell
            cell.Text ="Hello World";
            //Sets number to the cell
            cell.Text ="1.23";
            //Sets DateTime to the cell
            cell.Text ="2011-01-01";
            //Sets formula to the cell
            cell.Text ="=SUM(A2:A3)";
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets text of the cell.
            Dim text As String = cell.Text
            //Sets string to the cell
            cell.Text ="Hello World";
            //Sets number to the cell
            cell.Text ="1.23";
            //Sets DateTime to the cell
            cell.Text ="2011-01-01";
            //Sets formula to the cell
            cell.Text ="=SUM(A2:A3)";
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Value">
            <summary>
            Gets or Sets the value contained in this cell.
            Note:if you set a special format text(such as Double ,Bool,DateTime,ValueError,Formula etc),
            the text will be not auto converted to Double ,Bool ,DateTime,ValueError,Formaula Value. 
            </summary>
            <remarks>If the cell has formula, then return calculated value. </remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            //Sets an integer value to cell.
            cell.Value = 10;
            
            //Gets a cell object using cell name.
            cell = worksheet.Cells["A2"];
            //Sets a double value to cell.
            cell.Value = 2.66;
            
            //Gets a cell object using cell name.
            cell = worksheet.Cells["A3"];
            //Sets a string value to cell.
            cell.Value = "abc";        
            
            //Sets a string value to cell.
            cell.Value = "=1+2";
            
            //Gets a cell object using cell name.
            cell = worksheet.Cells["A4"];
            //Sets a boolean value to cell.
            cell.Value = true;
            
            //Gets a cell object using cell name.
            cell = worksheet.Cells["A5"];
            //Sets a datetime value to cell.
            cell.Value = new DateTime(2011, 1, 1);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Sets an integer value to cell.
            cell.Value = 10
            
            'Gets a cell object using cell name.
            cell = worksheet.Cells("A2")
            
            'Sets a double value to cell.
            cell.Value = 2.66
            
            'Gets a cell object using cell name.
            cell = worksheet.Cells("A3") 
            
            'Sets a string value to cell.
            cell.Value = "abc"
            
            //Sets a string value to cell.
            cell.Value = "=1+2";
            
            'Gets a cell object using cell name.
            cell = worksheet.Cells("A4") 
            
            'Sets a boolean value to cell.
            cell.Value = True
            
            'Gets a cell object using cell name.
            ell = worksheet.Cells("A5") 
            
            'Sets a datetime value to cell.
            cell.Value = New DateTime(2011, 1, 1)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.ValueType">
            <summary>
            Gets the type of cell value.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets value type of the cell.
            Acey.ExcelX.ValueType valueType = cell.ValueType;
            if (valueType == Acey.ExcelX.ValueType.Text)
            {
              // code here
            }
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets value type of the cell.
            Dim valueType As Acey.ExcelX.ValueType = cell.ValueType
            if (valueType == Acey.ExcelX.ValueType.Text)
            {
              // code here
            }
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICell.Worksheet">
            <summary>
             Returns the parent IWorkSheet of this cell.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets the WorkSheet of this cell.
            IWorksheet sheet = cell.Worksheet;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets the WorkSheet of this cell.
            Dim sheet As IWorksheet = cell.Worksheet
            </code>
            </example>
            <seealso cref="T:Acey.ExcelX.IWorksheet"/>
        </member>
        <member name="T:Acey.ExcelX.WindowView">
            <summary>
            Specifies whether a worksheet is viewed normally or in page break preview mode.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.WindowView.NormalView">
            <summary>
            Specifies a normal view.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.WindowView.PageBreakPreview">
            <summary>
            Specifies page break preview mode.
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.WindowView.PageLayoutView">
            <summary>
            Specifies Page layout view. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.HorizAlign">
            <summary>
            Specifies the horizontal alignment.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.General">
            <summary>
            Alignment not specified
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Center">
            <summary>
            Centered alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Fill">
            <summary>
            Fill alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.CenterAcrossSelection">
            <summary>
            Center-across-selection alignment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.HorizAlign.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.BorderMembers">
            <summary>
            Specifies members of border.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.None">
            <summary>
            No Borders
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Left">
            <summary>
            Left Border
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Top">
            <summary>
            Top Border
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Right">
            <summary>
            Right Border
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Bottom">
            <summary>
            Bottom Border
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.DiagonalDown">
            <summary>
            Diagonal Down Border.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.DiagonalUp">
            <summary>
            Diagonal Up Border.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Outside">
            <summary>
            Outside borders, contains Left Border ,Top Border ,Right Border and Bottom Border.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.Inside">
            <summary>
            Inside Borders
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BorderMembers.All">
            <summary>
            All of borders(Outside and Inside).
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ICommentCollection">
            <summary>
             Represents a comment collection.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Adds a Comment object to the Comment object collection.
            IComment comment = comments.Add("A2");
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
             //Saves as the specified file format.
            workbook.SaveAs(@"D:\Comment.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Adds a Comment object to the Comment object collection.
            Dim comment As IComment = comments.Add("A2")
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Comment.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.Add(Acey.ExcelX.ICell)">
            <summary>
            Adds a comment to the specified cell.
            </summary>
            <param name="cell">The specified cell object.</param>
            <returns>A Comment object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cell"/>is null.</exception>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Cell object by cell name.
            ICell cell = worksheet.Cells["A2"];
             
            //Adds a Comment object to the Comment object collection.
            IComment comment = comments.Add(cell);
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
             //Saves as the specified file format.
            workbook.SaveAs(@"D:\Comment.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Cell object by cell name.
            Dim cell As ICell = worksheet.Cells("A2")
            
            'Adds a Comment object to the Comment object collection.
            Dim comment As IComment = comments.Add(cell)
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Comment.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"> cell is null</exception>        
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.Add(System.String)">
            <summary>
            Adds a comment to the cell.
            </summary>
            <param name="cellName">cell name.</param>
            <returns>A Comment object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cellName"/>is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="cellName"/>is invalid.</exception>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Adds a Comment object to the Comment object collection.
            IComment comment = comments.Add("A2");
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
             //Saves as the specified file format.
            workbook.SaveAs(@"D:\Comment.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Adds a Comment object to the Comment object collection.
            Dim comment As IComment = comments.Add("A2")
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Comment.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"> cellName is null.</exception>
            <exception cref="T:System.ArgumentException"> cell name is invalid.</exception>    
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.Add(System.Int32,System.Int32)">
            <summary>
            Adds a comment to the cell.
            </summary>
            <param name="row">the zero-based row index of cell.</param>
            <param name="column">the zero-based column index of cell.</param>
            <returns>A Comment object.</returns> 
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Adds a Comment object to the Comment object collection.
            IComment comment = comments.Add(2, 2);
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
             //Saves as the specified file format.
            workbook.SaveAs(@"D:\Comment.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Adds a Comment object to the Comment object collection.
            Dim comment As IComment = comments.Add(2, 2)
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Comment.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"> row is less than 0 or greater than max row.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> column is less than 0 or greater than max column.</exception>    
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.Clear">
            <summary>
            Clears all of comment.
            </summary>    
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Clears all of comment.
            comments.Clear();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Clears all of comment.
            comments.Clear()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>    
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the comment of the specific cell.
            </summary>
            <param name="row">The zero-based row index of the specific cell.</param>
            <param name="column">The zero-based row index of the specific cell.</param>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Removes the comment of the specific cell.
            comments.RemoveAt(1, 1);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Removes the comment of the specific cell.
            comments.RemoveAt(1, 1)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.ICommentCollection.RemoveAt(System.String)">
            <summary>
            Removes the comment of the specific cell.
            </summary>
            <param name="cellName">The name of cell which contains a comment.</param>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Removes the comment of the specific cell.
            comments.RemoveAt("D8");
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Removes the comment of the specific cell.
            comments.RemoveAt("D8")
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentCollection.Count">
            <summary>
            Gets the number of the comment collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentCollection.Sheet">
            <summary>
            Gets the parent ISheet of the instance.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentCollection.Item(System.Int32)">
            <summary>
            Gets a comment object using zero-based comment index.
            </summary>
            <param name="index">Zero-based comnent index.</param>
            <returns>A comment object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index must be greater than 0 or less than ICommentCollection.Count.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by using zero-based index.
            IComment comment = comments[0];
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by using zero-based index.
            Dim comment As IComment = comments(0)
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentCollection.Item(System.String)">
            <summary>
            Gets a comnent object using the name of the cell.
            </summary>
            <param name="cellName">The specified name of the cell.</param>
            <returns>A comment object.</returns>
            <remarks>Returns null if is not be found in the Comment object collection.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by using zero-based index.
            IComment comment = comments["D8"];
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by using zero-based index.
            Dim comment As IComment = comments("D8")
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets a comment object using the cell's row and column index.
            </summary>
            <param name="row">The zero-based row index.</param>
            <param name="column">The zero-based column index.</param>
            <returns>A comment object.</returns>
            <remarks>Returns null if is not be found in the Comment object collection.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by using zero-based index.
            IComment comment = comments[2, 3];
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by using zero-based index.
            Dim comment As IComment = comments(2, 3)
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IDataLabels">
            <summary>
            DataLabels object represents datalabels for the specified series.
            Each DataLabel object represents a data label for a point or trendline.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment for the specified object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.NumberFormat">
            <summary>
            Returns or sets the format code for the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.NumberFormatLinked">
            <summary>
            True if the number format is linked to the cells.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Orientation">
            <summary>
            Gets or sets the text rotation. Must be between -90 and 90 degrees.
            </summary>
            <remarks>The number must be between -90 and 90.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> value is less than -90 or greater than 90.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Position">
            <summary>
            Gets or sets the data label positioning of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Separator">
            <summary>
            Gets or sets the separator type of DataLables.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Shadow">
            <summary>
            True if the object has a shadow.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowBubbleSize">
            <summary>
            Indicates whether bubble size is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowCategoryName">
            <summary>
            Indicates whether category name is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowLegendKey">
            <summary>
            Indicates whether legend key is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowPercentage">
            <summary>
            Indicates whether percentage is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowSeriesName">
            <summary>
            Indicates whether series name is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.ShowValue">
            <summary>
            Indicates whether value is in data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.TextDirection">
            <summary>
            Gets or sets the reading order of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.IsDeleted">
            <summary>
            Indicates whether this data lables is deleted.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.BackgroundMode">
            <summary>
            Gets or sets the display mode of the background of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Font">
            <summary>
            Gets a font object of the IChartFont object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Border">
            <summary>
             Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Area">
            <summary>
             Returns a Acey.ExcelX.Drawing.IArea object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Width">
            <summary>
            Gets or sets the width of the DataLabels object.
            </summary>
            <remarks>Width is in units of 1/4000 of the chart area.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Height">
            <summary>
            Gets or sets the Height of the DataLabels object.
            </summary>
            <remarks>Height is in units of 1/4000 of the chart area.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.X">
            <summary>
            Gets or sets the x coordinate of the upper left corne in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabels.Y">
            <summary>
            Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.BubbleSizeRepresents">
            <summary>
            Specifies how the default size of the data points represents the value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.BubbleSizeRepresents.SizeIsArea">
            <summary>
            The area of the data point represents the value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.BubbleSizeRepresents.SizeIsWidth">
            <summary>
            The width of the data point represents the value.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IBorder">
            <summary>
            Represents the color and style of a border.  
            </summary>
            <example>
            How to get left border, right border, top border and bottom border etc from Borders object.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range object by using valid reference.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a style of the range object.
            IStyle style = range.GetStyle();
            
            //Gets a border collection of the style. 
            IBorders borders = style.Borders;
            
            //Gets left border from the border collection.
            IBorder leftBorder = borders.LeftBorder;
            
            //Sets the color of left border.
            leftBorder.Color = System.Drawing.Color.Blue;
            
            //Sets the line style of left border.
            leftBorder.LineStyle = LineStyle.Dashed;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range object by using valid reference.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a style of the range object.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a border collection of the style. 
            Dim borders As IBorders = style.Borders
            
            'Gets left border from the border collection.
            Dim leftBorder As IBorder = borders.LeftBorder
            
            'Sets the color to left border.
            leftBorder.Color = System.Drawing.Color.Blue
            
            'Sets the line style of left border.
            leftBorder.LineStyle = LineStyle.Dashed
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorder.Color">
            <summary>
            Gets or sets the color of this border.
            </summary>
            <example>
             This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Create a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a border collection of the style.
            IBorders borders = style.Borders;
            
            //Gets left border.
            IBorder border = borders.LeftBorder;
            
            //Sets color of the left border.
            border.Color = System.Drawing.Color.Red;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Create a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a border collection of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets left border.
            Dim border As IBorder = borders.LeftBorder
            
            'Sets color of the left border.
            border.Color = System.Drawing.Color.Red
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IBorder.LineStyle">
            <summary>
            Gets or sets the LineStyle of this border.
            </summary>
            <remarks>Default is none.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Create a range object using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            //Gets a border collection of the style.
            IBorders borders = style.Borders;
            
             //Gets left border.
            IBorder border = borders.LeftBorder;
            
            //Sets the LineStyle of this border.
            border.LineStyle = LineStyle.Double;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Create a range object using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            
            'Gets a border collection of the style.
            Dim borders As IBorders = style.Borders
            
            'Gets left border.
            Dim border As IBorder = borders.LeftBorder
            
            'Sets the LineStyle of this border.
            border.LineStyle = LineStyle.Double
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IFillFormat">
             <summary>
            Specifies fill formatting for a shape.
             </summary>
             <example>
              How to get fill formatting for a shape.
             <code>
             [C#]
             //Creates a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
             //Gets a Worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a Shape object using zero-based shape index.
             IShape shape = worksheet.Shapes[0];
             
             //Gets the fill format of the Shape object.
             IFillFormat fillFormat = shape.Fill;
             
             //Sets gradient texture.
             fillFormat.Texture = MsoTextureType.BlueTissuePaper;
             
              //Saves as the specified file format.
             workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
             
              [Visual Basic]
             'Creates a workbook by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a shape object using zero-based shape index.
             Dim shape As IShape = worksheet.Shapes(0)
              
             'Gets the fill format of the Shape object.
             Dim fillFormat As IFillFormat = shape.Fill
             
             'Sets gradient texture.
             fillFormat.Texture = MsoTextureType.BlueTissuePaper
             
             'Saves as the specified file format.
             workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.PresetGradient(Acey.ExcelX.Drawing.GradientPresetType)">
            <summary>
            Sets the specified fill to a preset gradient.
            </summary>
            <param name="presetType">Represents preset gradient type.</param>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.PresetGradient(Acey.ExcelX.Drawing.GradientPresetType,Acey.ExcelX.Drawing.GradientStyle)">
            <summary>
            Sets the specified fill to a preset gradient.
            </summary>
            <param name="presetType">Represents preset gradient type.</param>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII, GradientStyle.FromCorner);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII, GradientStyle.FromCorner)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.PresetGradient(Acey.ExcelX.Drawing.GradientPresetType,Acey.ExcelX.Drawing.GradientStyle,System.Int32)">
            <summary>
            Sets the specified fill to a preset gradient.
            </summary>
            <param name="presetType">Represents preset gradient type.</param>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. 
            If Style is msoGradientFromCenter, the Variant argument can only be 1 or 2.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If Style is msoGradientFromCenter, the Variant argument isn't equal to 1 or 2. other case the Variant argument is less than 1 or greater than 4.</exception>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII, GradientStyle.FromCorner, 4);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a preset gradient.
            fillFormat.PresetGradient(GradientPresetType.RainbowII, GradientStyle.FromCorner, 4)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.OneColorGradient">
            <summary>
            Sets the specified fill to a one-color gradient.
            </summary>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.OneColorGradient(Acey.ExcelX.Drawing.GradientStyle)">
            <summary>
            Sets the specified fill to a one-color gradient.
            </summary>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient(GradientStyle.FromCorner);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient(GradientStyle.FromCorner)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.OneColorGradient(Acey.ExcelX.Drawing.GradientStyle,System.Int32)">
            <summary>
            Sets the specified fill to a one-color gradient.
            </summary>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. 
            If Style is msoGradientFromCenter, the Variant argument can only be 1 or 2.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If Style is msoGradientFromCenter, the Variant argument isn't equal to 1 or 2. other case the Variant argument is less than 1 or greater than 4.</exception>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient(GradientStyle.FromCorner, 3);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.OneColorGradient(GradientStyle.FromCorner, 3)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.OneColorGradient(Acey.ExcelX.Drawing.GradientStyle,System.Int32,System.Double)">
            <summary>
            Sets the specified fill to a one-color gradient.
            </summary>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. 
            If Style is msoGradientFromCenter, the Variant argument can only be 1 or 2.</param>
            <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If Style is msoGradientFromCenter, the Variant argument isn't equal to 1 or 2. other case the Variant argument is less than 1 or greater than 4.</exception>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.TwoColorGradient">
            <summary>
            Sets the specified fill to a two-color gradient.
            </summary>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.TwoColorGradient(Acey.ExcelX.Drawing.GradientStyle)">
            <summary>
             Sets the specified fill to a two-color gradient.
            </summary>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient(GradientStyle.FromCorner);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient(GradientStyle.FromCorner)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IFillFormat.TwoColorGradient(Acey.ExcelX.Drawing.GradientStyle,System.Int32)">
            <summary>
             Sets the specified fill to a two-color gradient.
            </summary>
            <param name="gradientStyle">Represents gradient style, for preset gradient.</param>
            <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. 
            If Style is msoGradientFromCenter, the Variant argument can only be 1 or 2.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If Style is msoGradientFromCenter, the Variant argument isn't equal to 1 or 2. other case the Variant argument is less than 1 or greater than 4.</exception>
            <example>
             This example shows how you might use this method:
             <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object by using zero-based index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets fill format of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient(GradientStyle.FromCorner, 2);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.FillFormat
            
            'Sets the specified fill to a one-color gradient.
            fillFormat.TwoColorGradient(GradientStyle.FromCorner, 2)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.BackColor">
            <summary>
            Represents background color.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.ForeColor">
            <summary>
            Represents foreground color.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.Pattern">
            <summary>
            Represents gradient pattern.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.Texture">
            <summary>
            Represents gradient texture.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.Transparency">
            <summary>
            Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0.0 or greater than 1.0.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.Type">
            <summary>
            Gets or sets the type of fill to display with the shape or the background of the slide.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.PresetGradientType">
            <summary>
            Represents preset gradient type.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.GradientColorType">
            <summary>
            Represents gradient color type.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.GradientStyle">
            <summary>
            Represents gradient shading style.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.GradientVariant">
            <summary>
            Represents current shading variant.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.GradientDegree">
            <summary>
            Returns the gradient degree of the specified one-color shaded fill as a floating-point value from 0.0 (dark) through 1.0 (light).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0.0 or greater than 1.0.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IFillFormat.Visible">
            <summary>
            Represents if fill style visible.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
            
            //Gets a Worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets a FillFormat of the Shape object.
            IFillFormat fillFormat = shape.Fill;
            
            //Sets the fill is hide.
            fillFormat.Visible = false;
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets the fill format of the Shape object.
            Dim fillFormat As IFillFormat = shape.Fill
            
            'Sets the fill is hide.
            fillFormat.Visible = false
            </code>  
            </example>
        </member>
        <member name="T:Acey.ExcelX.BuiltInStyle">
            <summary> 
            Specifies all of built-in style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Normal">
            <summary> 
            Normal
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel1">
            <summary> 
            Row outline level 1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel2">
            <summary> 
            Row outline level 2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel3">
            <summary>
            Row outline level 3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel4">
            <summary>
            Row outline level 4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel5">
            <summary>
            Row outline level 5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel6">
            <summary>
            Row outline level 6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.RowLevel7">
            <summary> 
            Row outline level 7d
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel1">
            <summary> 
            Column outline level 1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel2">
            <summary> 
            Column outline level 2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel3">
            <summary>
            Column outline level 3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel4">
            <summary> 
            Column outline level 4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel5">
            <summary> 
            Column outline level 5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel6">
            <summary> 
            Column outline level 6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ColumnLevel7">
            <summary> 
            Column outline level 7d
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent1">
            <summary> 
            20% - Accent1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent2">
            <summary>
            20% - Accent2
            </summary>d
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent3">
            <summary> 
            20% - Accent3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent4">
            <summary> 
            20% - Accent4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent5">
            <summary> 
            20% - Accent5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.TwentyPercentAccent6">
            <summary> 
            20% - Accent6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent1">
            <summary> 
            40% - Accent1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent2">
            <summary> 
            40% - Accent2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent3">
            <summary> 
            40% - Accent3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent4">
            <summary> 
            40% - Accent4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent5">
            <summary> 
            40% - Accent5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.FortyPercentAccent6">
            <summary> 
            40% - Accent6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent1">
            <summary> 
            60% - Accent1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent2">
            <summary> 
            60% - Accent2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent3">
            <summary> 
            60% - Accent3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent4">
            <summary> 
            60% - Accent4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent5">
            <summary> 
            60% - Accent5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.SixtyPercentAccent6">
            <summary> 
            60% - Accent6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent1">
            <summary> 
            Accent1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent2">
            <summary> 
            Accent2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent3">
            <summary>
            Accent3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent4">
            <summary> 
            Accent4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent5">
            <summary> 
            Accent5
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Accent6">
            <summary> 
            Accent6
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Bad">
            <summary> 
            Bad
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Calculation">
            <summary>
            Calculation
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.CheckCell">
            <summary> 
            Check Cell
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Comma">
            <summary> 
            Comma
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Comma0">
            <summary> 
            Comma [0]
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Currency">
            <summary> 
            Currency
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Currency0">
            <summary> 
            Currency [0]
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.ExplanatoryText">
            <summary> 
            Explanatory Text
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Good">
            <summary> 
            Good
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Heading1">
            <summary> 
            Heading 1
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Heading2">
            <summary> 
            Heading 2
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Heading3">
            <summary>
            Heading 3
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Heading4">
            <summary>
            Heading 4
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Input">
            <summary> 
            Input
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.LinkedCell">
            <summary> 
            Linked Cell
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Neutral">
            <summary> 
            Neutral
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Note">
            <summary> 
            Note
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Output">
            <summary> 
            Output
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Percent">
            <summary> 
            Percent
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Title">
            <summary> 
            Title
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Total">
            <summary> 
            Total
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.WarningText">
            <summary> 
            Warning Text
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.Hyperlink">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="F:Acey.ExcelX.BuiltInStyle.UserStyle">
            <summary>
            Custom Style.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ITextFrame">
            <summary>
            Represents the text frame in a Shape object. Contains the text in the text frame as well as the 
            properties and methods that control the alignment and anchoring of the text frame.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.AutoMargins">
            <summary>
            Gets or sets whether the containing shape use a set of default internal margins for text on shapes.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.AutoSize">
            <summary>
            Indicates if size of comment is adjusted automatically according to its content.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.Characters">
            <summary>
            Gets the characters of object.
            </summary>         
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.Font">
            <summary>
            Gets the font of this instance.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.HorizontalAlignment">
            <summary>
            Gets and Sets the text horizontal alignment 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.MarginBottom">
            <summary>
            Gets or sets the size of the margin to the bottom of the text, in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.MarginLeft">
            <summary>
            Gets or sets the size of the margin to the left of the text, in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.MarginRight">
            <summary>
            Gets or sets the size of the margin to the right of the text, in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.MarginTop">
            <summary>
            Gets or sets the size of the margin to the top of the text, in unit of centimeters.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.Orientation">
            <summary>
            Gets or sets the text orientation.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.Text">
            <summary>
            Gets and Sets the text of this instance.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.TextDirection">
            <summary>
            Gets or sets the direction of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextFrame.VerticalAlignment">
            <summary>
            Gets and Sets the text vertical alignment.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ICommentShape">
            <summary>
            Represents the shape of the comment.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by the specified cell.
            IComment comment = comments[2, 3];
            
            //Gets a CommentShape object of the Comment object.
            ICommentShape shape = comments[0].CommentShape;
             
            //Sets alternative text of the CommentShape object.
            shape.AlternativeText = "Acey Office";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by the specified cell.
            Dim comment As IComment = comments(2, 3)
            
            'Gets a CommentShape object of the Comment object.
            Dim shape As ICommentShape = comments(0).CommentShape
            
            'Sets alternative text of the CommentShape object.
            shape.AlternativeText = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IShape">
            <summary>
            Represents a shape object.
            </summary>
            <example>
            How to get the shape collection of a workbook.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"d:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape collection from the worksheet.
            IShapeCollection shapes = worksheet.Shapes; 
            
            //Gets a shape in shape collection by zero-based index.
            IShape shape = shapes[0]; 
            
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShape.Delete">
            <summary>
            Delete the shape.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShape.Move(System.Int32,System.Int32)">
            <summary>
            Moves the shape to the specified location.
            </summary>
            <param name="upperLeftRow">upper left corner row index. </param>
            <param name="upperLeftColumn">upper left corner column index.</param>  
            <example>
            How to move the shape to the specified location.
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"d:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Moves the shape to the specified location.
            shape.Move(12, 26);
            
            //Saves the excel file.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
            
            'Moves the shape to the specified location.
            shape.Move(12, 26)
            
            'Saves the excel file.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">upperLeftRow is less than 0 or greater than 65535. -or-
            upperLeftColumn is less than 0 or greater than 255.</exception>      
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShape.MoveToRange(Acey.ExcelX.IRange)">
            <summary>
            Moves the shape to the specified range.
            </summary>
            <param name="range">The specified range.</param>   
            <example>
            How to move the shape to the specified range.
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"d:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Creates a range object.
             IRange range = worksheet.Cells.CreateRange("C3:C6");            
            
            //Moves the shape to the specified location.
             shape.MoveToRange(range);
            
            //Saves the excel file.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
            
            /// 'Creates a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("C3:C6")
            
            'Moves the shape to the specified location.
            shape.MoveToRange(range)
            
            'Saves the excel file.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="range"/> is null.</exception>    
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShape.MoveToRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the shape to the specified range.
            </summary>
            <param name="upperLeftRow">upper left corner row index. </param>
            <param name="upperLeftColumn">upper left corner column index.</param>
            <param name="lowerRightRow">lower left corner row index. </param>
            <param name="lowerRightColumn">lower left corner column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <p>upperLeftRow is less than 0 or greater than 65535.-or-</p>
            <p>upperLeftColumnis less than 0 or greater than 255. -or-</p>
            <p>lowerRightRow is less than 0 or greater than 65535.-or-</p> 
            <p>lowerRightColumn is less than 0 or greater than 255.</p>
            </exception>
            <example>
            How to move the shape to the specified range.
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Moves the shape to the specified location.
            shape.MoveToRange(6, 7, 8, 10);
            
            //Saves the excel file.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
             Dim shape As IShape = worksheet.Shapes(0)
             
            'Moves the shape to the specified location.
            shape.MoveToRange(6, 7, 8, 10)
            
            'Saves the excel file.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.AlternativeText">
            <summary>
            Gets or sets a textual description for a shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Fill">
            <summary>
            Gets the fill attributes of the shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.HasLine">
            <summary>
            Gets whether the shape has line.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Height">
            <summary>
            Gets or sets the height of shape, in unit of pixels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.HeightCM">
            <summary>
            Gets or sets the height of shape, in unit of cm.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.IsFilled">
            <summary>
            Gets whether the shape is filled.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.IsGroup">
            <summary>
            Gets whether the shape is Group.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Left">
            <summary>
            Gets or sets the horizontal offset of shape from its upper-left cell's column, in unit of pixels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.LeftCM">
            <summary>
            Gets or sets the horizontal offset of shape from its upper-left cell's column, in unit of cm.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Line">
             <summary>
             Gets the line attributes of the shape.
             </summary>
            <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"d:\Shape.xls");
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a shape collection from the worksheet.
             IShapeCollection shapes = worksheet.Shapes; 
             
             //Gets a shape in shape collection by zero-based index.
             IShape shape = shapes[0]; 
             
             //Gets the line attributes of the shape.
             ILineFormat lineFormat = shape.Line;
             
             [Visual Basic]
             'Creates a workbook by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a shape object using zero-based shape index.
             Dim shape As IShape = worksheet.Shapes(0)
              
             'Gets line format of the shape.
             Dim lineFormat As ILineFormat = shape.Line
             </code>
             </example>
             <seealso cref="T:Acey.ExcelX.Drawing.ILineFormat"/>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.LockAspectRatio">
            <summary>
            True means that don't allow changes in aspect ratio.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Locked">
             <summary>
            Gets or sets whether is locked.
             </summary>       
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Name">
            <summary>
            Gets or sets name of the shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.LowerRightColumn">
            <summary>
            Gets or sets  lower right corner column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be between 0 and 255.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.LowerRightRow">
            <summary>
            Gets or sets lower right corner row index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be between 0 and 65535.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Placement">
            <summary>
            Gets or sets the way an object is attached to its underlying cells.
            </summary>
            <remarks>Default is PlacementType.Move.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Printed">
            <summary>
            Gets or sets whether the image of this object is intended to be included when printed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.RotationAngle">
            <summary>
            Gets or sets the rotation on a shape.
            </summary>
            <remarks>The value must be between -3600 and 3600.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is less than -3600 or greater than 3600.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Shapes">
            <summary>
            Gets the parent shape collection of this shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Sheet">
            <summary>
            Returns the parent ISheet of this shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Top">
            <summary>
            Gets or sets the vertical offset of shape from its upper-left cell's row, in unit of pixels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.TopCM">
            <summary>
            Gets or sets the vertical offset of shape from its  upper-left cell's row, in unit of cm.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.UpperLeftColumn">
            <summary>
            Gets or sets pper left corner column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be between 0 and 255.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.UpperLeftRow">
            <summary>
            Gets or sets upper left corner row index. 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be between 0 and 65535. </exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Width">
            <summary>
            Gets or sets the width of shape, in unit of pixels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.WidthCM">
            <summary>
            Gets or sets the width of shape, in unit of cm.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.HorizontalFlip">
            <summary>
            Gets and sets whether shape is horizontally flipped.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.RelativeToOriginalPictureSize">
            <summary>
            Indicates whether shape is relative to original picture size.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.VerticalFlip">
            <summary>
            Gets and sets whether shape is vertically flipped .
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShape.Visible">
            <summary>
            Gets or sets whether this shape is visible.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICommentShape.Comment">
            <summary>
            Gets the Commnet object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ITickLabels">
            <summary>
            specifies the attributes of the axis labels, major tick marks, and minor tick marks associated with an axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a CategoryAxis object of the Chart object.
            ICategoryAxis categoryAxis = chart.CategoryAxis;
             
            //Gets a TickLabels object of the CategoryAxis object.
            ITickLabels tickLabels = categoryAxis.TickLabels;
            
             //Sets shadow of the TickLabels object.
             tickLabels.Shadow = true;
             
             //Sets orientation of the TickLabels object.
             tickLabels.Orientation = 30;
             
             //Gets a Font object of the TickLabels object.
             Acey.ExcelX.IFont font = tickLabels.Font;
             
             //Sets name of the Font object.
             font.Name = "Arial Black";
             
             //Sets size of  the Font object.
             font.Size = 20;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a CategoryAxis object of the Chart object.
            Dim categoryAxis As ICategoryAxis = chart.CategoryAxis
            
            'Gets a TickLabels object of the CategoryAxis object.
            Dim tickLabels As ITickLabels = categoryAxis.TickLabels
            
            'Sets shadow of the TickLabels object.
            tickLabels.Shadow = True
            
            'Sets orientation of the TickLabels object.
            tickLabels.Orientation = 30
            
            'Gets a Font object of the TickLabels object.
            Dim font As Acey.ExcelX.IFont = tickLabels.Font
            
            'Sets name of the Font object.
            font.Name = "Arial Black"
            
            'Sets size of  the Font object.
            font.Size = 20
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITickLabels.NumberFormat">
            <summary>
            Returns or sets the format code for the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITickLabels.NumberFormatLinked">
            <summary>
            True if the number format is linked to the cells.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITickLabels.Offset">
            <summary>
            Represents distance between the labels and axis line.  
            </summary>
            <remarks>The number must be between 0 and 1000.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 1000.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITickLabels.Orientation">
            <summary>
            Gets or sets the text rotation. Must be between -90 and 90 degrees.
            </summary>
            <remarks>The number must be between -90 and 90.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than -90 or greater than 90.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITickLabels.TextDirection">
            <summary>
            Gets or sets the reading order of the text.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IFloor">
            <summary>
            Represents the floor of a 3-D chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Floor object of the Chart object.
            IFloor floor = chart.Floor;
             
            //Gets border of the Floor object.
            Acey.ExcelX.Drawing.ILine line = floor.Border;
            
            //Sets border's style of the Floor object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the Floor object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Floor object.
            line.Color = Color.Blue;
            
            //Gets area of the Floor object.
            Acey.ExcelX.Drawing.IArea area = floor.Area;
            
            //Sets forefound color of the area of the Floor object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Floor object of the Chart object.
            Dim floor As IFloor = chart.Floor
            
            'Gets border of the Floor object.
            Dim line As Acey.ExcelX.Drawing.ILine = floor.Border
            
            'Sets border's style of the Floor object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the Floor object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Floor object.
            line.Color = Color.Blue
            
            'Gets area of the Floor object.
            Dim area As Acey.ExcelX.Drawing.IArea = floor.Area
            
            'Sets forefound color of the area of the Floor object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IFloor.Border">
            <summary>
            Gets a Acey.ExcelX.Drawing.ILine object of the Floor object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IFloor.Area">
            <summary>
            Gets a Acey.ExcelX.Drawing.IArea object of the Floor object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.TimeUnit">
            <summary>
            Specifies the unit of measurement of a date value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TimeUnit.Days">
            <summary>
            Time value is measured in days.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TimeUnit.Months">
            <summary>
            Time value is measured in months.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TimeUnit.Years">
            <summary>
            Time value is measured in years.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.LineType">
            <summary>
            Specifies the style of the line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.Solid">
            <summary>
            Represent a solid line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.Dash">
            <summary>
            Represent a dash line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.Dot">
            <summary>
            Represent a dot line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.DashDot">
            <summary>
            Represent a dash-dot line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.DashDotDot">
            <summary>
            Represent a dash dot-dot line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.None">
            <summary>
            Represent a none line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.DarkGray">
            <summary>
            Represent a dark gray pattern line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.MediumGray">
            <summary>
            Represent a medium gray pattern line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.LineType.LightGray">
            <summary>
            Represent a light gray pattern line.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IShapeCollection">
            <summary>
            Represents a shape collection.
            </summary>
            <example>
            How to get the shape collection of a workbook.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"d:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape collection from the worksheet.
            IShapeCollection shapes = worksheet.Shapes; 
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.AddPicture(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Adds a picture to the shape collection.
            </summary>
            <param name="image">A image object.</param>
            <param name="upperLeftRow">Upper left zero-based row index.</param>
            <param name="upperLeftColumn">Upper left zero-based column index.</param>
            <param name="widthScale">Width scale in percents.</param>
            <param name="heightScale">Height scale in percents.</param>
            <returns>A picture object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">upperLeftRow is less than 0 or greater than 65535. -or-
            upperLeftColumn is less than 0 or greater than 255.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.AddPicture(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a picture to the shape collection.
            </summary>
            <param name="image">A image object.</param>
            <param name="upperLeftRow">Upper left zero-based row index.</param>
            <param name="upperLeftColumn">Upper left zero-based column index.</param>
            <param name="lowerRightRow">Lower right zero-based row index.</param>
            <param name="lowerRightColumn">Lower right zero-based column index.</param>
            <returns>A picture object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            upperLeftRow is less than 0 or greater than 65535. -or-
            upperLeftColumn is less than 0 or greater than 255. -or-
            lowerRightRow is less than 0 or greater than 65535. -or-
            lowerRightColumn is less than 0 or greater than 255.
            </exception>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.Clear">
            <summary>
             Removes all elements from the shape collection.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a shape collection of worksheet.
             IShapeCollection shapes = worksheet.Shapes;
             
            //Removes all elements from the shape collection.
             shapes.Clear();
             
            //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'Removes all elements from the shape collection.
            shapes.Clear()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.Remove(System.String)">
            <summary>
            Removes a shape of specified name.
            </summary>
            <param name="name">A shape of specified name.</param>
            <returns>true if success to delete the shape of specified name, otherwise returns false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a shape collection of worksheet.
             IShapeCollection shapes = worksheet.Shapes;
             
            //Removes a shape by the specified name.
            bool result = shapes.Remove("Picture 4");
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'Removes a shape by the specified name.
            Dim result As Boolean = shapes.Remove("Picture 4")
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.Remove(Acey.ExcelX.Drawing.IShape)">
            <summary>
            Removes the specified shape.
            </summary>
            <param name="shape">The specified shape.</param>
            <returns>true if success to delete the specified shape, otherwise returns false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a shape collection of worksheet.
            IShapeCollection shapes = worksheet.Shapes;
             
            //Gets a shape using zero-based shape index.
            IShape shape = shapes[0];
             
            //Removes the specified shape.
            bool result = shapes.Remove("Picture 4");
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'Gets a shape using zero-based shape index.
            Dim shape As IShape = shapes(0)
            
            'Removes a shape by the specified name.
            Dim result As Boolean = shapes.Remove(shape)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IShapeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the shape at the specified index of the shape collection.
            </summary>
            <param name="index">The zero-based index of the shape to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal IShapeCollection.Count.</exception>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a shape collection of worksheet.
             IShapeCollection shapes = worksheet.Shapes;
             
            //The zero-based index of the shape to remove.
            shapes.RemoveAt(0);
             
            //Saves as the specified file format.
             workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'The zero-based index of the shape to remove.
            shapes.RemoveAt(0)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShapeCollection.Count">
            <summary>
            Gets the count of shape collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShapeCollection.Sheet">
            <summary>
             Returns the parent ISheet of this instance.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShapeCollection.Item(System.Int32)">
            <summary>
            Gets a shape object using zero-based shape index.
            </summary>
            <param name="index">The zero-based shape index.</param>
            <returns>A shape object.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a shape collection from the worksheet.
            IShapeCollection shapes = worksheet.Shapes;
            
            //Gets a shape object from the shape collection using shape index.
            IShape shape = shapes[0];
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape collection from the worksheet.
            Dim shapes As IShapeCollection = worksheet.Shapes
            
            'Gets a shape object from the shape collection using shape index.
            Dim shape As IShape = shapes(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to IShapeCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IShapeCollection.Item(System.String)">
            <summary>
            Gets a shape object using name of the shape.
            </summary>
            <param name="name">Name of the shape. ignore case.</param>
            <returns>Returns null If donn't find in shape collection.</returns>
        </member>
        <member name="T:Acey.ExcelX.FormulaException">
            <summary>
            The exception that is thrown when set error formual.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaException.#ctor">
            <summary>
             Initializes a new instance of the FormulaException class.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the FormulaException class.
            </summary>
            <param name="message">Gets the error message and the string representation of the invalid argument value.</param>
        </member>
        <member name="T:Acey.ExcelX.FormulaInvalidFormatException">
            <summary>  
             The exception that is thrown when set invalid formual.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaInvalidFormatException.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the FormulaInvalidFormatException class.
            </summary>
            <param name="invalidFormat">Invalid format.</param>
        </member>
        <member name="M:Acey.ExcelX.FormulaInvalidFormatException.#ctor(System.String,System.String)">
            <summary> 
            Initializes a new instance of the FormulaInvalidFormatException class.
            </summary>
            <param name="invalidFormat">Invalid format.</param>
            <param name="message">Gets the error message and the string representation of the invalid argument value.</param>
        </member>
        <member name="P:Acey.ExcelX.FormulaInvalidFormatException.InvalidExpression">
            <summary> invalid formula Expression
            </summary>
        </member>
        <member name="P:Acey.ExcelX.FormulaInvalidFormatException.Message">
            <summary> 
            Gets the error message and the string representation of the invalid argument value.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FormulaErrorValueException">
            <summary> 
            The exception is thrown when result is error value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FormulaErrorValueException.ErrorValue">
            <summary>
            Specifies the possible formula error conditions.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaErrorValueException.#ctor">
            <summary>
             Initializes a new instance of the FormulaErrorValueException class.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaErrorValueException.#ctor(Acey.ExcelX.ValueError)">
            <summary>
            Initializes a new instance of the FormulaErrorValueException class with a specified formula error conditions. 
            </summary>
            <param name="errorValue">Specifies the possible formula error conditions.</param>
        </member>
        <member name="M:Acey.ExcelX.FormulaErrorValueException.#ctor(Acey.ExcelX.ValueError,System.String)">
            <summary>
             Initializes a new instance of the FormulaErrorValueException class with a specified formula error conditions
             and error message. 
            </summary>
            <param name="errorValue">Specifies the possible formula error conditions.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="P:Acey.ExcelX.FormulaErrorValueException.Message">
            <summary>
            A message that describes the error.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FormulaCloseLoopException">
            <summary>
            The exception is thrown when you accidentally created the circular reference, such as set formual =SUM(A1,B1) in cell named A1.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaCloseLoopException.#ctor">
            <summary>
            Initializes a new instance of the FormulaCloseLoopException class.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.FormulaCloseLoopException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FormulaCloseLoopException class.
            </summary>
            <param name="CircularReference">The circular reference.</param>
        </member>
        <member name="M:Acey.ExcelX.FormulaCloseLoopException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FormulaCloseLoopException class.
            </summary>
            <param name="CircularReference">The circular reference.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="P:Acey.ExcelX.FormulaCloseLoopException.CircularReference">
            <summary> 
            The circular reference
            </summary>
        </member>
        <member name="P:Acey.ExcelX.FormulaCloseLoopException.Message">
            <summary>
            Gets the error message and the string representation of the invalid argument value.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IArea">
            <summary>
            Specifies the patterns and colors used in a filled region.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.BackgroundColor">
            <summary>
            Gets or sets the background color of Acey.ExcelX.Drawing.IArea.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.FillFormat">
            <summary>
            Gets a Acey.ExcelX.Drawing.IFillFormat object that contains fill formatting properties for the specified chart or shape.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.ForegroundColor">
            <summary>
            Gets or sets the foreground color of Acey.ExcelX.Drawing.IArea.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.Formatting">
            <summary>
            Gets or sets the type of formatting applied to Acey.ExcelX.Drawing.IArea.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.InvertIfNegative">
            <summary>
            Gets or sets whether the foreground and background are swapped when the data value of the filled area is negative.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IArea.Transparency">
            <summary>
            Gets or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ISeriesLines">
            <summary>
            Represents series lines in a chart group. Series lines connect the data values from each series.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a SeriesLines object of the Series object.
             ISeriesLines seriesLines = series.SeriesLines;
            
            //Sets border's style of the Series object.
            seriesLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            seriesLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            seriesLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a SeriesLines object of the Series object.
            Dim seriesLines As ISeriesLines = series.SeriesLines
            
            'Sets border's style of the Series object.
            seriesLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            seriesLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            seriesLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.ISeries">
             <summary>
             Represents a single series in a chart. 
             </summary>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets border of the Series object.
             Acey.ExcelX.Drawing.ILine line = series.Border;
            
             //Sets border's style of the Series object.
             line.Style = LineType.DarkGray;
             
             //Sets if the color of points is varied.
             series.IsColorVaried = true;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets border of the Series object.
             Dim line As Acey.ExcelX.Drawing.ILine = series.Border
             
             'Sets border's style of the Series object.
             line.Style = LineType.DarkGray
             
             'Sets if the color of points is varied.
             series.IsColorVaried = True
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ISeries.Move(System.Int32)">
            <summary>
            Moves the series to the specified positon.
            </summary>
            <param name="plotOrder">the specified positon.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"> plotOrder is less than 0 or greater than or equal to ISeriesCollection.Count.</exception>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Moves the series to the specified positon.
            series.Move(1);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Moves the series to the specified positon.
            series.Move(1)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Area">
             <summary>
             Gets a Acey.ExcelX.Drawing.IArea object of the Series object.
             </summary>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets a Area object of the Series object.
             Acey.ExcelX.Drawing.IArea area = series.Area;
            
             //Sets foreground color of the Area object.
             area.ForegroundColor = Color.Yellow;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets a Area object of the Series object.
             Dim area As Acey.ExcelX.Drawing.IArea = series.Area
             
             'Sets foreground color of the Area object.
             area.ForegroundColor = Color.Yellow
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Border">
             <summary>
             Gets a Acey.ExcelX.Drawing.ILine object of the Series object.
             </summary>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets border of the Series object.
             Acey.ExcelX.Drawing.ILine line = series.Border;
            
             //Sets border's style of the Series object.
             line.Style = LineType.DarkGray;
             
             //Sets border's weight of the Series object.
             line.Weight = WeightType.WideLine;
             
             //Sets border's color of the Series object.
             line.Color = Color.Blue;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets border of the Series object.
             Dim line As Acey.ExcelX.Drawing.ILine = series.Border
             
             'Sets border's style of the Series object.
             line.Style = LineType.DarkGray
             
             'Sets border's weight of the Series object.
             line.Weight = WeightType.WideLine
             
             'Sets border's color of the Series object.
             line.Color = Color.Blue
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.BubbleSizes">
            <summary>
            Gets or sets Bubble sizes for the series. Applies only to bubble charts.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets Bubble sizes for the series. Applies only to bubble charts.
            series.BubbleSizes = "=Sheet1!$B$3:$F$3";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets Bubble sizes for the series. Applies only to bubble charts.
            series.BubbleSizes = "=Sheet1!$B$3:$F$3"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.DataLabels">
            <summary>
            Gets properties of a data label on a chart group series.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets properties of a data label on a chart group series.
            IDataLabels dataLabels = series.DataLabels;
            
            //Sets whether value is in data labels.
            dataLabels.ShowValue = true;
            
            //Sets the format code for the object.
            dataLabels.NumberFormat = "0.00";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets properties of a data label on a chart group series.
            Dim dataLabels As IDataLabels = series.DataLabels
            
            'Sets whether value is in data labels.
            dataLabels.ShowValue = True
            
            'Sets the format code for the object.
            dataLabels.NumberFormat = "0.00"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Points">
            <summary>
            Gets a collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
            
            //Sets shadow of the ChartPoint object.
            point.Shadow = true;
            
            //Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Sets shadow of the ChartPoint object.
            point.Shadow = True
            
            'Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Smooth">
            <summary>
            Gets or sets whether the lines of the series are displayed with a smooth line effect on a scatter, radar, and line chart group.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets whether the lines of the series are displayed with a smooth line effect on a scatter, radar, and line chart group.
            series.Smooth = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets whether the lines of the series are displayed with a smooth line effect on a scatter, radar, and line chart group.
            series.Smooth = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Shadow">
            <summary>
            True if the series has a shadow.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasDataLabels">
            <summary>
            Gets whether has data label of the current object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasErrorBarsX">
            <summary>
            Indicates if series contains X error bars.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasErrorBarsY">
            <summary>
            Indicates if series contains Y error bars.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.ErrorBarsX">
            <summary>
            Represents X direction error bar of the series.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Represents the error bars on a chart series.
            IErrorBar errorBar = series.ErrorBarsX;
            
            //Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus;
            
            //Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage;
            
            //Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10;
            
            //Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Represents the error bars on a chart series.
            Dim errorBar As IErrorBar = series.ErrorBarsX
            
            'Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus
            
            'Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage
            
            'Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10
            
            'Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.ErrorBarsY">
            <summary>
            Represents Y direction error bar of the series.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Represents the error bars on a chart series.
            IErrorBar errorBar = series.ErrorBarsY;
            
            //Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus;
            
            //Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage;
            
            //Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10;
            
            //Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Represents the error bars on a chart series.
            Dim errorBar As IErrorBar = series.ErrorBarsY
            
            'Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus
            
            'Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage
            
            'Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10
            
            'Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.FirstSliceAngle">
            <summary>
            Gets or sets the starting angle of the first data point, clockwise from the top of the circle. Applies only pie and doughnut charts.
            </summary>
            <remarks>The number must be between 0 and 360.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 360.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\PieChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets the starting angle of the first data point, clockwise from the top of the circle.
            series.FirstSliceAngle = 30;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\PieChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets the starting angle of the first data point, clockwise from the top of the circle.
            series.FirstSliceAngle = 30
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.DoughnutHoleSize">
            <summary>
            Gets or sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            </summary>
            <remarks>The number must be between 10 and 90.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 10 or greater than 90.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\DoughnutChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.DoughnutHoleSize = 60;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\DoughnutChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.DoughnutHoleSize = 60
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Overlap">
            <summary>
            Gets or sets the overlap between data points in the same category as a percentage of the data points width.  The number must be between -100 and 100.
            </summary>
            <remarks> Applies only to 2-D bar and 2-D column charts.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than -100 or greater than 100.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\ColumnChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.Overlap = 60;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\ColumnChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.Overlap = 60
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.GapWidth">
            <summary>
            <p>Gets or sets the width of the gap between the categories and the left and right edges of the plot area as a percentage of the data point.
            The value must be between 0 and 500.
            </p>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 500.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\ColumnChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.GapWidth = 200;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\ColumnChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets the size of the center hole in a doughnut chart group as a percentage of the plot area size.
            series.GapWidth = 200
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasLeaderLines">
            <summary>
            True if the series has leader lines.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasDropLines">
            <summary>
            True if the chart has drop lines.  Applies only to line chart or area charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasHiLoLines">
            <summary>
            True if the line chart has high-low lines. Applies only to line charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasUpDownBars">
            <summary>
            True if a line chart has up and down bars.  Applies only to line charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasSeriesLines">
            <summary>
            True if a stacked column chart or bar chart has series lines or if a Pie of Pie chart or Bar of Pie chart has connector lines between the two sections. Applies only to stacked column charts, bar charts, Pie of Pie charts, or Bar of Pie charts.
            </summary>
            <remarks>
            Applies only to stacked column charts, bar charts, Pie of Pie charts, or Bar of Pie charts.
            </remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.LeaderLines">
             <summary>
            Represents leader lines on a chart. Leader lines connect data labels to data points. 
             </summary>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets a LeaderLines object of the Series object.
             ILeaderLines leaderLines = series.LeaderLines;
             
             //Sets border's style of the Series object.
             leaderLines.Style = LineType.DarkGray;
             
             //Sets border's weight of the Series object.
             leaderLines.Weight = WeightType.WideLine;
             
             //Sets border's color of the Series object.
             leaderLines.Color = Color.Blue;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets a LeaderLines object of the Series object.
             Dim leaderLines As ILeaderLines = series.LeaderLines
             
             'Sets border's style of the Series object.
             leaderLines.Style = LineType.DarkGray
             
             'Sets border's weight of the Series object.
             leaderLines.Weight = WeightType.WideLine
             
             'Sets border's color of the Series object.
             leaderLines.Color = Color.Blue
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HiLoLines">
            <summary>
            Represents the high-low lines in a chart group. Applies only to line charts.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a HiLoLines object of the Series object.
            IHiLoLines hiLoLines = series.HiLoLines;
            
            //Sets border's style of the Series object.
            hiLoLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            hiLoLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            hiLoLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a HiLoLines object of the Series object.
            Dim hiLoLines As IHiLoLines = series.HiLoLines
            
            'Sets border's style of the Series object.
            hiLoLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            hiLoLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            hiLoLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.HasRadarAxisLabels">
            <summary>
            Gets or sets whether category labels are displayed. Applies only to radar charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.DropLines">
            <summary>
            Returns a DropLines object that represents the drop lines for a series on the line chart or area chart. Applies only to line chart or area charts.
            </summary>
            <remarks>Applies only to line chart or area charts.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a DropLines object of the Series object.
            IDropLines dropLines = series.DropLines;
            
            //Sets border's style of the Series object.
            dropLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            dropLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            dropLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a DropLines object of the Series object.
            Dim dropLines As IDropLines = series.DropLines
            
            'Sets border's style of the Series object.
            dropLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            dropLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            dropLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.UpBars">
            <summary>
            Specifies the attributes of the up bars between multiple series of a line chart group.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a DropBars object of the Series object.
            IDropBars dropBars = series.UpBars;
            
            //Sets border's style of the Series object.
            Acey.ExcelX.Drawing.ILine line = dropBars.Border;
            
            //Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            line.Color = Color.Blue;      
            
            //Gets a Area object of the DropBars object.
            Acey.ExcelX.Drawing.IArea area = dropBars.Area;
            
            //Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a DropBars object of the Series object.
            Dim dropBars As IDropBars = series.UpBars
            
            'Sets border's style of the Series object.
            Dim line As Acey.ExcelX.Drawing.ILine = dropBars.Border
            
            'Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            line.Color = Color.Blue
            
            'Gets a Area object of the DropBars object.
            Dim area As Acey.ExcelX.Drawing.IArea = dropBars.Area
            
            'Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.DownBars">
            <summary>
            Specifies the attributes of the down bars between multiple series of a line chart group.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a DropBars object of the Series object.
            IDropBars dropBars = series.DownBars;
            
            //Sets border's style of the Series object.
            Acey.ExcelX.Drawing.ILine line = dropBars.Border;
            
            //Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            line.Color = Color.Blue;      
            
            //Gets a Area object of the DropBars object.
            Acey.ExcelX.Drawing.IArea area = dropBars.Area;
            
            //Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a DropBars object of the Series object.
            Dim dropBars As IDropBars = series.DownBars
            
            'Sets border's style of the Series object.
            Dim line As Acey.ExcelX.Drawing.ILine = dropBars.Border
            
            'Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            line.Color = Color.Blue
            
            'Gets a Area object of the DropBars object.
            Dim area As Acey.ExcelX.Drawing.IArea = dropBars.Area
            
            'Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.SeriesLines">
            <summary>
            Represents series lines in a chart group. Series lines connect the data values from each series.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a SeriesLines object of the Series object.
             ISeriesLines seriesLines = series.SeriesLines;
            
            //Sets border's style of the Series object.
            seriesLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            seriesLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            seriesLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a SeriesLines object of the Series object.
            Dim seriesLines As ISeriesLines = series.SeriesLines
            
            'Sets border's style of the Series object.
            seriesLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            seriesLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            seriesLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Explosion">
            <summary>
            Gets or sets the distance of a data point or data points in a series from the center of the pie chart.
            </summary>
            <remarks>The number must be greater than or equal to 0.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.IsColorVaried">
            <summary>
            Represents if the color of points is varied. The chart must contain only one series.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Name">
            <summary>
            Referenced data specifies the series name.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Referenced data specifies the series name.
            series.Name = "=Sheet1!$A$2";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Referenced data specifies the series name.
            series.Name = "=Sheet1!$A$2"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Values">
            <summary>
            Represents the data of the chart series.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Referenced data specifies the categories or vertical values
            series.Values = "=Sheet1!$B$2:$D$2";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Referenced data specifies the categories or vertical values
            series.Values = "=Sheet1!$B$2:$D$2"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.XValues">
            <summary>
            Referenced data specifies the values or horizontal values.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Referenced data specifies the values or horizontal values.
            series.XValues = "=Sheet1!$B$1:$D$1";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Referenced data specifies the values or horizontal values.
            series.XValues = "=Sheet1!$B$1:$D$1"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.ShowNegativeBubbles">
            <summary>
            Gets or sets whether data points with negative values in the chart group are shown on the chart. Applies only to bubble charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.SizeRepresents">
            <summary>
            Gets or sets how the default size of the data points represents the value. Applies only to bubble charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.BubbleScale">
             <summary>
             Gets or sets the size of the data points as a percentage of their default size. Value must be between 0 and 300.
             </summary>
            <remarks>Applies only to bubble charts. </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0 or greater than 300.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Has3DEffect">
            <summary>
            Applies only to bubble charts.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.SplitValue">
            <summary>
            Gets or sets the threshold that selects which data points of the primary pie move to the secondary bar/pie.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.IsAutoSplit">
            <summary>
            Gets or sets whether the split point of the chart group is determined automatically.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.SplitType">
            <summary>
            Gets or sets what determines the split between the primary pie and the secondary bar/pie.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.SecondPlotSize">
            <summary>
            Gets or sets the size of the secondary bar/pie as a percentage of the size of the primary pie.
            </summary>
            <remarks>Value must be between 5 and 200.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 5 or greater than 200. </exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.TrendLines">
            <summary>
            Represents a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic;
            
            //True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic
            
            'True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.MarkerBackgroundColor">
            <summary>
            Gets or sets the  background color of the data marker in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.MarkerForegroundColor">
            <summary>
            Gets or sets the foreground color of the data marker  in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.MarkerSize">
            <summary>
            Gets or sets the size of the data marker in a line chart, scatter chart, or radar chart.The default value is 5.
            </summary>
            <remarks>The number must be between 2 and 72. </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 2 or greater than 72.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.MarkerStyle">
            <summary>
            Gets or sets the type of data marker  in a line chart, scatter chart, or radar chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Type">
            <summary>
            Gets or sets series type.
            </summary>
            <remarks>
            Remarks:
            <p>1.You cannot change the chart type to a stock chart.  A stock chart requires three, four or five series of data plot a single point.</p>
            <p>2.You cannot change the bubble type to a bubble chart. A bubble chart requires at least two value per data point.</p>
            <p>3.If the chart type is 3-D chart type, you could not plot the series to the second axis.</p>
            <p>4.A surface chart could not be combined with other chart types. </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <p>1.You cannot change the chart type to a stock chart.  A stock chart requires three, four or five series of data plot a single point.</p>
            <p>2.You cannot change the bubble type to a bubble chart. A bubble chart requires at least two value per data point.</p>
            <p>3.If the chart type is 3-D chart type, you could not plot the series to the second axis.</p>
            <p>4.A surface chart could not be combined with other chart types.</p>
            </exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Sets series type.
            series.Type = ChartType.Line;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Sets series type.
            series.Type = ChartType.Line
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.Bar3DShapeType">
            <summary>
            Gets or sets the shape used with the 3-D bar or column chart.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeries.PlotOnSecondAxis">
            <summary>
            Indicates if this series is plotted on second value axis.
            </summary>
            <remarks>If the chart type is 3-D chart type, you could not plot the series to the second axis.</remarks>
            <exception cref="T:System.ArgumentException">If the chart type is 3-D chart type, you could not plot the series to the second axis.</exception>
        </member>
        <member name="T:Acey.ExcelX.Charts.IDataLabel">
            <summary>
            Represents the data label on a chart point or trendline.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
               
            //Gets a DataLabel object of the ChartPoint object.
            IDataLabel dataLabel = point.DataLabel;
            
            //Sets text of the DataLabel object.
            dataLabel.Text = "Sales";
            
            //Sets orientation of the DataLabel object.
            dataLabel.Orientation = 30;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Gets a DataLabel object of the ChartPoint object.
            Dim dataLabel As IDataLabel = point.DataLabel
            
            'Sets text of the DataLabel object.
            dataLabel.Text = "Sales"
            
            'Sets orientation of the DataLabel object.
            dataLabel.Orientation = 30
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IDataLabel.RemoveCharacters">
            <summary>
            Removes all of Characters object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabel.AutoText">
            <summary>
            Gets or sets whether the text value of this text field is automatically generated and unchanged.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabel.Text">
            <summary>
            Gets or sets the text for the specified object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDataLabel.Characters">
            <summary>
            Returns a Characters object of the title.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartArea">
             <summary>
            Represents the chart area of a chart.  
             </summary>
             <remarks>The chart area on a 2-D chart contains the axes, the chart title, the axis titles, and the legend. The chart area on a 3-D chart contains the chart title and the legend; it doesn’t include the plot area (the area within the chart area where the data is plotted). </remarks>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a ChartArea object of the Chart object.
             IChartArea chartArea = chart.ChartArea;
              
             //Gets border of the ChartArea object.
             Acey.ExcelX.Drawing.ILine line = chartArea.Border;
             
             //Sets border's style of the ChartArea object.
             line.Style = LineType.DarkGray;
             
             //Sets border's weight of the ChartArea object.
             line.Weight = WeightType.WideLine;
             
             //Sets border's color of the ChartArea object.
             line.Color = Color.Blue;
             
             //Gets area of the ChartArea object.
             Acey.ExcelX.Drawing.IArea area = chartArea.Area;
             
             //Sets forefound color of the area of the ChartArea object.
             area.ForegroundColor = Color.Yellow;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic] 
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a ChartArea object of the Chart object.
             IChartArea chartArea = chart.ChartArea
             
             'Sets forefound color of the area of the ChartArea object.
             area.ForegroundColor = Color.Yellow
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.ErrorBarType">
            <summary>
            Specifies the error amount type of the error bars.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarType.Percentage">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarType.Fixed">
            <summary>
            Fixed value
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarType.StandardDeviation">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarType.Custom">
            <summary>
            Custom values (array of values or range)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ErrorBarType.StandardError">
            <summary>
            Standard error
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ChartSplitType">
            <summary>
            Gets or sets what determines the split between the primary pie and the secondary bar/pie.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartSplitType.Position">
            <summary>
            Split series by position.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartSplitType.Value">
            <summary>
            Split series by value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartSplitType.PercentValue">
            <summary>
            Split series by percent value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartSplitType.Custom">
            <summary>
            Split series manually.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ChartMarkerType">
            <summary>
            Enumeration of the marker types for Chart lines in Excel.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.None">
            <summary>
            No marker. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Square">
            <summary>
            Square markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Diamond">
            <summary>
            Diamond-shaped markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Triangle">
            <summary>
            Triangular markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.SquareX">
            <summary>
             Square markers with an X.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.SquareStar">
            <summary>
            Square markers with an asterisk.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Dot">
            <summary>
            Short bar markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Dash">
            <summary>
            Long bar markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Circle">
            <summary>
            Circular markers.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.SquarePlus">
            <summary>
            Square markers with a plus sign.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartMarkerType.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IWorksheetCollection">
            <summary>
             Represents a collection of worksheets in a workbook.
            </summary>
            <example>
            How to get a collection of worksheets in a workbook.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Removes the sheet that specified zero-based index.
            worksheets.RemoveAt(0);
            
            //Adds a new worksheet object to the worksheet collection, the worksheet name will be gerenated.
            IWorksheet worksheet = worksheets.Add();
            
            //Inserts the specified name of worksheet into the specified zero-based index.
            worksheets.Insert(1, "Sheet");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Removes the sheet that specified zero-based index.
            worksheets.RemoveAt(0)
            
            'Adds a new worksheet object to the worksheet collection, the worksheet name will be gerenated.
            Dim worksheet As IWorksheet = worksheets.Add()
            
            'Inserts the specified name of worksheet into the specified zero-based index.
            worksheets.Insert(1, "Sheet")
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Clear">
            <summary> clear all worksheets in the workbook
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Add">
             <summary>
              Adds a new worksheet.
             </summary>
             <returns>The new Worksheet object.</returns>
             <remarks>The name of the new worksheet is automatically generated</remarks>
             <example>
             The example shows how to use the method.
             <code>
             //Creates a new workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
              
             //Gets a worksheet collection in the workbook object.
             IWorksheetCollection worksheets = workbook.Worksheets;
            
             //Adds a worksheet to the worksheet collection.
             IWorksheet worksheet = worksheets.Add();
             
             [Visual Basic]
             'Creates a new workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet collection in the workbook object.
             Dim worksheets As IWorksheetCollection = workbook.Worksheets
             
             'Adds a worksheet to the worksheet collection.
             Dim worksheet As IWorksheet = worksheets.Add()
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Add(System.String)">
            <summary>
             Adds the specified name Worksheet object.
            </summary>
            <param name="sheetName">The name of worksheet.</param>
            <returns>The new worksheet.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Adds a new worksheet object by using worksheet name.
            IWorksheet worksheet = worksheets.Add("Sheet");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Adds a new worksheet object by using worksheet name.
            Dim worksheet As IWorksheet = worksheets.Add("Sheet")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sheetName"/>is an invalid sheet name.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Contains(Acey.ExcelX.IWorksheet)">
            <summary>
            Returns whether contains the specified WorkSheet object.
            </summary>
            <param name="worksheet">The specified WorkSheet object.</param>
            <returns>True if the worksheet is found in worksheet collection;otherwise, false.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet object by using worksheet name.
            IWorksheet worksheet = worksheets["Sheet1"];
            
            //Gets whether contains the specified worksheet object.
            bool flag = worksheets.Contains(worksheet);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet object by using worksheet name.
            Dim worksheet As IWorksheet = worksheets("Sheet1")
            
            'Gets whether contains the specified worksheet object.
            Dim flag As Boolean = worksheets.Contains(worksheet)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Insert(System.Int32,System.String)">
             <summary>
             Inserts the specified name Worksheet object at the specified index.
             </summary>
             <param name="index">The zero based index of the worksheet in worksheet collection of the workbook. </param> 
             <param name="sheetName">The name of worksheet.</param>
             <returns>The new worksheet.</returns>
             <example>
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet collection in the workbook object.
             IWorksheetCollection worksheets = workbook.Worksheets;
             
             //Inserts a worksheet to the specified location by using worksheet name.
             IWorksheet worksheet = worksheets.Insert(1, "Sheet");
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
             'Gets a worksheet collection in the workbook object.
             Dim worksheets As IWorksheetCollection = workbook.Worksheets
             
             'Inserts a worksheet to the specified location by using worksheet name.
             Dim worksheet As IWorksheet = worksheets.Insert(1, "Sheet")
             </code>
             </example>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-index is equal to or greater than IWorksheetCollection.Count.</exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="sheetName"/> is null.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="sheetName"/> is a invalid name or exists the specified name in IWorksheetCollection.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Remove(Acey.ExcelX.IWorksheet)">
            <summary>
             Removes the specified worksheet.
            </summary>
            <param name="worksheet">The specified worksheet</param>
            <returns>Returns true if it is deleted, otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.Remove(System.String)">
            <summary>
            Removes the specified name of worksheet.
            </summary>
            <param name="sheetName">The specified name of worksheet.</param>
            <returns>Returns true if it is deleted, otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IWorksheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the worksheet of a specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than IWorkSheetCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetCollection.Count">
            <summary>
            Gets the number of worksheets in the workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets the number of worksheets in the workbook.
            int count = worksheets.Count;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets the number of worksheets in the workbook.
            Dim count As Integer = worksheets.Count
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetCollection.Workbook">
            <summary>
            Gets the parent workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets the parent workbook.
            IWorkbook parentWorkbook = worksheets.Workbook;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets the parent workbook.
            Dim parentWorkbook As IWorkbook = worksheets.Workbook
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorksheetCollection.Item(System.Int32)">
            <summary>
             Gets the worksheet specified by the zero based index.
            </summary>
            <param name="index">The zero based index of the worksheet.</param>
            <returns>The worksheet at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-index is equal to or greater than IWorksheetCollection.Count.</exception>       
        </member>
        <member name="P:Acey.ExcelX.IWorksheetCollection.Item(System.String)">
            <summary>
             Gets Worksheet object by the specified name. 
            </summary>
            <param name="name">The name of worksheet.</param>
            <returns>The worksheet at the specified name which is not case sensitive.
            if don't find in worksheet collection, return null.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet object by using worksheet name.
            IWorksheet worksheet = worksheets["Sheet1"];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet object by using worksheet name.
            Dim worksheet As IWorksheet = worksheets("Sheet1")
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.IWorkbook">
            <summary>
             Represents a workbook.
            </summary>
            <example>
            [C#]
            How to create a workbook object.    
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"book1.xls");
            
            //Gets a worksheet object collection in the workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a color collection in the workbook object.
            IColorCollection colors = workbook.Colors;
            
            //Gets a Name object collection in the workbook.
            INameCollection names = workbook.Names;
            
            //Gets a Style object collection in the workbook.
            IStyleCollection styles = workbook.Styles;
            
            //Gets normal style in the workbook.
            IStyle normalStyle = workbook.NormalStyle;
            
            [Visual Basic] 
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Book1.xls")
            
            'Gets a Worksheet object collection in the Workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets 
            
            'Gets a color collection in the workbook object.
             Dim colors As IColorCollection = workbook.Colors
            
            'Gets a Name object collection in the workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a Style object collection in the workbook.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets normal style in the workbook.
            Dim normalStyle As IStyle = workbook.NormalStyle
            </code> 
            </example>    
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.ChangePalette(System.Int32,System.Drawing.Color)">
            <summary>
            Specifies a custom color palette.
            </summary>
            <param name="index">Indexed palette color.</param>
            <param name="color">Specifies palette color.</param>
            <example>
            This example shows how you might use this method:
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a Color palette Collection in the Workbook.
            IColorCollection colors = workbook.Colors;
             
            //Specifies a custom color palette.
            workbook.ChangePalette(0, Color.Red);
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Color palette Collection in the Workbook.
            Dim colors As IColorCollection = workbook.Colors
            
            'Specifies a custom color palette.
            workbook.ChangePalette(0, Color.Red)
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">the index is less than zero or outside the bounds of the IColorCollection.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.Combine(Acey.ExcelX.IWorkbook)">
            <summary>
            Combines other workbook to this instance.
            </summary>
            <param name="source">The specified workbook will be combined to this workbook.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.Copy(Acey.ExcelX.IWorkbook)">
            <summary>
            Copies source workbook object to destination workbook object.
            </summary>
            <param name="source">Source workbook object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.Open(System.String)">
             <summary>
             Open a excel file that can read and write.
             </summary>
             <param name="fileName">The file to open.</param>        
             <exception cref="T:System.ArgumentNullException">fileName is null.</exception>
             <exception cref="T:System.ArgumentException">file is invalid string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
            <exception cref="T:System.NotSupportedException">file is not xls format file.</exception>        
            <exception cref="T:System.IO.IOException">An I/O error occured when opening the file.</exception>    
            <example>
             This example shows how you might use this method:
             <code>
              [C#]
              //Creates a workbook by reading the specified excel file.
              IWorkbook workbook =  ExcelxApplication.Open(@"D:\book1.xls");
             
             [Visual Basic] 
             'Creates a workbook by reading the specified excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
             </code>
             </example>     
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.Save">
            <summary>
             Saves and Overwrite the original file.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">the original fileName was empty.</exception>
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.SaveAs(System.String,Acey.ExcelX.FileFormat)">
             <summary>
             saves as the specified file to the disk.
             </summary>
             <param name="fileName">file name</param>
             <param name="fileFormat">file format</param>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a wotkbook object.
             IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             workbook.SaveAs(@"D:\book1.csv",FileFormat.CSV);//only save actived worksheet's data to file,you can use IWorksheet.ExportToFile to save other worksheets' data to file.
             
             [Visual Basic] 
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             workbook.SaveAs("D:\book1.csv", FileFormat.CSV)
             </code>
             </example>
             <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is null.</exception>
             <exception cref="T:System.ArgumentException"> fileName is a zero-length string, contains only white space.</exception>
             <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid.</exception>
            <exception cref="T:System.NotSupportedException">fileName is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured when opening the file.</exception>   
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.SaveToStream(System.IO.Stream,Acey.ExcelX.FileFormat)">
            <summary>
            Saves workbook data to a stream.
            </summary>
            <param name="outStream">Output stream.</param>
            <param name="fileFormat">File format.</param>
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.SaveToHttpResponse(System.Web.HttpResponse,System.String,System.Boolean)">
            <summary> Output Workbook to Web Page directly.
            </summary>
            <param name="response">the Web Page's Response object.</param>
            <param name="fileName">the output file name.</param>
            <param name="openInBrowser">if true,the file will be opened in browse,otherwise the file will be downloaded.</param>
            <example>
            This example shows how you create a workbook and download on Web:
            <code>
            </code>
            [C#]
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             workbook.Worksheets[0].ImportArray(
                 new object[,] {              
                                       {"xh","name","age" },
                                       {1,"james",56 },
                                       {2,"Chan K.S",34}
                                    },   0, 0);
              workbook.SaveToHttpResponse(this.Response, "book1.xls", false);
            </example>
        </member>
        <member name="M:Acey.ExcelX.IWorkbook.SaveToHttpResponse(System.Web.HttpResponse,System.String,Acey.ExcelX.FileFormat,System.Boolean)">
            <summary> Output Workbook to Web Page directly.
            </summary>
            <param name="response">the Web Page's Response object.</param>
            <param name="fileName">the output file name.</param>
            <param name="fileFormat">the output file format.</param>
            <param name="openInBrowser">if true,the file will be opened in browse,otherwise the file will be downloaded.</param>
            <example>
            This example shows how you create a workbook and download on Web:
            <code>
            </code>
            [C#]
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             workbook.Worksheets[0].ImportArray(
                 new object[,] {              
                                       {"xh","name","age" },
                                       {1,"james",56 },
                                       {2,"Chan K.S",34}
                                    },   0, 0);
              workbook.SaveToHttpResponse(this.Response, "book1.xls", FileFormat.Excel97To2003, false);
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ActivedSheet">
            <summary>
            Gets the active sheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a active sheet in the workbook object.
            ISheet sheet = workbook.ActiveSheet;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a active sheet in the workbook object.
            Dim sheet As ISheet = workbook.ActiveSheet
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ActivedWorksheet">
            <summary>
            Gets the active worksheet of the workbook, or null if the active sheet
                is not a worksheet.
            </summary>
            <remarks>Use ActiveWorksheet if you know the sheet will be a worksheet.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a active worksheet in the workbook object.
            IWorksheet worksheet = workbook.ActivedWorksheet;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a active worksheet in the workbook object.
            Dim worksheet As IWorksheet = workbook.ActivedWorksheet
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ActivedSheetType">
            <summary>
            Gets current actived sheet's type.
            </summary>
            <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
             
            //Gets current actived sheet's type in the workbook object.
             SheetType sheetType = workbook.ActvedSheetType;
             
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets current actived sheet's type in the workbook object.
            Dim sheetType As SheetType = workbook.ActvedSheetType
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Colors">
            <summary>
             Returns an instance of IColorCollection which represents the color palette associated
                with a workbook.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.CreateBackup">
            <summary>
            Gets or sets whether to save a backup file.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.CultureInfo">
            <summary>
            Gets a specific culture.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.DisplayDrawingObjects">
            <summary>
            Gets or sets how ActiveX objects, OLE objects, and drawing objects appear in a window that contains the workbook.
            </summary>
            <remarks>Default is ShowAll.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.FileFormat">
            <summary>
            Specifies the file format with which to save a file.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.FullName">
            <summary>
            Gets or sets the full name (including the path) of the workbook.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.HasPassword">
            <summary>
            Gets the workbook whether has password.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.KeepChangeHistory">
            <summary>
            True if change tracking is enabled for the shared workbook. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Name">
            <summary>
             Gets the name (excluding the path) of the workbook.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Names">
            <summary>
             Gets the collection of worksheet specific defined names associated with
             this worksheet.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook =  ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a name object collection in the workbook object.
            INameCollection names = workbook.Names;
            
            //Add a define name in workbook.
            workbook.Names.Add("abc", "=Sheet1!$A$1");
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a name object collection in the workbook object.
            Dim names As INameCollection = workbook.Names
            
            'Add a define name in workbook.
            workbook.Names.Add("abc", "=Sheet1!$A$1")
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.NormalStyle">
            <summary>
            Gets normal style in the workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a normal style in the workbook object.
            IStyle normalStyle = workbook.NormalStyle;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a normal style in the workbook object.
            Dim normalStyle As IStyle = workbook.NormalStyle
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.PrecisionAsDisplayed">
            <summary>
            Gets or sets whether the precision as displayed mode is selected.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ProtectStructure">
            <summary>
             Gets or sets the property which determines whether the structure (number
                and order of worksheets) of a workbook may be changed.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ProtectWindows">
            <summary>
             Gets or sets the property which determines whether the windows of a workbook
               are protected from changes.
            </summary>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Readonly">
            <summary>
            Gets the property which determines whether the workbook is in Readonly Mode
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Sheets">
            <summary>
            Get a Sheets collection that represents all the worksheets in the specified workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
             
            //Gets a sheet collection in the workbook object.
            ISheetCollection sheets = workbook.Sheets;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a sheet collection in the workbook object.
            Dim sheets As ISheetCollection = workbook.Sheets
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Styles">
            <summary>
            Gets a Styles collection that represents all the styles in the specified workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection in the workbook object.
            IStyleCollection styles = workbook.Styles;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection in the workbook object.
            Dim styles As IStyleCollection = workbook.Styles
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.WindowInfo">
            <summary>
             Gets workbook specific window information.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets the workbook specific window information.
            IWorkbookWindowInfo windowInfo = workbook.WindowInfo;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets the workbook specific window information
            Dim windowInfo As IWorkbookWindowInfo = workbook.WindowInfo
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.WorkbookSetting">
            <summary>
            Represents all settings of the workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.ChartSheets">
            <summary>
            Gets a Sheets collection that represents all the chartsheets in the specified workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a chartsheet collection in the workbook object.
            IChartSheetCollection chartsheets = workbook.ChartSheets;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a chartsheet collection in the workbook object.
            Dim chartsheets As IChartSheetCollection = workbook.ChartSheets
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.Worksheets">
            <summary>
            Gets a Sheets collection that represents all the worksheets in the specified workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook =  ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection in the workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            [Visual Basic] 
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection in the workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.WriteReserved">
            <summary>
            Returns true if the workbook was saved with this option.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IWorkbook.WriteReservedBy">
            <summary>
             Returns the name of the user who saved the workbook with the write reserved option.
             the format is:MachineName\UserName,such as :Thinkpad-2345\john lee
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IStyleCollection">
            <summary>
            A collection of all the Style objects in the specified or active workbook.
            </summary>
            <example>
            [C#]
            How to get style collection in workbook object.
            <code>
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection from the workbook object.
            IStyleCollection styles = workbook.Styles;
            
            //Gets a style object by using zero-based index.
            IStyle style = styles[0];
            
            //Sets number format of the style object.
            style.NumberFormat = "0.00";
            
            //Adds bulit-in style to the style collection.
            styles.Add(BuiltInStyle.Accent1);
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection from the workbook object.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets a style object by using zero-based index.
            Dim style As IStyle = styles(0)
            
            'Sets number format of the style object.
            style.NumberFormat = "0.00"
            
            'Adds bulit-in style to the style collection.
            styles.Add(BuiltInStyle.Accent1)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Add(Acey.ExcelX.BuiltInStyle)">
            <summary>
            Creates a built-in style and adds it to the list of styles.but it's index is order by name.
            </summary>
            <param name="styleType">Built-in style</param>
            <returns>Return a new style.</returns>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Add(System.String)">
            <summary>
            Creates a new style and adds it to the list of styles.but it's index is order by his Name
            </summary>
            <remarks>
            <p>
            Adds a new style by specifying name to style collection.
            Notice: If exists in style collection then cover it. except name of style is Normal.
            If adds style that name is Normal, return Normal style of workbook,
            however the number of style collection in workbook don't change.
            </p>
            </remarks>
            <param name="name">The new style name.</param>
            <returns>Return a new style.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection from the workbook object.
            IStyleCollection styles = workbook.Styles; 
            
            //Creates a new style by using name of style.
            IStyle customStyle = styles.Add("Custom");
            
            //Specifies the style include Number.
            customStyle.IncludeNumber = true;
            
            //Sets number format of the style.
            customStyle.NumberFormat = "0.00";
            
            //Specifies the style whether include Alignment.
            customStyle.IncludeAlignment = false;
            
            //Specifies the style whether include Font.
            customStyle.IncludeFont = false;
            
            //Specifies the style whether include Border.
            customStyle.IncludeBorder = false;
            
            //Specifies the style whether include Patterns.
            customStyle.IncludePatterns = false;
            
            //Specifies the style whether include Protection.
            customStyle.IncludeProtection = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection from the workbook object.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Creates a new style by using name of style.
            Dim style As IStyle = styles.Add("Custom")
            
            'Specifies the style include Number.
            customStyle.IncludeNumber = True
            
            'Sets number format of the style.
            customStyle.NumberFormat = "0.00"
            
            'Specifies the style whether include Alignment.
            customStyle.IncludeAlignment = False
            
            'Specifies the style whether include Font.
            customStyle.IncludeFont = False
            
            'Specifies the style whether include Border.
            customStyle.IncludeBorder = False
            
            'Specifies the style whether include Patterns.
            customStyle.IncludePatterns = False
            
            'Specifies the style whether include Protection.
            customStyle.IncludeProtection = False
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is blank.</exception>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Contains(Acey.ExcelX.IStyle)">
            <summary>
            Returns whether exists in style object collection.
            </summary> 
            <param name="style">The specified style.</param>
            <returns>true if exists in style object collection, otherwise false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Contains(System.String)">
            <summary>
            Returns whether exists the name of style in style object collection.
            </summary>
            <param name="styleName">A name of style.</param>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Remove(Acey.ExcelX.IStyle)">
            <summary>
            Removes the specified style.
            </summary>        
            <remarks>For normal style can be removed. the result is false.</remarks>
            <param name="style">The specified style.</param>
            <returns>true if remove the specified style, otherwise false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IStyleCollection.Remove(System.String)">
            <summary> 
            Removes a style by name, if style is normal,then return false.
            </summary>
            <param name="styleName">A name of style.</param>
            <returns>true if remove the specify style, otherwise false.</returns>
        </member>
        <member name="P:Acey.ExcelX.IStyleCollection.Count">
            <summary>
            Gets the number of style objects in the collection.
            </summary>    
            <returns>The number of IStyle in IStyleCollection.</returns>
        </member>
        <member name="P:Acey.ExcelX.IStyleCollection.Item(System.Int32)">
            <summary>
            Returns the zero based named cell style specified by index.
            </summary>
            <param name="index">The zero-based index of the style to get.</param>
            <returns>The style at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>  is less than 0.-or-<paramref name="index"/>  is equal to or greater than IStyleCollection.Count.
            </exception>
        </member>
        <member name="P:Acey.ExcelX.IStyleCollection.Item(Acey.ExcelX.BuiltInStyle)">
            <summary>
            Returns the speicified built-in style.
            </summary>
            <param name="builtInStyle">Built-In Style</param>
            <returns>Style specifies built-in style. If donnot find it by name in style collection, then return null.</returns>
        </member>
        <member name="P:Acey.ExcelX.IStyleCollection.Item(System.String)">
            <summary>
            Returns the named cell style specified by name.
            </summary>
            <param name="name">Specifies the name.</param>
            <returns>Style specifies the name. If donnot find it by name in style collection, then return null.</returns>       
        </member>
        <member name="P:Acey.ExcelX.IStyleCollection.NormalStyle">
            <summary>
            Gets the default style.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IName">
            <summary>
            Specifies a defined name.
            </summary>
            <example>
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a name collection from the specified workbook object.
            INameCollection names = workbook.Names;
            
            //Gets a name object from the name collection by using name of name object.
            IName name = names["abc"];
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a name collection from the specified workbook object
            Dim names As INameCollection = workbook.Names
            
            'Gets a name object from the name collection by using name of name object.
            Dim name As IName = names("abc")
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IName.Delete">
            <summary>
            Deletes the defined name.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Gets a name object from the name collection by using name of name object.
            IName defineName = names["abc"];
            
            //Deletes the defined name.
            defineName.Delete();
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a name object from the name collection by using name of name object.
            Dim name As IName = names("abc")
            
            'Deletes the defined name.
            defineName.Delete()
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IName.Index">
            <summary>
            Returns the zero based index of the defined name in the INames collection
             of the workbook to which it belongs.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IName.Name">
            <summary>
            Gets or sets the name of the defined name.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Gets a name object from the name collection by using name of name object.
            IName defineName = names["abc"];
            
            //Gets the name of the defined name.
            string name = defineName.Name;
            
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a name object from the name collection by using name of name object.
            Dim name As IName = names("abc")
            
            'Gets the name of the defined name.
            Dim name As String = defineName.Name     
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IName.RefersTo">
            <summary>
            Gets or sets the formula which the defined name refers to.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
             //Gets a Name object collection in the Workbook.
             INameCollection names = workbook.Names;
             
             //Gets a name object from the name collection by using name of name object.
             IName defineName = names["abc"];
             
            //Sets the formula which the defined name refers to.
            defineName.RefersTo = "=Sheet1!$A$1";
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a name object from the name collection by using name of name object.
            Dim name As IName = names("abc")
            
            'Sets the formula which the defined name refers to.
            defineName.RefersTo = "=Sheet1!$A$1"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IName.Visible">
            <summary>
            Gets or sets the property which determines whether this defined name is visible.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IFont">
            <summary>
            Specifies a font and font formatting information.
            </summary>
            <example>
            How to get a font object.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets color of the font.
            font.Color = System.Drawing.Color.Red;
            
            //Sets the underline of the font.
            font.Underline = UnderlineStyle.Double;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets color of the font.
            font.Color = System.Drawing.Color.Red
            
            'Sets the underline of the font.
            font.Underline = UnderlineStyle.Double
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IFont.Equals(Acey.ExcelX.IFont)">
            <summary>
             Determines whether the specified IFont object is equal to the current IFont object.
            </summary>
            <param name="font">The IFont object to compare with the current IFont object.</param>
            <returns>True if the specified IFont object is equal to the current IFont object; otherwise false.</returns>
        </member>
        <member name="P:Acey.ExcelX.IFont.Bold">
            <summary>
            Gets or sets whether the font is bold.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the font is bold.
            font.Bold = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the font is bold.
            font.Bold = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Color">
            <summary>
            Gets or sets the primary color of the font. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the primary color of the font.
            font.Color = System.Drawing.Color.Red;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the primary color of the font.
            font.Color = System.Drawing.Color.Red
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Family">
            <summary>
            Gets or sets the font family this font belongs to.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the font family this font belongs to.
            font.Family = Acey.ExcelX.FontFamily.Roman;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the font family this font belongs to.
            font.Family = Acey.ExcelX.FontFamily.Roman
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.FontStyle">
            <summary> 
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFont.Italic">
            <summary>
            Gets or sets whether the font is italic.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the font is italic.
            font.Italic = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the font is italic.
            font.Italic = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Name">
            <summary>
            Gets or sets the name of this font.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the name of this font.
            font.Name = "Arial";
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the name of this font.
            font.Name = "Arial"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Script">
            <summary>
            Gets or sets whether superscript, subscript, or normal script is used.
            </summary>
            <remarks>Default is None.</remarks>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets subscript is used.
            font.Script = FontScript.SubScript;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets subscript is used.
            font.Script = FontScript.SubScript
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Size">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <remarks>Font size must be between 1 and 409 points.</remarks>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the size of the font.
            font.Size = 12;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the size of the font.
            font.Size = 12
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be between 1 and 409 points.</exception>
        </member>
        <member name="P:Acey.ExcelX.IFont.Strikeout">
            <summary>
            Gets or sets whether the font has strikethrough formatting applied.
            </summary>
            <remarks>Defalut is false.</remarks>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets whether the font has strikethrough formatting applied.
            font.Strikeout = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets whether the font has strikethrough formatting applied.
            font.Strikeout = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.Underline">
            <summary>
            Gets or sets the underline style.
            </summary>
            <remarks>Default is None.</remarks>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets cell format of cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font of cell format.
            IFont font = cellFormat.Font;
            
            //Sets the underline style of font.
            font.Underline = UnderlineStyle.Double;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font of cell format.
            Dim font As IFont = cellFormat.Font
            
            'Sets the underline style of font.
            font.Underline = UnderlineStyle.[Double]
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFont.DrawingFont">
            <summary>Gets the relative System.Drawing.Font object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IConditionalFormattingCollection">
            <summary>
            Specifies a IFormatConditionCollection object.
            </summary>
            <example>
            How to get IConditionalFormattingCollection object.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IFormatConditionCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattings = worksheet.ConditionalFormattings;
            
            //Adds a new condition formatting.
            IFormatConditionCollection formatConditions = conditionalFormattings.Add();
            
            //Create a range object by sepcified reference.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Add the condition of condition formatting at the specified location.
            formatConditions.Add(range, FormatConditionType.CellValue, OperatorType.Between, "=1", "=2");
            
            [Visual Basic]
            'Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IFormatConditionCollection object of the worksheet.
            Dim conditionalFormattings As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Adds a new condition formatting.
            Dim formatConditions As IFormatConditionCollection = conditionalFormattings.Add()
            
            'Create a range object by sepcified reference.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Add the condition of condition formatting at the specified location.
            formatConditions.Add(range, FormatConditionType.CellValue, OperatorType.Between, "=1", "=2")
            </code> 
            </example>
        </member>
        <member name="M:Acey.ExcelX.IConditionalFormattingCollection.Add">
            <summary>
            Creates a new IFormatConditionCollection object to the instance.
            </summary>
            <returns>A new IFormatConditionCollection object.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Adds a new IFormatConditionCollection object.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection.Add();
            
            //Gets a range object by using reference.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Creates a new Condition Formatting.
            IFormatCondition fc = formatConditionCollection.Add(range, FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=3");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Adds a new IFormatConditionCollection object.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection.Add()
            
            'Gets a range object by using reference.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Creates a new Condition Formatting.
            Dim fc As IFormatCondition = formatConditionCollection.Add(range, FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=3")
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IConditionalFormattingCollection.Count">
            <summary>
            Gets the number of condition formatting collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IConditionalFormattingCollection.Item(System.Int32)">
            <summary>
            Gets the specified the IFormatConditionCollection object by using zero-based index.
            </summary>
            <param name="index">zero-based index.</param>
            <returns>IFormatConditionCollection object.</returns>
            <example>
             This example shows how you might use this property:
            <code>
            [C#]
            string path = @"D:\CondictionFormatting.xls";
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(path);
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IFormatConditionCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattings = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattings[0];
            
            [Visual Basic]
            Dim path As String = "D:\CondictionFormatting.xls"
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open(path)
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IFormatConditionCollection object of the worksheet.
            Dim conditionalFormattings As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattings(0)
            </code> 
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to Count of this instance.</exception>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IPicture">
            <summary>
             Represents a picture object.
            </summary>
            <example>
            How to get a Picture object.
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Picture object collection in the Worksheet.
            IPictureCollection pictures = worksheet.Pictures;
            
            //Gets a Picture object by using zero-based index.
            IPicture picture = pictures[0];
            
             [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Picture object collection in the Worksheet. 
            Dim pictures As IPictureCollection = worksheet.Pictures
            
            'Gets a Picture object by using zero-based index.
            Dim picture As IPicture = pictures(0)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IPicture.Image">
            <summary>
            Gets a image of picture object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.PageOrder">
            <summary>
            Specifies the order for printing.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PageOrder.DownThenOver">
            <summary>
             Print pages by scanning vertically and then horizontally.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PageOrder.OverThenDown">
            <summary>
             Print pages by scanning horizontally and then vertically.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ITrendline">
            <summary>
            Represents a trendline in a chart. A trendline shows the trend, or direction, of data in a series.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic;
            
            //True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Sets trend line type.
            trendline.Type = TrendlineType.Logarithmic
            
            'True if the R-squared value of the trend line is displayed on the chart.
            trendline.DisplayRSquared = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ITrendline.Delete">
            <summary>
            Deletes the Trendline object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Deletes  the Trendline object.
            trendline.Delete();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Deletes the Trendline object.
            trendline.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Backward">
             <summary>
             Gets or sets the number of periods (or units on a scatter chart) that the trendline extends backward. The number must be between 0 and 0.5.
             </summary>
             <remarks>The number of periods must be between 0 and 0.5</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than 0 or greater than 0.5.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Border">
            <summary>
            Gets Acey.ExcelX.Drawing.ILine of the trendline.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Sets trend line type.
            Acey.ExcelX.Drawing.ILine line = trendline.Border;
            
            //Sets border's style of the Trendline object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the Trendline object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Trendline object.
            line.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Sets trend line type.
            Dim line As Acey.ExcelX.Drawing.ILine = trendline.Border
            
            'Sets border's style of the Trendline object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the Trendline object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Trendline object.
            line.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.DataLabel">
            <summary>
            Represents the DataLabels object for the specified a Trendline object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            ITrendlineCollection trendlines = series.TrendLines;
            
            //Gets a Trendline object by using zero-based index.
            ITrendline trendline = trendlines[0];
            
            //Gets a DataLabels object for the specified a Trendline object.
            IDataLabel dataLabel = trendline.DataLabel;
            
            //Sets text of the DataLabels object.
            dataLabel.Text = "Sales";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a Acey.ExcelX.Charts.ITrendline object collection of the Series object.
            Dim trendlines As ITrendlineCollection = series.TrendLines
            
            'Gets a Trendline object by using zero-based index.
            Dim trendline As ITrendline = trendlines(0)
            
            'Gets a DataLabels object for the specified a Trendline object.
            Dim dataLabel As IDataLabel = trendline.DataLabel
            
            'Sets text of the DataLabels object.
            dataLabel.Text = "Sales"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.DisplayEquation">
            <summary>
            Represents if the equation for the trendline is displayed on the chart (in the same data label as the R-squared value). Setting this property to True automatically turns on data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.DisplayRSquared">
            <summary>
            Represents if the R-squared value of the trendline is displayed on the chart (in the same data label as the equation). Setting this property to True automatically turns on data labels.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Forward">
            <summary>
            Gets or sets the number of periods (or units on a scatter chart) that the trendline extends forward.  Must be greater than and equal to zero.
            </summary>
            <remarks>The number of periods must be greater than and equal to zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Intercept">
            <summary>
            Returns or sets the point where the trendline crosses the value axis.
            </summary>
            <remarks>Intercept should be greater than or equal to zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 0. </exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.NameIsAuto">
            <summary>
            Indicates if name is default.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.InterceptIsAuto">
            <summary>
            True if the point where the trend line crosses the value axis is automatically determined by the regression.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Name">
            <summary>
            Gets the name of the trendline.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Order">
            <summary>
            Gets or sets the trendline order (an integer greater than 1) when the trendline type is Polynomial. The order must be between 2 and 6.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than 2 or greater than 6.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Period">
             <summary>
             Gets or sets the period for the moving-average trendline. Must be greater than or equal to 2 and less than the number of points in the source data series.
             </summary>        
             <remarks>Moving Average must have a period that greater than or equal to 2 and less than or equal to is less than the number of points in the source data series.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The number must be greater than or equal to 2 and less than the number of points in the source data series.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ITrendline.Type">
            <summary>
            Gets or sets the trendline type.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IPlotArea">
            <summary>
            Specifies chart's plot area.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a PlotArea object of the Chart object.
            IPlotArea plotArea = chart.PlotArea;
             
            //Gets border of the PlotArea object.
            Acey.ExcelX.Drawing.ILine line = plotArea.Border;
            
            //Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the PlotArea object.
            line.Color = Color.Blue;
            
            //Gets area of the PlotArea object.
            Acey.ExcelX.Drawing.IArea area = plotArea.Area;
            
            //Sets forefound color of the area of the PlotArea object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a PlotArea object of the Chart object.
            Dim plotArea As IPlotArea = chart.PlotArea
            
            'Gets border of the PlotArea object.
            Dim line As Acey.ExcelX.Drawing.ILine = plotArea.Border
            
            'Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the PlotArea object.
            line.Color = Color.Blue
            
            'Gets area of the PlotArea object.
            Dim area As Acey.ExcelX.Drawing.IArea = plotArea.Area
            
            'Sets forefound color of the area of the PlotArea object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.Border">
            <summary>
            Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.Area">
            <summary>
            Returns a Acey.ExcelX.Drawing.IArea object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.Height">
            <summary>
            Gets or sets the height of plot area.
            </summary>
            <remarks>Height is in units of 1/4000 of the chart area. </remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.Width">
            <summary>
            Gets or sets the width of plot area.
            </summary>
            <remarks>Width is in units of 1/4000 of the chart area.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.X">
            <summary>
            Gets or sets the x coordinate of the upper left corne in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IPlotArea.Y">
            <summary>
            Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IDropBars">
            <summary>
            Represents the up/down bars in a chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a DropBars object of the Series object.
            IDropBars dropBars = series.DownBars;
            
            //Sets border's style of the Series object.
            Acey.ExcelX.Drawing.ILine line = dropBars.Border;
            
            //Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            line.Color = Color.Blue;      
            
            //Gets a Area object of the DropBars object.
            Acey.ExcelX.Drawing.IArea area = dropBars.Area;
            
            //Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a DropBars object of the Series object.
            Dim dropBars As IDropBars = series.DownBars
            
            'Sets border's style of the Series object.
            Dim line As Acey.ExcelX.Drawing.ILine = dropBars.Border
            
            'Sets border's weight of the Series object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            line.Color = Color.Blue
            
            'Gets a Area object of the DropBars object.
            Dim area As Acey.ExcelX.Drawing.IArea = dropBars.Area
            
            'Sets foreground color of the Area object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDropBars.Border">
            <summary>
            Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IDropBars.Area">
            <summary>
            Returns a Acey.ExcelX.Drawing.IArea object of the object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartCollection">
             <summary>
             Specifies a collection of Acey.ExcelX.Charts.Chart object.
             </summary>
            <example>
              How to get a collection of chart objects.
              <code>
              [C#]
              //Gets a Workbook object by reading a excel file.
              IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Adds a chart to the collection.
             IChart chart = charts.Add(ChartType.ColumnClustered, 7, 4, 20, 12);
             
             //Creates a Range object.
             IRange range = worksheet.Cells.CreateRange("=Sheet1!$A$1:$F$3");
             
             //Sets the source data range for the chart.
             chart.SetSourceData(range, RowCol.Rows);
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Adds a chart to the collection.
             Dim chart As IChart = charts.Add(ChartType.ColumnClustered, 7, 4, 20, 12)
             
             'Creates a Range object.
             Dim range As IRange = worksheet.Cells.CreateRange("=Sheet1!$A$1:$F$3")
             
             'Sets the source data range for the chart.
             chart.SetSourceData(range, RowCol.Rows)
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChartCollection.Add(Acey.ExcelX.Charts.ChartType,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Adds a chart to the collection.
             </summary>
             <param name="chartType">Chart type.</param>
             <param name="upperLeftRow"> Upper left row index.</param>
             <param name="upperLeftColumn">Upper left column index.</param>
             <param name="lowerRightRow">Lower right row index.</param>
             <param name="lowerRightColumn">Lower right column index.</param>
             <returns>A Chart object.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">upperLeftRow or upperLeftColumn or lowerRightRow or lowerRightColumn is out of range.</exception>
             <exception cref="T:System.ArgumentException">upperLeftRow is greater than lowerRightRow. -or- upperLeftColumn is greater than lowerRightColumn.</exception>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a Workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a Cell object using cell name.
             ICell cell = worksheet.Cells["A1"];
             //Sets value to the Cell object.
             cell.Value = "Quarter 1";
             
             //Gets a Cell object using cell name.
             cell = worksheet.Cells["A2"];
             //Sets value to the Cell object.
             cell.Value = 500;
             
             //Gets a Cell object using cell name.
             cell = worksheet.Cells["A3"];       
             //Sets value to the Cell object.
             cell.Value = 100;
             
             //Gets a Cell object using cell name.
             cell = worksheet.Cells["B1"];
             //Sets value to the Cell object.
             cell.Value = "Quarter 2";
             
             //Gets a Cell object using cell name.
             cell = worksheet.Cells["B2"];
             //Sets value to the Cell object.
             cell.Value = 800;
             
             //Gets a Cell object using cell name.
             cell = worksheet.Cells["B3"];
             //Sets value to the Cell object.
             cell.Value = 600;
             
             //Gets a Chart collection of the Worksheet object.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a new Chart object by adding the specified chart type and position.
             IChart chart = charts.Add(ChartType.ColumnClustered, 7, 4, 20, 12);
             
             //Gets a Range object.
             IRange range = worksheet.Cells.CreateRange("=Sheet1!$A$1:$B$3");
             
             //Sets source data for the Chart object.
             chart.SetSourceData(range, RowCol.Rows);
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
             'Gets a Worksheet object by using zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a Cell object using cell name.
             Dim cell As ICell = worksheet.Cells("A1")
             
             'Sets value to the Cell object.
             cell.Value = "Quarter 1"
             
             'Gets a Cell object using cell name.
             cell = worksheet.Cells("A2")
             
             'Sets value to the Cell object.
             cell.Value = 500
             
             'Gets a Cell object using cell name.
             cell = worksheet.Cells("A3")
             
             'Sets value to the Cell object.
             cell.Value = 100
             
             'Gets a Cell object using cell name.
             cell = worksheet.Cells("B1")
             
             'Sets value to the Cell object.
             cell.Value = "Quarter 2"
             
             'Gets a Cell object using cell name.
             cell = worksheet.Cells("B2")
             
             'Sets value to the Cell object.
             cell.Value = 800
             
             'Gets a Cell object using cell name.
             cell = worksheet.Cells("B3")
             
             'Sets value to the Cell object.
             cell.Value = 600
             
             'Gets a Chart collection of the Worksheet object.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a new Chart object by adding the specified chart type and position.
             Dim chart As IChart = charts.Add(ChartType.ColumnClustered, 7, 4, 20, 12)
             
             'Gets a Range object.
             Dim range As IRange = worksheet.Cells.CreateRange("=Sheet1!$A$1:$B$3")
             
             'Sets source data for the Chart object.
             chart.SetSourceData(range, RowCol.Rows)
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChartCollection.Clear">
             <summary>
             Clears all charts.
             </summary>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
              IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Clears all charts.
             charts.Clear();
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Clears all charts.
             charts.Clear()
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChartCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a chart at the specific zero-based index.
            </summary>
            <param name="index">The specific zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 and greater than or equal to IChartCollection.Count.</exception>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Removes a chart at the specific zero-based index.
            charts.RemoveAt(1);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Removes a chart at the specific zero-based index.
            charts.RemoveAt(1)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartCollection.Count">
            <summary>
            Gets the number of Acey.ExcelX.Charts.Chart object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartCollection.Item(System.Int32)">
            <summary>
            Gets the Acey.ExcelX.Charts.Chart object at the specified index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>The object at the pecified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 and greater than or equal to IChartCollection.Count.</exception>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Set type of the Chart object.
            chart.ChartType = ChartType.Line;
            
             //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Set type of the Chart object.
            chart.ChartType = ChartType.Line
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartCollection.Item(System.String)">
             <summary>
             Gets the Acey.ExcelX.Charts.Chart object by the specified name.
             </summary>
             <param name="name">The chart name</param>
             <returns>The Chart object</returns>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
              IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts["Chart1"];
             
             //Set type of the Chart object.
             chart.ChartType = ChartType.Line;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts("Chart1")
             
             'Set type of the Chart object.
             chart.ChartType = ChartType.Line
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="T:Acey.ExcelX.NumberFormat">
            <summary> Specifies all of built-in number format.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.General">
            <summary>  "General";
            </summary> 
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Number1">
            <summary> "0";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Number2">
            <summary> "0.00";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Number3">
            <summary> "#,##0";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Number4">
            <summary> "#,##0.00";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency1">
            <summary> "$#,##0;$-#,##0"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency2">
            <summary>  "$#,##0;[Red]$-#,##0"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency3">
            <summary>  "$#,##0.00;$-#,##0.00"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency4">
            <summary> "$#,##0.00;[Red]$-#,##0.00" 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency5">
            <summary> "$#,##0_);\($#,##0)"  
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency6">
            <summary> "$#,##0_);[Red]($#,##0)"   
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency7">
            <summary> "$#,##0.00_);($#,##0.00)"   
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency8">
            <summary> "$#,##0.00_);[Red]($#,##0.00)"   
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency9">
            <summary>  _ $* #,##0_ ;_ $* -#,##0_ ;_ $* "-"_ ;_ @_  
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Currency10">
            <summary>   "_ $* #,##0.00_ ;_ $* -#,##0.00_ ;_ $* "-"??_ ;_ @_ " 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting1">
            <summary> "#,##0;-#,##0"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting2">
            <summary> "#,##0;[Red]-#,##0"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting3">
            <summary> "#,##0.00;-#,##0.00"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting4">
            <summary> "#,##0.00;[Red]-#,##0.00"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting5">
            <summary>  "_ * #,##0_ ;_ * -#,##0_ ;_ * "-"_ ;_ @_ "   
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Accounting6">
            <summary>  "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * "-"??_ ;_ @_ " 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date1">
            <summary> "yyyy-m-d";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date2">
            <summary> "d-mmm-yy"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date3">
            <summary> "d-mmm"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date4">
            <summary> "mmm-yy"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date5">
            <summary> "yyyy年m月";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date6">
            <summary> "m月d日"  
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date7">
            <summary>  "m月d日"; 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date8">
            <summary> "m-d-yy" 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date9">
            <summary> "yyyy年m月d日"; 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date10">
            <summary> "yyyy年m月";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date11">
            <summary> "yyyy年m月";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date12">
            <summary> "m月d日";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date13">
            <summary> "yyyy年m月";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date14">
            <summary> "m月d日";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date15">
            <summary> "m月d日"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date16">
            <summary> "yyyy年m月";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date17">
            <summary> "m月d日";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Date18">
            <summary> "m/d/yy h:mm"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time1">
            <summary> "h:mm AM/PM"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time2">
            <summary> "h:mm:ss AM/PM"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time3">
            <summary> "h:mm"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time4">
            <summary> "h:mm:ss"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time6">
            <summary> "h时mm分"; 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time7">
            <summary>  "h时mm分ss秒";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time8">
            <summary> "上午/下午h时mm分"; 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time9">
            <summary> "上午/下午h时mm分ss秒";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time10">
            <summary> "mm:ss"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time11">
            <summary> "[h]:mm:ss"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time12">
            <summary> "mm:ss.0"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time13">
            <summary> "上午/下午h时mm分";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Time14">
            <summary> "上午/下午h时mm分ss秒";
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Percent1">
            <summary> "0%"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Percent2">
            <summary> "0.00%"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Fraction1">
            <summary> "# ?/?"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Fraction2">
            <summary> "# ??/??"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Science1">
            <summary> "0.00E+00"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Science2">
            <summary> "##0.0E+00"
            </summary>
        </member>
        <member name="P:Acey.ExcelX.NumberFormat.Text">
            <summary> "@"
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IStyle">
            <summary>
             Represents a style.
            </summary>
            <example>
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection from the workbook object.
            IStyleCollection styles = workbook.Styles;
            
            //Gets a style by name of style from the style collection.
            IStyle normalStyle = styles["Normal"];
            
            //Sets font's name of the style object.
            normalStyle.Font.Name = "Arial";
            
            //Sets font's size of the style object.
            normalStyle.Font.Size = 10;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection from the workbook object.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets a style by name of style from the style collection.
            Dim normalStyle As IStyle = styles("Normal")
            
            'Sets font's name of the style object.
            normalStyle.Font.Name = "Arial"
            
            'Sets font's size of the style object.
            normalStyle.Font.Size = 10
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IStyle.Copy(Acey.ExcelX.IStyle)">
            <summary>
            Copies style from another style object.
            </summary>
            <param name="style">Source Style object.</param>
            <remarks>This method does not copy the name of the style.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyleCollection styles = workbook.Styles;
            
            //Gets source style.
            IStyle source = styles["Normal"];
            
            //Gets destination style.
            IStyle dest = styles.Add("Custom");
            
            //Copies style from source.
            dest.Copy(source);
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets source style.
            Dim source As IStyle = styles("Normal")
            
            'Gets destination style.
            Dim dest As IStyle = styles.Add("Custom")
            
            'Copies style from source.
            dest.Copy(source)
            </code> 
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/>is null.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IStyle.Delete">
            <summary>
            Deletes the Style object.
            </summary>
            <remarks>Can delete any style except normal style.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection of the workbook.
            IStyleCollection styles = workbook.Styles;
            
            //Gets a style by using style name.
            IStyle style = styles["Percent"]; 
            
            //Deletes the style.
            style.Delete();
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection of the workbook.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets a style by using style name.
            Dim style As IStyle = styles("Percent")
            
            'Deletes the style.
            style.Delete()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IStyle.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>
            设置当前样式的边框。
            </summary>
            <param name="borders">边框成员。</param>
            <param name="lineStyle">边框样式。</param>
        </member>
        <member name="M:Acey.ExcelX.IStyle.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            设置当前样式的边框。
            </summary>
            <param name="borders">边框成员。</param>
            <param name="lineStyle">边框样式。</param>
            <param name="lineColor">边框颜色。</param>
        </member>
        <member name="P:Acey.ExcelX.IStyle.AddIndent">
            <summary>
            Gets or sets the property which controls indentation of text when horizontal
             or vertical alignment is set to distributed.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets the normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.AddIndent = true;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets the normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.AddIndent = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.BackgroundColor">
            <summary>
            Gets or sets the background color of the fill pattern.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the background color of style.
            style.BackgroundColor = System.Drawing.Color.Yellow;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the background color of style.
            style.BackgroundColor = System.Drawing.Color.Yellow
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Borders">
            <summary>
            Gets border of the current Style object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Gets a borders.
            IBorders borders = style.Borders; 
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Gets a borders.
            Dim borders As IBorders = style.Borders
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Font">
            <summary>
            Gets font of the current Style object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Gets font of the style.
            IFont font = style.Font;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Gets font of the style.
            Dim font As IFont = style.Font
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the fill pattern.
            Note:only if cell style's Pattern must not be None or Solid,then this property will take effect.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the foreground color of the fill pattern.
            style.ForegroundColor = System.Drawing.Color.Blue;
            style.Pattern = Pattern.ThinDiagonalCrosshatch;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the foreground color of the fill pattern.
            style.ForegroundColor = System.Drawing.Color.Blue
            style.Pattern = Pattern.ThinDiagonalCrosshatch;
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.FormulaHidden">
            <summary>
            Gets or sets whether the hidden protection property.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.FormulaHidden = true;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.FormulaHidden = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <remarks>Default is general.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the horizontal alignment.
            style.HorizontalAlignment = HorizAlign.Left;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the horizontal alignment.
            style.HorizontalAlignment = HorizAlign.Left
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludeAlignment">
            <summary>
             Gets or sets the property which specifies whether this named cell style includes
             the AddIndent, HorizontalAlignment, IndentLevel, Orientation, VerticalAlignment
             andWrapText properties
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludeAlignment = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludeAlignment = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludeBorder">
            <summary>
            Gets or sets the property which specifies whether this named cell style includes
             the properties associated with the Borders property.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludeBorder = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludeBorder = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludeFont">
            <summary>
              Gets or sets the property which specifies whether this named cell style includes
              the properties associated with the Font property.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludeFont = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludeFont = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludeNumber">
            <summary>
             Gets or sets the property which specifies whether this named cell style includes
             the NumberFormat property.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludeNumber = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludeNumber = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludePatterns">
            <summary>
            Gets or sets the property which specifies whether this named cell style includes
            the properties associated with the Interior property.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludePatterns = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludePatterns = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IncludeProtection">
            <summary>
            Gets or sets the property which specifies whether this named cell style includes
            the FormulaHidden and Lockedproperties.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            style.IncludeProtection = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            style.IncludeProtection = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IndentLevel">
            <summary>
            Gets or sets the text indentation level. MUST be less than or equal to 15.
            </summary>
            <remarks>Default is 0.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the text indentation level.
            style.IndentLevel = 5;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the text indentation level.
            style.IndentLevel = 5
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.IsBulitInStyle">
            <summary>
            Gets whether the style is bulitIn.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            bool isBulitIn = style.IsBulitInStyle;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            Dim isBulitIn As Boolean = style.IsBulitInStyle
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Locked">
            <summary>
            Gets or sets whether the locked protection property.
            </summary>
            <remarks>Default is true.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets whether the locked protection property.
            style.Locked = false;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets whether the locked protection property.
            style.Locked = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Name">
            <summary>
             Gets the name of the Style object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Gets the style name.
            string name = style.Name;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Gets the style name.
            Dim name As String = style.Name
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.NumberFormat">
            <summary>
            Gets or sets a number format.<see cref="P:Acey.ExcelX.IStyle.NumberFormat"/>BulitInNumberFormat class provides the bulitin numberformats.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets a number format.
            style.NumberFormat = BulitInNumberFormat.Number2;//"0.00";
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets a number format.
            style.NumberFormat = BulitInNumberFormat.Number2;//"0.00"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Orientation">
            <summary>
            Gets or sets the text rotation.
            </summary>
            <remarks>The number must be between -90 and 90.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the text rotation.
            style.Orientation = 30;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the text rotation.
            style.Orientation = 30
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">The number is less than -90 or greater than 90.</exception>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Pattern">
            <summary>
            Gets or sets the fill pattern.
            </summary>
            <remarks>Default is none.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the fill pattern.
            style.Pattern = Pattern.Solid;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the fill pattern.
            style.Pattern = Pattern.Solid
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.ShrinkToFit">
            <summary>
            Gets or sets whether a cell is shrink-to-fit.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets a cell is shrink-to-fit.
            style.ShrinkToFit = true;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets a cell is shrink-to-fit.
            style.ShrinkToFit = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.TextDirection">
            <summary>
            Gets or sets the reading order.
            </summary>
            <remarks>Default is context.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the reading order.
            style.TextDirection = TextDirectionType.LeftToRight;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the reading order.
            style.TextDirection = TextDirectionType.LeftToRight
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <remarks>Default is center.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets the vertical alignment.
            style.VerticalAlignment = VertAlign.Bottom;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets the vertical alignment.
            style.VerticalAlignment = VertAlign.Bottom
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.WrapText">
            <summary>
            Gets or sets whether cell text is wrapped.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Create a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets normal style of the workbook.
            IStyle style = workbook.NormalStyle;
            
            //Sets cell text is wrapped.
            style.WrapText = true;
            
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets normal style of the workbook.
            Dim style As IStyle = workbook.NormalStyle
            
            'Sets cell text is wrapped.
            style.WrapText = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IStyle.Workbook">
            <summary>
            Gets the Workbook which be Contained
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IRangeCollection">
            <summary>
            Encapsulates a collection of IRange objects.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRangeCollection.Count">
            <summary>
            Gets the number of the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRangeCollection.Item(System.Int32)">
            <summary>
            Gets a IRange object by using zero-based index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns>A Range object at the index.</returns>
        </member>
        <member name="T:Acey.ExcelX.IFormatConditionCollection">
            <summary>
            Specifies a IFormatCondition object collection.
            </summary>
            <example>
            How to get a IFormatCondition object collection。
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a Condition Formatting by using zero-based index.
            IFormatCondition formatCondition = formatConditionCollection[0];
            
            //Sets the operator to be used by the conditional format.
            formatCondition.Operator = OperatorType.Between;
            
            //Sets the first formual to the Condition Formatting.
            formatCondition.Formula1 = "=1";
            
            //Sets the second formual to the Condition Formatting.
            formatCondition.Formula2 = "=10";
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a Condition Formatting by using zero-based index.
            Dim formatCondition As IFormatCondition = formatConditionCollection(0)
            
            'Sets the operator to be used by the conditional format.
            formatCondition.Operator = OperatorType.Between;
            
            'Sets the first formual to the Condition Formatting.
             formatCondition.Formula1 = "=1"
             
            'Sets the second formual to the Condition Formatting.
            formatCondition.Formula2 = "=10"
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.Add(Acey.ExcelX.IRange,Acey.ExcelX.FormatConditionType,Acey.ExcelX.OperatorType,System.String,System.String)">
            <summary>
            Adds a condiction formatting to this collection. 
            </summary>
            <param name="range">The specified range.</param>
            <param name="type">The type of condiction formatting.</param>
            <param name="operatorType">The operator type of condiction formatting.</param>
            <param name="formual1">The first formual.</param>
            <param name="formual2">The second formual.</param>
            <returns>A condiction formatting.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a range by using reference.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a range to the IFormatConditionCollection object.
            formatConditionCollection.Add(range, FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=2");
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a range by using reference.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a range to the IFormatConditionCollection object.
            formatConditionCollection.Add(range, FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=2")
            </code>
            </example>
            <seealso cref="T:Acey.ExcelX.IFormatCondition"/>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.AddCondition(Acey.ExcelX.FormatConditionType,Acey.ExcelX.OperatorType,System.String,System.String)">
            <summary>
            Adds a new condition formatting to this collection.
            </summary>
            <remarks>Only adds a new condition formatting, range of condition formatting is not change.</remarks>
            <param name="type">The type of condiction formatting.</param>
            <param name="operatorType">The operator type of condiction formatting.</param>
            <param name="formual1">The first formual.</param>
            <param name="formual2">The second formual.</param>
            <returns>A condiction formatting.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Adds a new condition formatting to this collection.
            formatConditionCollection.AddCondition(FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=2");
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Adds a new condition formatting to this collection.
            formatConditionCollection.AddCondition(FormatConditionType.CellValue, OperatorType.NotBetween, "=1", "=2")
            </code>
            </example>
            <seealso cref="T:Acey.ExcelX.IFormatCondition"/>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.AddRange(Acey.ExcelX.IRange)">
            <summary>
            Adds range to this instance.
            </summary>
            <param name="range">The range will be added.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a range by using reference.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a range to the IFormatConditionCollection object.
            formatConditionCollection.AddRange(range);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a range by using reference.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a range to the IFormatConditionCollection object.
            formatConditionCollection.AddRange(range)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">range is null.</exception>
            <seealso cref="T:Acey.ExcelX.IRange"/>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.GetRange(System.Int32)">
             <summary>
             Gets the cells to which the conditional formatting rules apply by using zero-based index.
             </summary>
             <param name="index">Zero-based index.</param>
             <returns>The cells to which the conditional formatting rules apply.</returns>
             <remarks>
             A condition formatting rules can apply many range.
             </remarks>
             <example>
             How to get a IFormatCondition object.
             <code>
             [C#]
             string path = @"D:\CondictionFormatting.xls";
             //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(path);
             
             //Gets a worksheet by using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a IFormatConditionCollection object of the worksheet.
             IConditionalFormattingCollection conditionalFormattings = worksheet.ConditionalFormattings;
             
             //Gets a IFormatConditionCollection object by using zero-based index.
             IFormatConditionCollection formatConditionCollection = conditionalFormattings[0];
             
             //Gets a IRange object by using zero-based index.
             IRange range = formatConditionCollection.GetRange(0);
             
             [Visual Basic]
             </code> 
            </example>
             <seealso cref="T:Acey.ExcelX.IRange"/>
             <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to RangeCount of the instance.</exception>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.RemoveCondition(System.Int32)">
            <summary>
            Removes condition format of the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <example>
            <code>
            [C#]
             string path = @"D:\CondictionFormatting.xls";
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(path);
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IFormatConditionCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattings = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattings[0];
            
            //Removes condition format of the specified index.
            formatConditionCollection.RemoveCondition(0);
            
            [Visual Basic]
            Dim path As String = "D:\CondictionFormatting.xls"
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open(path)
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IFormatConditionCollection object of the worksheet.
            Dim conditionalFormattings As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattings(0)
            
            'Gets a IRange object by using zero-based index.
            Dim range As IRange = formatConditionCollection.GetRange(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to Count of this instance.</exception>
        </member>
        <member name="M:Acey.ExcelX.IFormatConditionCollection.RemoveRange(System.Int32)">
            <summary>
            Removes range of the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
             
            //Removes range of the specified index.
            formatConditionCollection.RemoveRange(0);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Removes range of the specified index.
            formatConditionCollection.RemoveRange(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to RangeCount of this instance.</exception>
        </member>
        <member name="P:Acey.ExcelX.IFormatConditionCollection.Count">
            <summary>
            Gets the number of IFormatCondition object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFormatConditionCollection.RangeCount">
            <summary>
            Gets the number of range that the conditional formatting rules apply.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFormatConditionCollection.Item(System.Int32)">
             <summary>
             Gets a IFormatCondition object by zero-based index.
             </summary>
             <param name="index">Zero-based index.</param>
             <returns>A IFormatCondition object.</returns>
             <example>
             How to get a IFormatCondition object.
             <code>
             [C#]
             string path = @"d:\CondictionFormatting.xls";
             //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(path);
             
             //Gets a worksheet by using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a IFormatConditionCollection object of the worksheet.
             IConditionalFormattingCollection conditionalFormattings = worksheet.ConditionalFormattings;
             
             //Gets a IFormatConditionCollection object by using zero-based index.
             IFormatConditionCollection formatConditionCollection = conditionalFormattings[0];
             
             //Gets a IFormatCondition object by using zero-based index.
             IFormatCondition formatCondition = formatConditionCollection[0];
             
             [Visual Basic]
             Dim path As String = "d:\CondictionFormatting.xls"
             'Creates a workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open(path)
             
             'Gets a worksheet by using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a IFormatConditionCollection object of the worksheet.
             Dim conditionalFormattings As IConditionalFormattingCollection = worksheet.ConditionalFormattings
             
             'Gets a IFormatConditionCollection object by using zero-based index.
             Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattings(0)
             
             'Gets a IFormatCondition object by using zero-based index.
             Dim formatCondition As IFormatCondition = formatConditionCollection(0)
             </code> 
            </example>       
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to Count of the instance.</exception>
            <seealso cref="T:Acey.ExcelX.IFormatCondition"/>
        </member>
        <member name="T:Acey.ExcelX.SheetType">
            <summary>
             Specifies the worksheet type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetType.Worksheet">
            <summary>
             Specifies a normal worksheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetType.Chart">
            <summary>
            Specifies a chart sheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Acey.ExcelX.PageOrientation">
            <summary>
             Specifies the page orientation when the worksheet is printed.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PageOrientation.Landscape">
            <summary>
             Portrait mode.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PageOrientation.Portrait">
            <summary>
             Landscape mode.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.SummaryRow">
            <summary>
            Specifies the location of the summary rows in the outline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SummaryRow.SummaryAbove">
            <summary>
            The summary row will be positioned above the detail rows in the outline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SummaryRow.SummaryBelow">
            <summary>
            The summary row will be positioned below the detail rows in the outline.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IColumn">
            <summary>
            Represents a single column in a worksheet.
            </summary>
            <example>
            How to get a single column from a collection of column objects.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection from the worksheet object.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using zero-based column index.
            IColumn column = columns[0];
            
            //Hides the column.
            column.IsHidden = true;
            
            //Gets a column using zero-based column index.
            column = columns[1];
            
            //Sets the column width in unit of  charaters.
            column.Width = 20;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(0)
            
            'Hides the column.
            column.IsHidden = True
            
            'Gets a column using zero-based column index.
            column = columns(1)
            
            'Sets the column width in unit of  charaters.
            column.Width = 20
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IColumn.ApplyStyle(Acey.ExcelX.IStyle)">
            <summary>
            Applies formattings for a whole column. 
            </summary>
            <param name="style">Specified style.</param>
            <remarks>Once the column applies specify style, when the style is changed, 
             The column format is changed following the style.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column using zero-based column index.
            IColumn column = worksheet.Columns[0];
            
            //Gets a style using style name.
            IStyle style = workbook.Styles["Percent"];
            
            //Applies the specified style to entire column object.
            column.ApplyStyle(style);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = worksheet.Columns(0)
            
            'Gets a style using style name.
            Dim style As IStyle = workbook.Styles("Percent")
            
            'Applies the specified style to entire column object.
            column.ApplyStyle(style)
            </code>
            </example> 
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/> is null for reference types.</exception>
        </member>
        <member name="M:Acey.ExcelX.IColumn.Clear">
            <summary>
            Clears data and formatting.
            </summary>
            <exception cref="T:System.InvalidOperationException">Change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IColumn.ClearContent">
            <summary>
            Clears data and formual of column object.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a column collection.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using zero-based column index.
            IColumn column = columns[0];
             
            //Clears all data of entire column.
            column.ClearContent();
            
            [Visual Basic]
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(0)
            
            'Clears all data of entire column.
            column.ClearContent()
            </code>
            </example>
             <exception cref="T:System.InvalidOperationException">Change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IColumn.ClearFormats">
            <summary>
            Clears all formatting for a whole column.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column collection.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using zero-based column index.
            IColumn column = columns[0];
             
            //Clears all format of entire column.
            column.ClearFormats();
            
            [Visual Basic]
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(0)
            
            'Clears all format of entire column.
            column.ClearFormats()
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">Change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IColumn.Copy(Acey.ExcelX.IColumn)">
            <summary>
            Copies data and format from the Specified column.
            </summary>
            <param name="source">Specified column.</param>
            <remarks>Once changes style of associate with the column, will change format of associate with style.
            </remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a column collection.
            IColumnCollection columns = worksheet.Columns;
            
            //Gets a column using zero-based column index.
            IColumn source = columns[0];
             
            //Gets dest column.
            IColumn dest = columns[1];
            
            //Copies data and format from source column.
            dest.Copy(source);
            
            [Visual Basic]
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim source As IColumn = columns(0)
            
            'Gets dest column.
            Dim dest As IColumn = columns(1)
            
            'Copies data and format from source column.
            dest.Copy(source)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null for reference types.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IColumn.CopyFormat(Acey.ExcelX.IColumn)">
             <summary>
             Copies formatting of the specified Column object.
             </summary>
             <param name="source">Source Column object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null for reference types.</exception>
        </member>
        <member name="M:Acey.ExcelX.IColumn.GetStyle">
            <summary>
            Gets the style of the column.
            </summary>
            <returns>Gets style of associate with the column.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column using zero-based column index.
            IColumn column = worksheet.Columns[0];
            
            //Gets a style from the specified column object.
            IStyle style = column.GetStyle();
            
            [Visual Basic]
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = worksheet.Columns(0)
            
            'Gets a style from the specified column object.
            Dim style As IStyle = column.GetStyle()
            </code>
            </example> 
        </member>
        <member name="M:Acey.ExcelX.IColumn.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
        </member>
        <member name="M:Acey.ExcelX.IColumn.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
            <param name="lineColor">Line color.</param>
        </member>
        <member name="P:Acey.ExcelX.IColumn.CellFormat">
            <summary>
            Gets format of the entire Column. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Column object collection in the Worksheet.
            IColumnCollection colunmns = worksheet.Columns;
            
            //Gets a Column object by using zero-based index.
            IColumn column = colunmns[1];
            
            //Gets format of the Column object.
            ICellFormat cellFormat = column.CellFormat;
            
            //Sets fill pattern of the CellFormat object.
            cellFormat.Pattern = Pattern.Gray125;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim columns As IColumnCollection = worksheet.Columns
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = columns(1)
            
            'Gets format of the Column object.
            Dim cellFormat As ICellFormat = column.CellFormat
            
            'Sets fill pattern of the CellFormat object.
             cellFormat.Pattern = Pattern.Gray125
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumn.Index">
            <summary>
            Gets the zero-based index of the column.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column using zero-based column index.
            IColumn column = worksheet.Columns[0];
            
            //Gets the zero-based index of the column.
            int index = column.Index;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = worksheet.Columns(0)
            
            'Gets the zero-based index of the column.
            Dim index As Integer = column.Index
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumn.Columns">
            <summary>
            Collects the objects that represent the individual columns in a worksheet.
            </summary>
            <example>
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets the first column.
            IColumn column = worksheet.Columns[0];
            
            IColumnCollection columns = column.Columns;
            
            [Visual Basic]
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets the first column.
            Dim column As IColumn = worksheet.Columns(0)
            
            Dim columns As IColumnCollection = column.Columns
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumn.GroupLevel">
            <summary>
            Gets the group level of the column.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IColumn.IsHidden">
            <summary>
            Indicates whether the column is hidden.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a column using zero-based column index.
            IColumn column = worksheet.Columns[0];
            
            //Hides the column.
            column.IsHidden = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column using zero-based column index.
            Dim column As IColumn = worksheet.Columns(0)
            
            'Hides the column.
            column.IsHidden = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IColumn.Name">
            <summary>
            Gets the column's name,just like "A","B","C", etc.
            </summary>         
        </member>
        <member name="P:Acey.ExcelX.IColumn.Width">
            <summary>
            Gets and sets the column width in unit of charaters.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ICellFormat">
            <summary>
            Represents a cell format.
            </summary>
            <example>
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell by using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets cell format of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the font name of cell format
            cellFormat.Font.Name = "Arial";
             
            //Sets the font is bold for the cell format.
            cellFormat.Font.Bold = true;
            
            //Sets the number format of the cell format.
            cellFormat.NumberFormat = "0.00";
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell by using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets cell format of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the font name of cell format
            cellFormat.Font.Name = "Arial"
            
            'Sets the font is bold for the cell format.
            cellFormat.Font.Bold = true;
            
            'Sets the number format of the cell format.
            cellFormat.NumberFormat = "0.00"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.AddIndent">
            <summary>
            Gets or sets the property which controls indentation of text when horizontal
             or vertical alignment is set to distributed.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
            
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            cellFormat.AddIndent = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            cellFormat.AddIndent = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.BackgroundColor">
            <summary>
            Specifies the background color of the fill pattern.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Set the  background color.
            cellFormat.BackgroundColor = System.Drawing.Color.Yellow;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Set the  background color.
            cellFormat.BackgroundColor = System.Drawing.Color.Yellow
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.Borders">
            <summary>
            Gets or sets  the cell borders of cells.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets a border collection.
            IBorders borders = cellFormat.Borders;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets a border collection.
            Dim borders As IBorders = cellFormat.Borders
            </code>
            </example>
            <seealso cref="T:Acey.ExcelX.IBorders"/>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.Font">
            <summary>
            Gets or sets a Font.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Gets font object.
            IFont font = cellFormat.Font;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Gets font object.
            Dim font As IFont = cellFormat.Font
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the fill pattern.
            Note:only if cell style's Pattern isn't None or Solid,then this property will take effect.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
             //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the foreground color.
            cellFormat.ForegroundColor = System.Drawing.Color.Yellow;
            cellFormat.Pattern = Pattern.ThinDiagonalCrosshatch;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the foreground color.
            cellFormat.ForegroundColor = System.Drawing.Color.Yellow
            cellFormat.Pattern = Pattern.ThinDiagonalCrosshatch;
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.FormulaHidden">
            <summary>
            Represents if the formula will be hidden when the worksheet is protected.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets whether the hidden protection property.
            cellFormat.FormulaHidden = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets whether the hidden protection property.
            cellFormat.FormulaHidden = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the horizontal alignment.
            cellFormat.HorizontalAlignment = HorizAlign.Left;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the horizontal alignment.
            cellFormat.HorizontalAlignment = HorizAlign.Left
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.IndentLevel">
            <summary>
            Gets or sets the text indentation level. MUST be less than or equal to 15.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the text indentation level.
            cellFormat.IndentLevel = 5;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the text indentation level.
            cellFormat.IndentLevel = 5
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">value must be less than or equal to 15.</exception>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.InheritedStyle">
            <summary>
            Gets the CellFormat applied 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.Locked">
            <summary>
            Gets or sets whether the locked protection property.
            </summary>
            <remarks>Default is true.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets whether the locked protection property.
            cellFormat.Locked = false;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets whether the locked protection property.
            cellFormat.Locked = False
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.NumberFormat">
            <summary>
            Gets or sets a number format. <see cref="P:Acey.ExcelX.ICellFormat.NumberFormat"/>BulitInNumberFormat class provides the bulitin numberformats.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the number format.
            cellFormat.NumberFormat = BulitInNumberFormat.Number2;// "0.00";
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the number format.
            cellFormat.NumberFormat = BulitInNumberFormat.Number2;// "0.00"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.Orientation">
            <summary>
            Gets or sets the text rotation.
            </summary>
            <remarks>The number must be between -90 and 90. </remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the text rotation.
            cellFormat.Orientation = 30;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the text rotation.
            cellFormat.Orientation = 30
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"> value must be between -90 and 90. </exception>    
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.Pattern">
            <summary>
            Gets or sets the fill pattern.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the fill pattern.
            cellFormat.Pattern = Pattern.Gray75;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the fill pattern.
            cellFormat.Pattern = Pattern.Gray75
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.ShrinkToFit">
            <summary>
            Gets or sets whether a cell is shrink-to-fit.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets whether a cell is shrink-to-fit.
            cellFormat.ShrinkToFit = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets whether a cell is shrink-to-fit.
            cellFormat.ShrinkToFit = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.TextDirection">
             <summary>
             Gets or sets the reading order.
             </summary>
             <remarks>Default is context.</remarks>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a cell object using cell name.
             ICell cell = worksheet.Cells["A1"];
              
             //Gets a cellFormat object of the cell.
             ICellFormat cellFormat = cell.CellFormat;
             
             //Sets the reading order.
             cellFormat.TextDirection = TextDirectionType.LeftToRight;
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a cell object using cell name.
             Dim cell As ICell = worksheet.Cells("A1")
             
             'Gets a cellFormat object of the cell.
             Dim cellFormat As ICellFormat = cell.CellFormat
             
             'Sets the reading order.
             cellFormat.TextDirection = TextDirectionType.LeftToRight
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <remarks>Default is center.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets the vertical alignment.
            cellFormat.VerticalAlignment = VertAlign.Bottom;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets the vertical alignment.
            cellFormat.VerticalAlignment = VertAlign.Bottom
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ICellFormat.WrapText">
            <summary>
            Gets or sets whether cell text is wrapped.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a cell object using cell name.
            ICell cell = worksheet.Cells["A1"];
             
            //Gets a cellFormat object of the cell.
            ICellFormat cellFormat = cell.CellFormat;
            
            //Sets whether cell text is wrapped.
            cellFormat.WrapText = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a cell object using cell name.
            Dim cell As ICell = worksheet.Cells("A1")
            
            'Gets a cellFormat object of the cell.
            Dim cellFormat As ICellFormat = cell.CellFormat
            
            'Sets whether cell text is wrapped.
            cellFormat.WrapText = True
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.OrientationType">
            <summary>
            Specifies the text orientation.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OrientationType.LeftToRight">
            <summary>
            Specifies no rotation.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OrientationType.TopToBottom">
            <summary>
            Specifies stacked or vertical orientation.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OrientationType.CounterClockwise">
            <summary>
            Specifies 90-degree counter-clockwise rotation.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OrientationType.Clockwise">
            <summary>
            Specifies 90-degree clockwise rotation.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ITextBoxCollection">
            <summary>
            Encapsulates a collection of TextBox object.
            </summary>
            <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Creates a Workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
              
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a TextBox object collection of the Worksheet object.
             ITextBoxCollection textboxes = worksheet.TextBoxes;
             
             //Gets a new TextBox object.
             ITextBox textbox = textboxes.Add(5, 6, 800, 700);
             
            //Sets text of the TextBox object.
             textbox.Text = "Acey Office";
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\TextBox.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a TextBox object collection of the Worksheet object.
            Dim textboxCollection As ITextBoxCollection = worksheet.TextBoxes
            
            'Gets a new TextBox object.
            Dim tb As ITextBox = textboxCollection.Add(5, 6, 800, 700)
            
            'Sets text of the TextBox object.
            tb.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\TextBox.xls", FileFormat.Excel97To2003)
             </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.ITextBoxCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds new item to the collection.
            </summary>
            <param name="upperLeftRow">Upper left row index.</param>
            <param name="upperLeftColumn">Upper left column index.</param>
            <param name="height"> Height of textbox, in unit of pixel.</param>
            <param name="width">Width of textbox, in unit of pixel.</param>
            <returns>A new TextBox object.</returns>
            <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a Workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
              
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a TextBox object collection of the Worksheet object.
             ITextBoxCollection textboxes = worksheet.TextBoxes;
             
             //Gets a new TextBox object.
             ITextBox textbox = textboxes.Add(5, 6, 800, 700);
             
            //Sets text of the TextBox object.
             textbox.Text = "Acey Office";
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\TextBox.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a TextBox object collection of the Worksheet object.
            Dim textboxes As ITextBoxCollection = worksheet.TextBoxes
            
            'Gets a new TextBox object.
            Dim textbox As ITextBox = textboxes.Add(5, 6, 800, 700)
            
            'Sets text of the TextBox object.
            textbox.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\TextBox.xls", FileFormat.Excel97To2003)
             </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextBoxCollection.Count">
            <summary>
            Returns number of items in the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextBoxCollection.Item(System.Int32)">
            <summary>
            Gets a TextBox object at the specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <returns>A TextBox object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to ITextBoxCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.Drawing.IComment">
            <summary>
            Represents a comment object.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by the specified cell.
            IComment comment = comments[2, 3];
            
            //Sets author of the Comment object.
            comment.Author = "Acey";
             
            //Sets text of the Comment object.
            comment.Text = "Acey Office";
            
            //Indicates if size of comment is adjusted automatically according to its content.
            comment.AutoSize = true;
            
            //Represents if the comment is visible or not.
            comment.Visible = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by the specified cell.
            Dim comment As IComment = comments(2, 3)
            
            'Sets author of the Comment object.
            comment.Author = "Acey"
            
            'Sets text of the Comment object.
            comment.Text = "Acey Office"
            
            'Indicates if size of comment is adjusted automatically according to its content.
            comment.AutoSize = True
            
            'Represents if the comment is visible or not.
            comment.Visible = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.IComment.Delete">
            <summary>
            Deletes the Comment object.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by the specified cell.
            IComment comment = comments[2, 3];
            
            //Deletes the Comment object.
            comment.Delete();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by the specified cell.
            Dim comment As IComment = comments(2, 3)
            
            'Deletes the Comment object.
            comment.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IComment.Author">
            <summary>
            Gets and sets Name of the original comment author.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IComment.Column">
            <summary>
            Gets the column index of the comment.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IComment.CommentShape">
            <summary>
            Get a Shape object that represents the shape attached to the specified comment.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Comment.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Comment object collection of the Worksheet object.
            ICommentCollection comments = worksheet.Comments;
            
            //Gets a Comment object by the specified cell.
            IComment comment = comments[2, 3];
            
            //Gets a CommentShape object of the Comment object.
            ICommentShape shape = comments[0].CommentShape;
             
            //Sets alternative text of the CommentShape object.
            shape.AlternativeText = "Acey Office";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Comment.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Comment object collection of the Worksheet object.
            Dim comments As ICommentCollection = worksheet.Comments
            
            'Gets a Comment object by the specified cell.
            Dim comment As IComment = comments(2, 3)
            
            'Gets a CommentShape object of the Comment object.
            Dim shape As ICommentShape = comments(0).CommentShape
            
            'Sets alternative text of the CommentShape object.
            shape.AlternativeText = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IComment.Row">
            <summary>
            Gets the row index of the comment.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.IComment.Visible">
            <summary>
            Represents if the comment is visible or not.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IDropLines">
            <summary>
            Represents the drop lines in a chart group.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a HiLoLines object of the Series object.
            IDropLines dropLines = series.DropLines;
            
            //Sets border's style of the Series object.
            dropLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            dropLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            dropLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\LineChart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a HiLoLines object of the Series object.
            Dim dropLines As IDropLines = series.DropLines
            
            'Sets border's style of the Series object.
            dropLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            dropLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            dropLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)  
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.SummaryColumn">
            <summary>
            Specifies the location of the summary columns in the outline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SummaryColumn.SummaryOnRight">
            <summary>
            The summary column will be positioned to the right of the detail columns in the outline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SummaryColumn.SummaryOnLeft">
            <summary>
            The summary column will be positioned to the left of the detail columns in the outline.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.TickMarkType">
            <summary>
            Represents the tick mark type for the specified axis.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickMarkType.None">
            <summary>
            No mark. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickMarkType.Inside">
            <summary>
            Inside the axis. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickMarkType.Outside">
            <summary>
            Outside the axis. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickMarkType.Cross">
            <summary>
            Crosses the axis. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.DataLablesSeparatorType">
            <summary>
            Represents the separator type of DataLables.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.Auto">
            <summary>
            Separator type of DataLables is auto.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.Space">
            <summary>
            Separator type of DataLables is space.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.Comma">
            <summary>
            Separator type of DataLables is comma.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.Semicolon">
            <summary>
            Separator type of DataLables is semicolon.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.Period">
            <summary>
            Separator type of DataLables is period.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DataLablesSeparatorType.NewLine">
            <summary>
            Separator type of DataLables is newLine.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IRow">
            <summary>
            Represents a single row in a worksheet.
            </summary>
            <example>
            How to get a single row in a worksheet.
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[0];
            
            //Hides the row object.
            row.IsHidden = true;
            
            //Gets a row object by using zero-based row index.
            row = rows[1];
            
            //Sets height of the row object.
            row.Height = 20;
            
            [Visual Basic]
            'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(0)
            
            'Hides the row object.
            row.IsHidden = True
            
            'Gets a row object by using zero-based row index.
            row = rows(1)
            
            'Sets height of the row object.
            row.Height = 20
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRow.GetStyle">
            <summary>
            Represents the style of this row. 
            </summary>
            <returns>Gets style of associate with the row.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
             
            //Gets a row object by using zero-based row index.
             IRow row = rows[0];
            
             //Gets style of row object.
             IStyle style = row.GetStyle();
             
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(0)
            
            'Gets style of row object.
            Dim style As IStyle = row.GetStyle()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRow.ApplyStyle(Acey.ExcelX.IStyle)">
            <summary>
            Applies formattings for a whole row.
            </summary>
            <param name="style">specifies style</param>
            <remarks><p>
            Once the row applies specify style, when the style is changed, 
             The row format is changed following the style.
            </p>
            </remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a style collection of the workbook.
            IStyleCollection styles = workbook.Styles;
            
            //Gets a style using style name.
            IStyle style = styles["Comma"];
             
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[0];
            
            //Applies the style to the entire row.
            row.ApplyStyle(style);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a style collection of the workbook.
            Dim styles As IStyleCollection = workbook.Styles
            
            'Gets a style using style name.
            Dim style As IStyle = styles("Comma")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(0)
            
            'Applies the style to the entire row.
            row.ApplyStyle(style)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/>is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.Clear">
            <summary>
            Clears data and formatting of the row object.
            </summary>
            <exception cref="T:System.InvalidOperationException">Change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.ClearContent">
            <summary>
            Clears data and formual of row object.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[1];
            
            //Clears content of the row.
            row.ClearContent();
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(1)
            
            'Clears content of the row.
            row.ClearContent()
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">Cannot change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.ClearFormats">
            <summary>
            Clears all formatting for a whole row.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[1];
            
            //Clears format of the row.
            row.ClearFormats();
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(1)
            
            'Clears format of the row.
            row.ClearFormats()
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">Cannot change part of a merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.Copy(Acey.ExcelX.IRow)">
            <summary>
            Copy data and format from the Specified row.
            </summary>
            <param name="source">specified source row.</param>
            <example>
            This example shows how you might use this method:
            <code>
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a source row object.
            IRow source = worksheet.Rows[0];
            
            //Gets a destination row object.
            IRow dest = worksheet.Rows[1];
            
            //Copies the specified row object to destination row object.
            dest.Copy(source);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a source row object.
            Dim source As IRow = worksheet.Rows(0)
            
            'Gets a destination row object.
            Dim dest As IRow = worksheet.Rows(1)
            
            'Copies the specified row object to destination row object.
            dest.Copy(source)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.CopyFormat(Acey.ExcelX.IRow)">
            <summary>
            Copies formatting of the specified Row object.
            </summary>
            <param name="source">Source Row object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRow.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
        </member>
        <member name="M:Acey.ExcelX.IRow.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
            <param name="lineColor">Line color.</param>
        </member>
        <member name="P:Acey.ExcelX.IRow.CellFormat">
            <summary>
            Gets format of the Row. 
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Row object collection in the Worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a Row object by using zero-based index.
            IRow row = rows[1];
            
            //Gets format of the Row.
            ICellFormat cellFormat = row.CellFormat;
            
            //Sets font is bold.
            cellFormat.Font.Bold = true;
            
            //Sets font color of the CellFormat object.
            cellFormat.Font.Color = System.Drawing.Color.Blue;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a column collection from the worksheet object.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a column using zero-based column index.
            Dim row As IRow = rows(1) 
            
            'Gets format of the Row object.
            Dim cellFormat As ICellFormat = row.CellFormat
            
            'Sets font is bold.
            cellFormat.Font.Bold = True
            
            'Sets font color of the CellFormat object.
            cellFormat.Font.Color = System.Drawing.Color.Blue;
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRow.Height">
            <summary>
            Gets and sets the row height in unit of Points. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRow.Index">
            <summary>
            Specifies the zero based row index.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[2];
            
            //Gets the zero based row index.
            int rowIndex = row.Index;
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(2)
            
            'Gets the zero based row index.
            Dim rowIndex As Integer = row.Index
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRow.IsBlank">
            <summary>
            Gets whether the row contains any data.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
             [C#]
             //Creates a workbook by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets a worksheet object by using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a row collection of the worksheet.
             IRowCollection rows = worksheet.Rows;
             
             //Gets a row object by using zero-based row index.
             IRow row = rows[2];
             
             //Gets the row whether contains data or formatting in the current row.
             bool isBlank = row.IsBlank;
             
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(2)
            
            'Gets the row whether contains data or formatting in the current row.
            Dim isBlank As Boolean = row.IsBlank
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRow.IsHidden">
            <summary>
            Specifies whether the row is hidden.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object by using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a row collection of the worksheet.
             IRowCollection rows = worksheet.Rows;
             
             //Gets a row by using zero-based row index.
             IRow row = rows[2];
            
            //Sets the row is hidden.
             row.IsHidden = true;
             
            [Visual Basic]
            'Creates a workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row by using zero-based row index.
            Dim row As IRow = rows(2)
            
            'Sets the row is hidden.
            row.IsHidden = True
             </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRow.GroupLevel">
            <summary>
            Gets the group level of the row.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRow.RowCollection">
            <summary>
             Returns the parent IRow collection of this row.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a row object by using zero-based row index.
            IRow row = worksheet.Rows[0];
            
            //Gets the parent IRow collection of this row.
            IRowCollection parentRows = row.RowCollection;   
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = worksheet.Rows(0)
            
            'Gets the parent IRow collection of this row.
            Dim parentRows As IRowCollection = row.RowCollection
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ILineFormat">
            <summary>
            Specifies the line attributes of the shape.
            </summary>
            <example>
            How to get line format of shape.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets line format of the shape.
            ILineFormat lineFormat = shape.Line;
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets line format of the shape.
            Dim lineFormat As ILineFormat = shape.Line 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.BackColor">
            <summary>
            Gets or sets the background color of the line.
            </summary>       
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.DashStyle">
            <summary>
            Gets or sets the dash style of the line.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.ForeColor">
            <summary>
            Gets or sets the foreground color of the line.
            </summary>
            <example>
            The example shows how to use the property.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets line format of the shape.
            ILineFormat lineFormat = shape.Line;
            
            //Sets the forecolor of line of the shape.
            lineFormat.ForeColor = Color.Red;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets line format of the shape.
            Dim lineFormat As ILineFormat = shape.Line 
            
            'Sets the forecolor of line of the shape.
            lineFormat.ForeColor = Color.Red
             
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.Style">
             <summary>
             Gets or sets the style of the line.
             </summary>
             <example>
             The example shows how to use the property.
             <code>
             [C#]
             //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
              
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets a shape object using zero-based shape index.
             IShape shape = worksheet.Shapes[0];
             
             //Gets line format of the shape.
             ILineFormat lineFormat = shape.Line;
             
             //Sets the style of line of the shape.
            lineFormat.DashStyle = MsoLineDashStyle.LongDashDot;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             [Visual Basic]
             'Creates a workbook by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a shape object using zero-based shape index.
             Dim shape As IShape = worksheet.Shapes(0)
              
             'Gets line format of the shape.
             Dim lineFormat As ILineFormat = shape.Line 
             
             'Sets the style of line of the shape.
             lineFormat.DashStyle = MsoLineDashStyle.LongDashDot
              
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.Transparency">
            <summary>
            Gets or sets the opacity level of the foreground color.
            </summary>
            <remarks>value must be between 0 and 1.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>is less than 0 or greater than 1.</exception>
            <example>
            The example shows how to use the property.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets line format of the shape.
            ILineFormat lineFormat = shape.Line;
            
            //Sets the opacity level of the foreground color.
            lineFormat.Transparency = 0.6;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets line format of the shape.
            Dim lineFormat As ILineFormat = shape.Line
            
            'Sets the opacity level of the foreground color.
            lineFormat.Transparency = 0.6
             
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.Visible">
            <summary>
            Gets or sets whether the line is visible.
            </summary>
            <example>
            The example shows how to use the property.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
             
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a shape object using zero-based shape index.
            IShape shape = worksheet.Shapes[0];
            
            //Gets line format of the shape.
            ILineFormat lineFormat = shape.Line;
            
            //Hides line of the shape.
            lineFormat.Visible = false;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a shape object using zero-based shape index.
            Dim shape As IShape = worksheet.Shapes(0)
             
            'Gets line format of the shape.
            Dim lineFormat As ILineFormat = shape.Line
            
            'Hides line of the shape.
             lineFormat.Visible = false
             
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ILineFormat.Weight">
             <summary>
             Gets or sets the width of the line, in point.
             </summary>
             <remarks>Default is 0.75.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">value should be between 0 and 1584.</exception>
             <example>
             The example shows how to use the property.
             <code>
             [C#]
             //Creates a workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\Shape.xls");
              
             //Gets a worksheet object using zero-based worksheet index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets a shape object using zero-based shape index.
             IShape shape = worksheet.Shapes[0];
             
             //Gets line format of the shape.
             ILineFormat lineFormat = shape.Line;
             
             //Sets the width of the line, in point.
             lineFormat.Weight = 1.6;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
             
             [Visual Basic]
             'Creates a workbook by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\Shape.xls")
             
             'Gets a worksheet object using zero-based worksheet index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a shape object using zero-based shape index.
             Dim shape As IShape = worksheet.Shapes(0)
              
             'Gets line format of the shape.
             Dim lineFormat As ILineFormat = shape.Line
             
             'Sets the width of the line, in point.
              lineFormat.Weight = 1.6
              
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.GradientPresetType">
            <summary>
            Specifies gradient the preset colors.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Brass">
            <summary>
            Brass
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.CalmWater">
            <summary>
            Calm Water
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.ChromeII">
            <summary>
            Chrome II
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Daybreak">
            <summary>
            Daybreak
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Desert">
            <summary>
            Desert
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.EarlySunset">
            <summary>
            EarlySunset
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Fire">
            <summary>
            Fire
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Fog">
            <summary>
            Fog
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.GoldII">
            <summary>
            Gold II
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Horizon">
            <summary>
            Horizon
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.LateSunset">
            <summary>
            Late Sunset
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Mahogany">
            <summary>
            Mahogany
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Moss">
            <summary>
            Moss
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Nightfall">
            <summary>
            Nightfall
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Ocean">
            <summary>
            Ocean
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Parchment">
            <summary>
            Parchment
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Peacock">
            <summary>
            Peacock
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Rainbow">
            <summary>
            Rainbow
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.RainbowII">
            <summary>
            Rainbow II
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Sapphire">
            <summary>
            Sapphire
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientPresetType.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IChartSheet">
            <summary>
            Represents a Chart sheet.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IChartSheet.Chart">
            <summary>
            Gets a Chart object of the Chart sheet.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ICheckBox">
            <summary>
            Represents a check box object.
            </summary>
            This example shows how you might use this instance:
            <example>
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a CheckBox object collection in the Worksheet.
            ICheckBoxCollection checkBoxes = worksheet.CheckBoxes;
            
            //Gets  a Newly CheckBox.
            ICheckBox checkBox = checkBoxes.Add(3, 5, 100, 50);
            
             //Sets whether the control is expected to be displayed without three-dimensional effects.
             checkBox.Display3DShading = true;
             
            //Indicates whether check box is checked.
            checkBox.CheckState = CheckState.Checked;
            
            //Sets text of the CheckBox object.
            checkBox.Text = "Selected";
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003); 
            
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a CheckBox object collection in the Worksheet.
            Dim checkBoxes As ICheckBoxCollection = worksheet.CheckBoxes
            
            'Gets  a Newly CheckBox.
            Dim checkBox As ICheckBox =  checkBoxes.Add(3, 5, 100, 50)
            
            'Sets whether the control is expected to be displayed without three-dimensional effects.
            checkBox.Display3DShading = True
             
            'Indicates whether check box is checked.
            checkBox.CheckState = CheckState.Checked
            
            'Sets text of the CheckBox object.
            checkBox.Text = "Selected"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBox.CheckState">
            <summary>
            Indicates whether check box is checked.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBox.Display3DShading">
            <summary>
            Specifies whether the control is expected to be displayed without three-dimensional effects.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBox.LinkedCell">
            <summary>
            Indicates the cell in which the option button points to.
            </summary>
            <exception cref="T:System.ArgumentException">Invalid reference.</exception>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBox.Text">
            <summary>
            Gets text of checkbox.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ICheckBox.Shape">
            <summary>
             Get a Shape object that represents the CheckBox object.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ISeriesCollection">
             <summary>
             A collection of all the Acey.ExcelX.Charts.ISeries objects in the specified chart or chart group.
             </summary>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a Series object by using zero-based index.
             ISeries series = seriesCollection[0];
             
             //Gets border of the Series object.
             Acey.ExcelX.Drawing.ILine line = series.Border;
            
             //Sets border's style of the Series object.
             line.Style = LineType.DarkGray;
             
             //Sets if the color of points is varied.
             series.IsColorVaried = true;
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a Series object by using zero-based index.
             Dim series As ISeries = seriesCollection(0)
             
             'Gets border of the Series object.
             Dim line As Acey.ExcelX.Drawing.ILine = series.Border
             
             'Sets border's style of the Series object.
             line.Style = LineType.DarkGray
             
             'Sets if the color of points is varied.
             series.IsColorVaried = True
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ISeriesCollection.Add">
             <summary>
             Adds a new Series object. 
             </summary>
             <returns>Newly created series object.</returns>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a new Series object.
             ISeries series = seriesCollection.Add();
             
             //Sets the name of the data series.
             series.Name = "=Sheet1!$A$2";
            
             //Sets the data of the chart series.
              series.Values = "=Sheet1!$B$2:$D$2";
             
             //Sets the x values of the chart series.
             series.XValues = "=Sheet1!$B$1:$D$1";
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a new Series object.
             Dim series As ISeries = seriesCollection.Add()
             
             'Sets the name of the data series.
             series.Name = "=Sheet1!$A$2"
             
             'Sets the data of the chart series.
             series.Values = "=Sheet1!$B$2:$D$2"
             
             'Sets the x values of the chart series.
             series.XValues = "=Sheet1!$B$1:$D$1"
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ISeriesCollection.Add(Acey.ExcelX.Charts.ChartType)">
             <summary>
             Adds a new Series object by specified type.
             </summary>
             <param name="serieType">Type of new series.</param>
             <returns>Newly created series object.</returns>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
              
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
             
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
             
             //Gets a Series object collection object of the Chart object.
             ISeriesCollection seriesCollection = chart.SeriesCollection;
              
             //Gets a new Series object.
             ISeries series = seriesCollection.Add(ChartType.ColumnClustered);
             
             //Sets the name of the data series.
             series.Name = "=Sheet1!$A$2";
            
             //Sets the data of the chart series.
             series.Values = "=Sheet1!$B$2:$D$2";
             
             //Sets the x values of the chart series.
             series.XValues = "=Sheet1!$B$1:$D$1";
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets a Series object collection object of the Chart object.
             Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
             
             'Gets a new Series object.
             Dim series As ISeries = seriesCollection.Add(ChartType.ColumnClustered)
             
             'Sets the name of the data series.
             series.Name = "=Sheet1!$A$2"
             
             'Sets the data of the chart series.
             series.Values = "=Sheet1!$B$2:$D$2"
             
             'Sets the x values of the chart series.
             series.XValues = "=Sheet1!$B$1:$D$1"
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.ISeriesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a Series at the specific index.
            </summary>
            <param name="index">The zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to ISeriesCollection.Count.</exception>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Removes a Series at the specific index.
            seriesCollection.RemoveAt(1);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Removes a Series at the specific index.
            seriesCollection.RemoveAt(1)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeriesCollection.Count">
            <summary>
            Gets the number of the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeriesCollection.Item(System.Int32)">
            <summary>
            Gets a Series object at the specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <returns>A Series object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to ISeriesCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.GroupBy">
            <summary>
            Enumeration of Group types in Excel.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.GroupBy.ByRows">
            <summary>
            Represents the grouping by rows option.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.GroupBy.ByColumns">
            <summary>
            Represents the grouping by columns option.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.TickLabelPositionType">
            <summary>
            Represents the position type of tick-mark labels on the specified axis.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickLabelPositionType.None">
            <summary>
            Position type is none.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickLabelPositionType.Low">
            <summary>
            Position type is low.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickLabelPositionType.High">
            <summary>
            Position type is high.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TickLabelPositionType.NextToAxis">
            <summary>
            Position type is next to axis.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.LegendPositionType">
            <summary>
            Specifies the legend position type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.Bottom">
            <summary>
            Specifies position is bottom.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.Corner">
            <summary>
            Specifies position is corner.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.Top">
            <summary>
             Specifies position is top.
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.Right">
            <summary>
            Specifies position is right.
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.Left">
            <summary>
            Specifies position is left.
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.Charts.LegendPositionType.NotDocked">
            <summary>
            Represents that the legend is not docked.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.AutoFilterOperator">
            <summary>
            Specifies the operator to use to associate two criteria applied by a filter.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.And">
            <summary>
             Logical AND of Criteria1 and Criteria2.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.Or">
            <summary>
            Logical OR of Criteria1 and Criteria2.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.Top10Items">
            <summary>
             Highest-valued items displayed.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.Bottom10Items">
            <summary>
            Lowest-valued items displayed.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.Top10Percent">
            <summary>
            Lowest-valued items displayed.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.AutoFilterOperator.Bottom10Percent">
            <summary>
            Lowest-valued items displayed.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IVPageBreak">
            <summary>
             Represents a vertical page break (a column page break) in a worksheet.
            </summary>
            <example>
            How to get a vertical page break from vertical page break collection.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection from a workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet object from the worksheet collection by using zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a vertical page break collection from the worksheet object.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
            
            //Gets a vertical page break specified by the zero based index.
            IVPageBreak vPageBreak = vPageBreaks[0];
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection from a workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet object from the worksheet collection by using zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a vertical page break collection from the worksheet object.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Gets a vertical page break specified by the zero based index.
            Dim vPageBreak As IVPageBreak = vPageBreaks(0)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IVPageBreak.Delete">
            <summary>
            Deletes the vertical page break from the worksheet.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection from the workbook object.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a VPageBreak collection of the Worksheet.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
            
            //Gets a vertical page break specified by the zero based index.
            IVPageBreak vPageBreak = vPageBreaks[0];
            
            //Deletes the vertical page break.
            vPageBreak.Delete();
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection from the workbook object.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a VPageBreak collection of the Worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Gets a vertical page break specified by the zero based index.
            Dim vPageBreak As IVPageBreak = vPageBreaks(0)
            
            'Deletes the vertical page break.
            vPageBreak.Delete()
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IVPageBreak.Location">
            <summary>
            Gets the location of the vertical page break.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection from the workbook object.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a VPageBreak collection of the Worksheet.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
            
            //Gets a vertical page break specified by the zero based index.
            IVPageBreak vPageBreak = vPageBreaks[0];
            
            //Gets the location of the vertical page break.
            IRange range = vPageBreak.Location;
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection from the workbook object.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a VPageBreak collection of the Worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Gets a vertical page break specified by the zero based index.
            Dim vPageBreak As IVPageBreak = vPageBreaks(0)
            
            'Gets the location of the vertical page break.
            Dim range As IRange = vPageBreak.Location
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">sets location is null for reference types.</exception>
        </member>
        <member name="T:Acey.ExcelX.IRange">
            <summary>
            Encapsulates the object that represents a range of cells within a spreadsheet.
            </summary>
            <example>
            How to create a range object:
            <code>
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Creates a new range object.
            IRange range = worksheet.Cells.CreateRange("A1:B3");
            
            //Merges the cells in the represented range into a single merged cell.
            range.Merge();
            
            //Creates a new range object.
            range = worksheet.Cells.CreateRange("A5:B10");
            
            //Creates a DataTable object.
            System.Data.DataTable dataTable = new System.Data.DataTable();
            
            //Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("a");
            
            //Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("b");
            
            //Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("c");
            
            //Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(1, 2, 3);
            
            //Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(4, 5, 6);
            
            //Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(7, 8, 9);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
             
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Creates a new range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B3")
            
            'Merges the cells in the represented range into a single merged cell.
            range.Merge()
            
            'Creates a new range object.
            range = worksheet.Cells.CreateRange("A5:B10")
            
            'Creates a DataTable object.
            Dim dataTable As System.Data.DataTable = New System.Data.DataTable
            
            'Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("a")
            
            'Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("b")
            
            'Adds a new column to the DataTable object by using column name.
            dataTable.Columns.Add("c")
            
            'Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(1, 2, 3)
            
            'Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(4, 5, 6);
            
            'Adds a new row that is specified to the DataTable object.
            dataTable.Rows.Add(7, 8, 9);
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.ApplyStyle(Acey.ExcelX.IStyle)">
            <summary>
            Applies formattings for a whole range.
            </summary>
            <param name="style">Specifies style.</param>
            <example>
            This example shows how you might use this method:
            <code>
             [C#]
             //Create a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object using index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets the style using the name.   
             IStyle style = workbook.Styles["Comma"];
             
             //Gets a range by using range name.
             IRange range = worksheet.Cells.CreateRange("C3:D5");
             
             //Applies style for the range object.
             range.ApplyStyle(style);
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
            [Visual Basic]
            'Create a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object using index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets the style using the name.   
            Dim style As IStyle = workbook.Styles("Comma")
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("C3:D5")
            
            'Applies style for the range object.
            range.ApplyStyle(style)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="style"/> is null for reference types.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.Clear">
            <summary>
            Clears formulas, values and all formatting for a whole range.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
              
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
              
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("C3:D5");
              
            //Clears formulas, values and all formatting for a whole range.
            range.Clear();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\ClearRange.xls", FileFormat.Excel97To2003);
            
              
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("C3:D5")
            
            'Clears formulas, values and all formatting for a whole range.
            range.Clear()
            
             'Saves as the specified file format.
            workbook.SaveAs("D:\ClearRange.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.ClearComments">
            <summary>
            Clears all Comment objects in the range.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IRange.ClearContents">
            <summary>
            Clears formulas and values for a whole range.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("C3:D5");
            
            //Clears formuals, value for a whole range.
            range.ClearContents();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\ClearContents.xls", FileFormat.Excel97To2003); 
            
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("C3:D5")
            
            'Clears formuals, value for a whole range.
            range.ClearContents()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\ClearContents.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.ClearFormats">
            <summary>
            Clears all formatting for a whole range.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("C3:D5");
            
            //Clears all formatting for a whole range.
            range.ClearFormats();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\ClearFormats.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("C3:D5")
            
            'Clears all formatting for a whole range.
            range.ClearFormats()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\ClearFormats.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.Copy(Acey.ExcelX.IRange)">
            <summary>
            Copies data (including formulas), formatting, drawing objects etc. from a source range.
            </summary>
            <param name="source">Specify Range object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.CopyFormat(Acey.ExcelX.IRange)">
            <summary>
            Copies formatting from a source range.
            </summary>
            <param name="source">Source Range object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.ConvertStringToNumber">
            <summary>
            Converts string to number in Range object if the value can be converted.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IRange.CreateRange(System.String)">
            <summary>
            Gets a range of cells.
            </summary>
            <returns>Gets a Range object.</returns>
            <param name="reference">e.g. A1:C3</param>
            <remarks>Returns null if <paramref name="reference"/>is invalid range name.</remarks>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="reference"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="reference"/> Invalid reference.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.CreateRange(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a range of cells.
            </summary>
            <param name="startCell">The name of start cell, such as "A1".</param>
            <param name="totalRows">Number of rows.</param>
            <param name="totalColumns">Number of columns.</param>
            <returns>A Range object.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using first cell name of range , rows count of range and columns count of range.
            IRange range = worksheet.Cells.CreateRange("B11",1,10);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using first cell name of range , rows count of range and columns count of range.
            Dim range As IRange = worksheet.Cells.CreateRange("B11",1,10)
            </code>
            </example>        
            <exception cref="T:System.ArgumentNullException"><paramref name="startCell"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="startCell"/> Invalid cell name.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalRows"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalColumns"/> is out of range.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IRange.CreateRange(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary> 
             Gets a range of cells.
             </summary>
             <param name="firstRow">a zero-based row index.</param>
             <param name="firstColumn">a zero-based column index.</param>
             <param name="lastRow">a zero-based row index.</param>
             <param name="lastColumn">a zero-based column index.</param>    
             <returns>Returns a new Range object.</returns>    
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstRow"/> and <paramref name="lastRow"/>  is less than 0 or greater than 65535. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstColumn"/> and <paramref name="lastColumn"/> is less than 0 or greater than 255.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="lastRow"/> less than<paramref name="firstRow"/>. or <paramref name="lastColumn"/> less than <paramref name="firstColumn"/>.</exception>
             <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets a worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a range.
             IRange range = worksheet.Cells.CreateRange(0, 0, 2, 3);
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets a worksheet object by using zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets a range.
             Dim range As IRange = worksheet.Cells.CreateRange(0, 0, 2, 3)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.Delete(Acey.ExcelX.DeleteShiftDirection)">
            <summary>
            Deletes cells by shifting remaining cells left or up and fixing up formulas. 
            </summary>
            <param name="shiftDirection">Specifies whether to shift cells left or up to replace the deleted cells.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a Cell Object by using cell name.
            ICell cell = worksheet.Cells["C4"];
             
            //Sets formual to the Cell.
            cell.Formula = "=SUM(A3:B5)";
             
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
             
            //Deletes cells by shifting remaining cells left or up and fixing up formulas. 
            range.Delete(DeleteShiftDirection.Up);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Cell Object by using cell name.
            Dim cell As ICell = worksheet.Cells("C4")
            
            'Sets formual to the Cell.
            cell.Formula = "=SUM(A3:B5)"
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Deletes cells by shifting remaining cells left or up and fixing up formulas. 
            range.Delete(DeleteShiftDirection.Up)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
             <exception cref="T:System.InvalidOperationException">When opertion will cause some merged cells to unerge.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IRange.ExportDataTable">
            <summary>
            Exports range data to data table.
            </summary>
            <returns>Returns DataTable.</returns>
        </member>
        <member name="M:Acey.ExcelX.IRange.Find(System.String,Acey.ExcelX.FindLookIn,Acey.ExcelX.FindLookAt,Acey.ExcelX.SearchOrder,System.Boolean)">
            <summary>
            Searches for the specified text according to the specified options.
            </summary>
            <param name="what">Specifies the text to find.</param>
            <param name="lookIn">Specifies whether to search formulas or values.</param>
            <param name="lookAt">Specifies partial or complete match.</param>
            <param name="searchOrder">Specifies whether to search by rows or by columns. </param>
            <param name="matchCase">Specifies whether text searches should match case.</param>
            <returns>Returns an ICell representing the found cell or null if no cell is found.</returns>
        </member>
        <member name="M:Acey.ExcelX.IRange.FindAll(System.String,Acey.ExcelX.FindLookIn,Acey.ExcelX.FindLookAt,Acey.ExcelX.SearchOrder,System.Boolean)">
            <summary>
            Searches for the specified text according to the specified options.
            </summary>
            <param name="what">Specifies the text to find.</param>
            <param name="lookIn">Specifies whether to search formulas or values.</param>
            <param name="lookAt">Specifies partial or complete match.</param>
            <param name="searchOrder">Specifies whether to search by rows or by columns. </param>
            <param name="matchCase">Specifies whether text searches should match case.</param>
            <returns>Returns an ICellCollectionc representing the found cell collection or null if no cell is found. </returns>
        </member>
        <member name="M:Acey.ExcelX.IRange.GetStyle">
            <summary>
            Gets the style of the range object.
            </summary>
            <returns>The style of the range.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets style of the range.
            IStyle style = range.GetStyle();
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets style of the range.
            Dim style As IStyle = range.GetStyle()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.Group(Acey.ExcelX.GroupBy)">
            <summary>
            Groups current range.
            </summary>
            <param name="groupBy">This parameter specifies whether grouping should be performed by rows or by columns.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates a Range object by reference.
            IRange range = worksheet.Cells.CreateRange("E6:G10");
            
            //Groups current range.
            range.Group(GroupBy.ByRows);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("E6:G10")
            
            'Groups current range.
            range.Group(GroupBy.ByRows)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.Group(Acey.ExcelX.GroupBy,System.Boolean)">
            <summary>
            Groups current range.
            </summary>
            <param name="groupBy">This parameter specifies whether grouping should be performed by rows or by columns.</param>
            <param name="isCollapsed">Indicates whether group should be collapsed.</param>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates a Range object by reference.
            IRange range = worksheet.Cells.CreateRange("E6:G10");
            
            //Groups current range.
            range.Group(GroupBy.ByRows, false);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003); 
            
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("E6:G10")
            
            'Groups current range.
            range.Group(GroupBy.ByRows, True)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.Insert(Acey.ExcelX.InsertShiftDirection)">
            <summary>
            Inserts cells by shifting cells right or down and fixing up formulas and formats. 
            </summary>
            <param name="shiftDirection">Specifies whether to shift cells right or down.</param>
            <exception cref="T:System.InvalidOperationException">When opertion will cause some data to lost or some merged cells to unerge.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.Merge">
            <summary>
             Merges the cells in the represented range into a single merged cell.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Merges the cells in the represented range into a single merged cell.
            range.Merge();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Merges the cells in the represented range into a single merged cell.
            range.Merge()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">Operation is not valid for a partial merged cell.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRange.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the range to the specified location.
            </summary>
            <param name="row">The specified row.</param>
            <param name="column">The specified column.</param> 
            <example>
            The example shows how you might use this method.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a range by using range name.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Moves the range to the specified location
            range.MoveTo(3, 2);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\MoveRange.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a range by using range name.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Moves the range to the specified location
            range.MoveTo(3, 2)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\MoveRange.xls", FileFormat.Excel97To2003)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0 or greater than 65535. -or-
            <paramref name="column"/> is less than 0 or greater than 255.</exception>           
        </member>
        <member name="M:Acey.ExcelX.IRange.Select">
            <summary>
             Sets the current selection of the worksheet associated with the this range
                to the cells in this range.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IRange.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
        </member>
        <member name="M:Acey.ExcelX.IRange.SetBorders(Acey.ExcelX.BorderMembers,Acey.ExcelX.LineStyle,System.Drawing.Color)">
            <summary>
            Sets borders to this instance.
            </summary>
            <param name="borders">The specified border members.</param>
            <param name="lineStyle">Line Style.</param>
            <param name="lineColor">Line color.</param>
        </member>
        <member name="M:Acey.ExcelX.IRange.UnMerge">
            <summary>
            Converts merged cells in the represented range to normal cells.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates a Range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Converts merged cells in the represented range to normal cells.
            range.UnMerge();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\UnMerge.xls", FileFormat.Excel97To2003); 
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Creates a Range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Converts merged cells in the represented range to normal cells.
            range.UnMerge()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\UnMerge.xls", FileFormat.Excel97To2003)
            </code>
            </example>
             <exception cref="T:System.InvalidOperationException">Operation is not valid for a partial merged cell.</exception>        
        </member>
        <member name="M:Acey.ExcelX.IRange.Ungroup(Acey.ExcelX.GroupBy)">
            <summary>
            Ungroups current range.
            </summary>
            <param name="groupBy">Indicates type of ungrouping. Ungroup by columns or by rows.</param>
            <example>
             This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates a Range object by reference.
            IRange range = worksheet.Cells.CreateRange("B2:D12");
            
            //Ungroups current range.
            range.Ungroup(GroupBy.ByColumns);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Ungroup.xls", FileFormat.Excel97To2003);
            
            
             [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Creates a Range object.
            Dim range As IRange = worksheet.Cells.CreateRange("B2:D12")
            
            'Ungroups current range.
            range.Ungroup(GroupBy.ByColumns)
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Ungroup.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.AutoFilter(System.Int32,System.Object,Acey.ExcelX.AutoFilterOperator,System.Object,System.Boolean)">
            <summary>
            Adds autofilter dropdowns to the columns of the specified range if none exist,or removes autofilter dropdowns if they do exists.
            </summary>
            <param name="field"></param>
            <param name="criteria1"></param>
            <param name="op">Specifies the operator to use to associate two criteria applied by a filter.</param>
            <param name="criteria2"></param>
            <param name="visibleDropDown"></param>
            <example>
            How to auto filter the range object.
            <code>
            /// [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates two array object.
            object[,] array = new object[3, 2] { { "Name", "Score" }, { "Tom", 80 }, { "Jack", 90 } };
            
            //Imports array to the specified location of worksheet.
            worksheet.ImportArray(array, 1, 1);
            
            //Gets a range object by using valid reference.
            IRange range = worksheet.Cells.CreateRange("B2:C4");
            
            //Filters the specified range.
            range.AutoFilter(0, "=T*", AutoFilterOperator.And, null, true);
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRange.AutoFilter">
            <summary>
            Adds autofilter dropdowns to the columns of the specified range if none exist,or removes autofilter dropdowns if they do exists.
            </summary>
            <example>
            How to auto filter the range object.
            <code>
            /// [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Creates two array object.
            object[,] array = new object[3, 2] { { "Name", "Score" }, { "Tom", 80 }, { "Jack", 90 } };
            
            //Imports array to the specified location of worksheet.
            worksheet.ImportArray(array, 1, 1);
            
            //Gets a range object by using valid reference.
            IRange range = worksheet.Cells.CreateRange("B2:C4");
            
            //Filters the specified range.
            range.AutoFilter();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRange.CellFormat">
            <summary>
            Gets format of the Range.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.FirstColumn">
            <summary>
            Gets the number of the first column in the first area in the specified range.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.FirstRow">
            <summary>
            Gets the number of the first row of the first area in the range. 
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.IsMerged">
            <summary>
            Gets the property which specifies whether cells are merged.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.LastColumn">
            <summary>
            Gets the number of the last column in the specified range.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.LastRow">
            <summary>
            Gets the number of the last row in the specified range.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.MergeCells">
            <summary>
            Gets a range of cells that are merged into a single merged cell.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.StyleDefined">
            <summary>
            Returns true if the Style property of all cells represented by this IRange
                is the same, otherwise false is returned.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.WorkSheet">
            <summary>
             Gets the parent IWorksheet of this range.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRange.Item(System.String)">
            <summary>
            Gets a Cell object in this range by the name of cell. 
            </summary>
            <param name="cellName">the name of cell. e.g. A1</param>
            <returns>Return the cell object by name in range.</returns>
            <exception cref="T:System.ArgumentNullException">cellName is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid cell name.</exception>
        </member>
        <member name="P:Acey.ExcelX.IRange.Item(System.Int32,System.Int32)">
             <summary>
             Gets a Cell object in this range.
             </summary>
             <param name="rowIndex">a zero-based row index in the range.</param>
             <param name="columnIndex">a zero-based column index in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/>rowIndex is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/>columnIndex is out of range.</exception>
        </member>
        <member name="T:Acey.ExcelX.IFormatCondition">
            <summary>
            Specifies a conditional formatting.
            </summary>
            <example>
            How to get a Condition Formatting in a worksheet.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a Condition Formatting by using zero-based index.
            IFormatCondition formatCondition = formatConditionCollection[0];
            
            //Sets the operator to be used by the conditional format.
            formatCondition.Operator = OperatorType.Between;
            
            //Sets the first formual to the Condition Formatting.
            formatCondition.Formula1 = "=1";
            
            //Sets the second formual to the Condition Formatting.
            formatCondition.Formula2 = "=10";
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a Condition Formatting by using zero-based index.
            Dim formatCondition As IFormatCondition = formatConditionCollection(0)
            
            'Sets the operator to be used by the conditional format.
            formatCondition.Operator = OperatorType.Between;
            
            'Sets the first formual to the Condition Formatting.
             formatCondition.Formula1 = "=1"
             
            'Sets the second formual to the Condition Formatting.
            formatCondition.Formula2 = "=10"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFormatCondition.Formula1">
            <summary>
            Gets or sets the first formual.
            </summary>
            <remarks>
            Cannot use a direct reference to a worksheet range in Conditional Formatting formual. 
            </remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a Condition Formatting by using zero-based index.
            IFormatCondition formatCondition = formatConditionCollection[0];
            
            formatCondition.Formula1 = "=2";
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a Condition Formatting by using zero-based index.
            Dim formatCondition As IFormatCondition = formatConditionCollection(0)
            
            formatCondition.Formula1 = "=2"
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFormatCondition.Formula2">
            <summary>
            Gets or sets the second formual.
            </summary>
            <remarks>
            Cannot use a direct reference to a worksheet range in Conditional Formatting formual.
            </remarks>
        </member>
        <member name="P:Acey.ExcelX.IFormatCondition.Operator">
            <summary>
            Gets or sets the operator to be used by the conditional format.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFormatCondition.Style">
            <summary>
            Gets the style of the conditional formatting.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\CondictionFormatting.xls");
            
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a IConditionalFormattingCollection object of the worksheet.
            IConditionalFormattingCollection conditionalFormattingCollection = worksheet.ConditionalFormattings;
            
            //Gets a IFormatConditionCollection object by using zero-based index.
            IFormatConditionCollection formatConditionCollection = conditionalFormattingCollection[0];
            
            //Gets a Condition Formatting by using zero-based index.
            IFormatCondition formatCondition = formatConditionCollection[0];
            
            //Gets the style of the conditional formatting.
            IStyle style = formatCondition.Style;
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\CondictionFormatting.xls")
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a IConditionalFormattingCollection object of the worksheet.
            Dim conditionalFormattingCollection As IConditionalFormattingCollection = worksheet.ConditionalFormattings
            
            'Gets a IFormatConditionCollection object by using zero-based index.
            Dim formatConditionCollection As IFormatConditionCollection = conditionalFormattingCollection(0)
            
            'Gets a Condition Formatting by using zero-based index.
            Dim formatCondition As IFormatCondition = formatConditionCollection(0)
            
            'Gets the style of the conditional formatting.
            Dim style As IStyle = formatCondition.Style
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IFormatCondition.Type">
            <summary>
            Gets or sets type of the condition formatting.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.SheetVisibility">
            <summary>
             Specifies the visibility of a sheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetVisibility.Visible">
            <summary>
            Specifies that a worksheet is visible.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetVisibility.Hidden">
            <summary>
            Specifies that a worksheet is not visible.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SheetVisibility.VeryHidden">
            <summary>
            Specifies that a worksheet is not visible, and that the user is not presented
               with the option of making it visible.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.SearchOrder">
            <summary>
            Specifies whether to search by rows or by columns. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SearchOrder.ByRows">
            <summary>
            Specifies the search by rows.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.SearchOrder.ByColumns">
            <summary>
            Specifies the search by columns.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Pattern">
            <summary>
            Specifies the fill pattern.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.None">
            <summary>
            No pattern. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Solid">
            <summary>
            Solid color.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Gray50">
            <summary>
            50% gray.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Gray75">
            <summary>
            75% gray.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Gray25">
            <summary>
            25% gray.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.HorizontalStripe">
            <summary>
            Horizontal stripe. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.VerticalStripe">
            <summary>
            Vertical stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.DiagonalStripe">
            <summary>
            Diagonal stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThickDiagonalCrosshatch">
            <summary>
            Thick Diagonal crosshatch.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinVerticalStripe">
            <summary>
            Thin vertical stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Gray125">
            <summary>
            12.5% gray
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Pattern.Gray625">
            <summary>
            6.25% gray
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FontScript">
            <summary>
            Specifies whether superscript, subscript, or normal script is used.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontScript.None">
            <summary>
            Normal script
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontScript.SuperScript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontScript.SubScript">
            <summary>
             Subscript
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FindLookIn">
            <summary>
            Specifies whether to search formulas or values.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FindLookIn.Formulas">
            <summary>
            Specifies that formulas should be searched.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FindLookIn.Values">
            <summary>
            Specifies that values should be searched.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ILegendEntry">
            <summary>
            Represents a legend entry in a chart legend.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Legend object of the Chart object.
            ILegend legend = chart.Legend;
             
            //Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            ILegendEntryCollection legendEntries = legend.LegendEntries;
            
            //Gets a LegendEntry object by using zero-based index.
            ILegendEntry legendEntry = legendEntries[0];
            
            //Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI";
            
            //Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Legend object of the Chart object.
            Dim legend As ILegend = chart.Legend
            
            'Returns a collection of all the Acey.ExcelX.Charts.LegendEntry objects in the specified chart legend.
            Dim legendEntries As ILegendEntryCollection = legend.LegendEntries
            
            'Gets a LegendEntry object by using zero-based index.
            Dim legendEntry As ILegendEntry = legendEntries(0)
            
            'Sets font's name for the LegendEntry object.
            legendEntry.Font.Name = "Meiryo UI"
            
            'Sets font's size for the LegendEntry object.
            legendEntry.Font.Size = 18
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegendEntry.BackgroundMode">
            <summary>
            Gets and sets the display mode of the background.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegendEntry.Font">
            <summary>
            Returns a Acey.ExcelX.IFont object of the specified object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ILegendEntry.IsDeleted">
            <summary>
            Gets and sets whether the legend entry is deleted.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.GradientStyle">
            <summary>
            Represents excel shape shading style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.DiagonalDown">
            <summary>
            Represents diagonal down style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.DiagonalUp">
            <summary>
            Represents diagonal up style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.FromCenter">
            <summary>
            Represents from center style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.FromCorner">
            <summary>
            Represents from corner style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.Horizontal">
            <summary>
            Represents horizontal style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.GradientStyle.Vertical">
            <summary>
            Represents vertical style.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.DisplayUnitType">
            <summary>
            Represents the type of display unit.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Custom">
            <summary>
            Represents Custom display Unit
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.None">
            <summary>
            Display unit is None.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Hundreds">
            <summary>
            Display unit is Hundreds.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Thousands">
            <summary>
             Display unit is Thousands.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.TenThousands">
             <summary>
            Display unit is TenThousands.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.HundredThousands">
            <summary>
            Display unit is HundredThousands.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Millions">
            <summary>
            Display unit is Millions.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.TenMillions">
            <summary>
            Display unit is TenMillions.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.HundredMillions">
            <summary>
            Display unit is HundredMillions.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Billions">
            <summary>
            Display unit is Billions.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.DisplayUnitType.Trillions">
            <summary>
            Display unit is Trillions.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IWorkbookSetting">
            <summary>
            Represents all settings of the workbook.
            </summary>
            <example>
            How to get settings of workbook from a workbook object.
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets the calculation mode for the workbook.
            workbookSet.Calculation = CalculationMode.Manual;
            
            //Sets the workbook uses the 1904 date system. 
            workbookSet.Date1904 = true;
            
            //Sets the minimum value change required for iterative calculation to continue.
            workbookSet.MaxChange = 0.003;
            
            //Sets the iteration count for a calculation in iterative calculation mode
            workbookSet.MaxIterations = 200;
            
            //Sets recalculate the workbook before it is saved.
            workbookSet.RecalculateBeforeSave = true;
            
            //Sets to use A1 style in cell and range references.
            workbookSet.ReferenceStyle = ReferenceStyle.A1;
            
            //Sets that external link values are saved in the workbook.
            workbookSet.SaveLinkValues = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets the calculation mode for the workbook.
            workbookSet.Calculation = CalculationMode.Manual
            
            'Sets the workbook uses the 1904 date system. 
            workbookSet.Date1904 = True
            
            'Sets the minimum value change required for iterative calculation to continue.
            workbookSet.MaxChange = 0.003
            
            'Sets the iteration count for a calculation in iterative calculation mode
            workbookSet.MaxIterations = 200
            
            'Sets recalculate the workbook before it is saved.
            workbookSet.RecalculateBeforeSave = True
            
            'Sets to use A1 style in cell and range references.
            workbookSet.ReferenceStyle = ReferenceStyle.A1
            
            'Sets that external link values are saved in the workbook.
            workbookSet.SaveLinkValues = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.Calculation">
             <summary>
            Gets or sets the calculation mode for the workbook.
             </summary>
             <remarks>Default is Automatic.</remarks>
             <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a workbook object.
             IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
             //Gets all setings of the workbook.
             IWorkbookSetting workbookSet = workbook.WorkbookSetting;
             
             //Gets the calculation mode for the workbook.
             workbookSet.Calculation = CalculationMode.Manual;
             
             [Visual Basic]
             'Creates a workbook object.
             Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
             
             'Gets all setings of the workbook.
             Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
             
             'Gets the calculation mode for the workbook.
             workbookSet.Calculation = CalculationMode.Manual
             </code>
             </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.Date1904">
            <summary>
            True if the workbook uses the 1904 date system. 
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets the workbook uses the 1904 date system.
            workbookSet.Date1904 = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets the workbook uses the 1904 date system.
            workbookSet.Date1904 = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.Iteration">
            <summary>
            Gets or sets specifies whether to enable iterative calculation.
            </summary>
            <remarks>Default is false.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets specifies whether to enable iterative calculation.
            workbookSet.Iteration = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets specifies whether to enable iterative calculation.
            workbookSet.Iteration = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.MaxChange">
            <summary>
            Gets or sets the minimum value change required for iterative calculation to continue.
            </summary>
            <remarks>
            Default is 0.001. The number must be greater than or equal to zero.
            </remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets the minimum value change required for iterative calculation to continue.
            workbookSet.MaxChange = 0.003;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets the minimum value change required for iterative calculation to continue.
            workbookSet.MaxChange = 0.003
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">value less than 0.</exception>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.MaxIterations">
            <summary>
            Gets or sets the iteration count for a calculation in iterative calculation mode.
            </summary>
            <remarks>
            Default is 100. The number should be between 1 and 32767.  </remarks>   
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets the iteration count for a calculation in iterative calculation mode.
            workbookSet.MaxIterations = 200;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets the iteration count for a calculation in iterative calculation mode.
            workbookSet.MaxIterations = 200
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than 1 or greater than 32767.</exception>    
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.RecalculateBeforeSave">
            <summary>
            Gets or sets whether to recalculate the workbook before it is saved.
            </summary>
            <remarks>
            When specify calculationMode as Manual, the property will valid.
            </remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets whether to recalculate the workbook before it is saved.
            workbookSet.RecalculateBeforeSave = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets whether to recalculate the workbook before it is saved.
            workbookSet.RecalculateBeforeSave = True
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.ReferenceStyle">
            <summary>
            Gets or sets the property which specifies whether to use A1 style or R1C1
             style in cell and range references.
            </summary>
            <remarks> The default value is ReferenceStyle.A1.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets the property which specifies whether to use A1 style or R1C1 style.
            workbookSet.ReferenceStyle = ReferenceStyle.A1;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets the property which specifies whether to use A1 style or R1C1 style.
            workbookSet.ReferenceStyle = ReferenceStyle.A1
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IWorkbookSetting.SaveLinkValues">
            <summary>
            Gets or sets that external link values are saved in the workbook.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets all setings of the workbook.
            IWorkbookSetting workbookSet = workbook.WorkbookSetting;
            
            //Sets that external link values are saved in the workbook.
            workbookSet.SaveLinkValues = true;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets all setings of the workbook.
            Dim workbookSet As IWorkbookSetting = workbook.WorkbookSetting
            
            'Sets that external link values are saved in the workbook.
            workbookSet.SaveLinkValues = True
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.UnderlineStyle">
            <summary>
            Specifies the underline style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.UnderlineStyle.None">
            <summary>
             No underlining.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.UnderlineStyle.Single">
            <summary>
            Single underlining.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.UnderlineStyle.Double">
            <summary>
            Double thick underline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.UnderlineStyle.SingleAccounting">
            <summary>
            Single accounting underline.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.UnderlineStyle.DoubleAccounting">
            <summary>
             Double accounting underline.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.OperatorType">
            <summary>
            Specifies the operator to be used.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.Between">
            <summary>
             Between.
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.OperatorType.NotBetween">
            <summary>
             Not between.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.Equal">
            <summary>
            Equal.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.NotEqual">
            <summary>
            Not equal.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.GreaterThan">
            <summary>
             Greater than.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.LessThan">
            <summary>
             Less than.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.GreaterOrEqual">
            <summary>
             Greater than or equal to.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.LessOrEqual">
            <summary>
              Less than or equal to.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.OperatorType.None">
            <summary>
            No operator.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ICategoryAxis">
            <summary>
            Represents the chart Category Axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a CategoryAxis object of the Chart object.
            ICategoryAxis categoryAxis = chart.CategoryAxis;
             
            //Gets border of the CategoryAxis object.
            Acey.ExcelX.Drawing.ILine axisLine = categoryAxis.AxisLine;
            
            //Sets border's style of the CategoryAxis object.
            axisLine.Style = LineType.DarkGray;
            
            //Sets border's weight of the CategoryAxis object.
            axisLine.Weight = WeightType.WideLine;
            
            //Sets border's color of the CategoryAxis object.
            axisLine.Color = Color.Blue;
            
            //Gets title of the the CategoryAxis object.
            IAxisTitle axisTitle = categoryAxis.Title;
            
            //Sets title's text of the the CategoryAxis object.
            axisTitle.Text = "Region";
            
            //Sets the type of major tick mark for the specified axis.
            categoryAxis.MajorTickMark = TickMarkType.Cross;
            
            //Sets the type of minor tick mark for the specified axis.
            categoryAxis.MinorTickMark = TickMarkType.Outside;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic] 
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a CategoryAxis object of the Chart object.
            Dim categoryAxis As ICategoryAxis = chart.CategoryAxis
            
            'Gets border of the CategoryAxis object.
            Dim axisLine As Acey.ExcelX.Drawing.ILine = categoryAxis.AxisLine
            
            'Sets border's style of the CategoryAxis object.
            axisLine.Style = LineType.DarkGray
            
            'Sets border's weight of the CategoryAxis object.
            axisLine.Weight = WeightType.WideLine
            
            'Sets border's color of the CategoryAxis object.
            axisLine.Color = Color.Blue
            
            'Gets title of the the CategoryAxis object.
            Dim axisTitle As IAxisTitle = categoryAxis.Title
            
            'Sets title's text of the the CategoryAxis object.
            axisTitle.Text = "Region"
            
            'Sets the type of major tick mark for the specified axis.
            categoryAxis.MajorTickMark = TickMarkType.Cross
            
            'Sets the type of minor tick mark for the specified axis.
            categoryAxis.MinorTickMark = TickMarkType.Outside
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.AxisBetweenCategories">
            <summary>
            Represents if the value axis crosses the category axis between categories.
            </summary>
            <remarks> It doesn't apply to 3-D charts.</remarks>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.BaseUnit">
            <summary>
            Represents base unit for the specified category axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.CategoryType">
            <summary>
            Represents the category axis type.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.IsAutoBaseUnit">
            <summary>
            True if use automatic base units for the specified category axis.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.MajorUnitScale">
            <summary>
            Represents the major unit scale value for the category axis when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.MinorUnitScale">
            <summary>
            Represents the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels. Applies only to category and series axes.
            </summary>
            <remarks>The number must be between 1 and 31999.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than 1 or greater than 31999.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ICategoryAxis.TickMarkSpacing">
            <summary>
            Returns or sets the number of categories or series between tick marks. Applies only to category and series axes.
            </summary>
            <remarks>The number must be between 1 and 31999.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than 1 or greater than 31999.</exception>
        </member>
        <member name="T:Acey.ExcelX.Charts.LabelPositionType">
            <summary>
             Represents data label position type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Automatic">
            <summary>
            Specifies position is automatically determined by chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.OutsideEnd">
            <summary>
            Specifies position is outside end.  
            </summary>
            <remarks>Applies to Bar, Column, or Pie charts.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.InsideEnd">
            <summary>
            Specifies position is inside end.
            </summary>
            <remarks>Applies to Bar, Column, or Pie charts.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Center">
            <summary>
            Specifies position is center.
            </summary>
            <remarks>Applies to Bar, Column, Line, Bubble, Scatter, or Pie charts.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.InsideBase">
            <summary>
            Specifies position is inside base.
            </summary>
            <remarks> Applies to Bar or Column charts.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Above">
            <summary>
            Specifies position is above.
            </summary>
            <remarks>Applies to Line, Bubble, or Scatter chart group.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Below">
            <summary>
            Specifies position is below.
            </summary>
            <remarks>Applies to Line, Bubble, or Scatter chart group.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Left">
            <summary>
            Specifies position is left.
            </summary>
            <remarks>Applies to Line, Bubble, or Scatter chart group.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Right">
            <summary>
            Specifies position is right.
            </summary>
            <remarks>Applies to Line, Bubble, or Scatter charts.</remarks>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.BestFit">
            <summary>
             Specifies position is best fit.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.LabelPositionType.Moved">
            <summary>
             Specifies position is custom or moved.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ExcelxApplication">
            <summary>
            This class is implemented following the Abstract Factory pattern to create a workbook object.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.CreateWorkbook">
            <summary>  Creates a workbook object.
            </summary>
            <remarks>The default file format type is Excel97To2003.</remarks>
            <returns>a workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.CreateWorkbook(System.Int32)">
            <summary>
            Creates a Workbook object that the specified quantity of worksheets to create. It should be between 1 and 255.
            </summary>
            <param name="worksheetsQuantity">Quantity of worksheets to create.</param>
            <returns>A newly created Workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.CreateWorkbook(System.String[])">
            <summary>
            Creates a Workbook object that the specified name for each worksheet.
            </summary>
            <param name="names">Array of names for each worksheet.</param>
            <returns>A newly created Workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.Open(System.String)">
            <summary>  Opens the Specified file and loads the file informat to a workbook object.
            </summary>
            <param name="fileName">The Specified file.</param>
            <returns>a workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.VerifyLicenseX(System.String,System.String)">
            <summary>
            Verify a license
            </summary>
            <param name="accessKey">access Key</param>
            <param name="licenseName">license Name</param> 
            <returns>Return true if Verify successfully;otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.ExcelxApplication.VerifyLicenseX(System.String,System.String,System.String@)">
            <summary>
            Verify a license
            </summary>
            <param name="accessKey">access Key</param>
            <param name="licenseName">license Name</param>
            <param name="message">message information</param>
            <returns>Return true if Verify successfully;otherwise return false.</returns>
        </member>
        <member name="T:Acey.ExcelX.IValidation">
            <summary>
            Specifies a single set of data validation criteria defined for a range on this sheet.
            </summary>
            <example>
            How to get a Validation object from worksheet object.
            <code>
            [C#]
            //Creates a Workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Worksheet object using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Validation object collection of the Worksheet.
            IValidationCollection validations = worksheet.Validations;
            
            //Gets a Validation object by using zero-based index.
            IValidation validation = validations[0];
            
            //Sets to display an error message when the data validation fails.
            validation.ShowError = true;
            
            //Sets the style of error alert to be used.
            validation.AlertStyle = ValidationAlertType.Warning;
            
            //Sets the title of the error that is displayed.
            validation.ErrorTitle = "Warning";
             
            //Sets the message shown in the input prompt that is displayed when the cell is selected.
            validation.ErrorMessage = "Warning Message";
            
            [Visual Basic]
            'Creates a Workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Validation object collection of the Worksheet.
            Dim validations As IValidationCollection = worksheet.Validations
            
            'Gets a Validation object by using zero-based index.
            Dim validation As IValidation = validations(0)
            
            'Sets to display an error message when the data validation fails.
            validation.ShowError = True
            
            'Sets the style of error alert to be used.
            validation.AlertStyle = ValidationAlertType.Warning
            
            'Sets the title of the error that is displayed.
            validation.ErrorTitle = "Warning"
            
            'Sets the message shown in the input prompt that is displayed when the cell is selected.
            validation.ErrorMessage = "Warning Message"
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IValidation.AddRange(Acey.ExcelX.IRange)">
            <summary>
            Adds a range which data validation is applied.
            </summary>
            <param name="range">a range which data validation is applied</param>
            <exception cref="T:System.ArgumentNullException">range is null.</exception>
        </member>
        <member name="P:Acey.ExcelX.IValidation.AlertStyle">
            <summary>
            Gets or sets the style of error alert to be used.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.ErrorMessage">
            <summary>
            Specifies the error message that is displayed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.ErrorTitle">
            <summary>
             Gets or sets the title of the error that is displayed.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.Formula1">
            <summary>
            Gets or sets the first formula used in data validation.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.Formula2">
            <summary>
            Gets or sets the second formula used in data validation.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.IgnoreBlank">
            <summary>
            Gets or sets whether the data validation treats empty or blank entries as valid.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.InCellDropDown">
            <summary>
            Gets or sets whether to suppress the display of the in-cell drop-down when the cell is selected.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.InputMessage">
            <summary>
            Gets or sets the message shown in the input prompt that is displayed when the cell is selected.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.InputTitle">
            <summary>
            Gets or sets the title of the input prompt that is displayed when the cell is selected.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.Operator">
            <summary>
            Gets or sets the relational operator used with this data validation.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.ShowError">
            <summary>
            Gets or sets whether to display an error message when the data validation fails.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.ShowInput">
            <summary>
            Gets or sets whether to show an input prompt when the cell is selected.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.Type">
            <summary>
            Gets or sets the type of data validation.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IValidation.Ranges">
            <summary>
            Represents a collection of Range which contains the data validation settings.
            </summary>
            <remarks>The old validations on the area will not be removed if directly adding are to this list.</remarks>
        </member>
        <member name="T:Acey.ExcelX.ValidationAlertType">
            <summary>
            Specifies the style of error alert to be used in the error message.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationAlertType.Stop">
            <summary>
            Specifies that the data validation error style uses a stop icon in the error alert.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationAlertType.Warning">
            <summary>
            Specifies that the data validation error style uses a warning icon in the error alert.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValidationAlertType.Information">
            <summary>
            Specifies that the data validation error style uses an information icon in the error alert.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ReferenceStyle">
            <summary>
            Specifies the reference style.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ReferenceStyle.A1">
            <summary>
            default. Use A1 to return an A1-style reference.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ReferenceStyle.R1C1">
            <summary>
             Use R1C1 to return an R1C1-style reference.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ValueType">
             <summary>
            Specifies a value type.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.Blank">
            <summary>
            Blank. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.Error">
            <summary>
            Value contains error value. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.Text">
            <summary>
            Value is string.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.Bool">
            <summary>
            Value is boolean.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.Numric">
            <summary>
            Value is numeric.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.ValueType.DateTime">
            <summary>
            Value is datetime
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IExcelXApplication">
            <summary>
            The interface which  to create or open the workbook object.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.NewWorkbook">
             <summary>
            Creates a Workbook object.
             </summary>
             <returns>A newly created Workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.NewWorkbook(System.Int32)">
            <summary>
            Creates a Workbook object that the specified quantity of worksheets to create. It should be between 1 and 255.
            </summary>
            <remarks>It should be between 1 and 255.</remarks>
            <param name="worksheetsQuantity">Quantity of worksheets to create.</param>
            <returns>A newly created Workbook object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="worksheetsQuantity"/> less than 1 or greater than 255.</exception>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.NewWorkbook(System.String[])">
            <summary>
            Creates a Workbook object that the specified name for each worksheet.
            </summary>
            <param name="names">Array of names for each worksheet.</param>
            <returns>A newly created Workbook object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="names"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="names"/> is invalid name.</exception>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.OpenFile(System.String)">
            <summary>
            Gets a Workbook object by opening a excel file.
            </summary>
            <param name="fileName">The specified file path.</param>
            <returns>A Workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.OpenFile(System.String,System.Boolean)">
            <summary>
            Gets a Workbook object by opening a excel file.
            </summary>
            <param name="fileName">The specified file path.</param>
            <param name="readOnly">whether readonly.</param>
            <returns>A Workbook object.</returns>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.VerifyLicenseX(System.String,System.String)">
            <summary>
            Verify a license.
            </summary>
            <param name="accessKey">access Key</param>
            <param name="licenseName">license Name</param> 
            <returns>Return true if Verify successfully;otherwise return false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IExcelXApplication.VerifyLicenseX(System.String,System.String,System.String@)">
            <summary>
            Verify a license.
            </summary>
            <param name="accessKey">access Key</param>
            <param name="licenseName">license Name</param>
            <param name="message">message information</param>
            <returns>Return true if Verify successfully;otherwise return false.</returns>
        </member>
        <member name="T:Acey.ExcelX.Drawing.ITextBox">
            <summary>
            Represents a textbox.
            </summary>
            <example>
             This example shows how you might use this object:
             <code>
             [C#]
             //Creates a Workbook object by opening a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
              
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a TextBox object collection of the Worksheet object.
             ITextBoxCollection textboxes = worksheet.TextBoxes;
             
             //Gets a TextBox object by using zero-based index.
             ITextBox textbox = textboxes[0];
             
            //Sets text of the TextBox object.
             textbox.Text = "Acey Office";
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object by opening a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a TextBox object collection of the Worksheet object.
            Dim textboxes As ITextBoxCollection = worksheet.TextBoxes
            
            'Gets a TextBox object by using zero-based index.
            Dim textbox As ITextBox = textboxes(0)
            
            'Sets text of the TextBox object.
            textbox.Text = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
             </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Drawing.ITextBox.Delete">
            <summary>
            Deletes the TextBox object.
            </summary>
            <example>
             This example shows how you might use this method:
             <code>
             [C#]
             //Creates a Workbook object by opening a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
              
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a TextBox object collection of the Worksheet object.
             ITextBoxCollection textboxes = worksheet.TextBoxes;
             
             //Gets a TextBox object by using zero-based index.
             ITextBox textBox = textboxes[0];
             
            //Deletes the TextBox object.
             textBox.Delete();
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object by opening a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a TextBox object collection of the Worksheet object.
            Dim textboxes As ITextBoxCollection = worksheet.TextBoxes
            
            'Gets a TextBox object by using zero-based index.
            Dim textBox As ITextBox = textboxes(0)
            
            'Deletes the TextBox object.
            textBox.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
             </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Drawing.ITextBox.Shape">
            <summary>
             Get a Shape object that represents the TextBox object.
            </summary>
            <example>
             This example shows how you might use this property:
             <code>
             [C#]
             //Creates a Workbook object by opening a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\TextBox.xls");
              
             //Gets a Worksheet object by using zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets a TextBox object collection of the Worksheet object.
             ITextBoxCollection textboxes = worksheet.TextBoxes;
             
             //Gets a TextBox object by using zero-based index.
             ITextBox textBox = textboxes[0];
             
            // Get a Shape object that represents the TextBox object.
            IShape shape = textBox.Shape;
            
            //Sets alternative text of the Shape object.
            shape.AlternativeText = "Acey Office";
             
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Creates a Workbook object by opening a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\TextBox.xls")
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a TextBox object collection of the Worksheet object.
            Dim textboxes As ITextBoxCollection = worksheet.TextBoxes
            
            'Gets a TextBox object by using zero-based index.
            Dim tb textBox ITextBox = textboxes(0)
            
            'Get a Shape object that represents the TextBox object.
            Dim shape As IShape = textBox.Shape
            
            'Sets alternative text of the Shape object.
            shape.AlternativeText = "Acey Office"
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003) 
             </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IErrorBar">
            <summary>
            Represents the error bars on a chart series.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Represents the error bars on a chart series.
            IErrorBar errorBar = series.ErrorBarsY;
            
            //Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus;
            
            //Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage;
            
            //Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10;
            
            //Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = true;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Represents the error bars on a chart series.
            Dim errorBar As IErrorBar = series.ErrorBarsY
            
            'Sets the direction of the error bars.
            errorBar.DisplayType = ErrorBarDisplayType.Plus
            
            'Sets the error amount type of the error bars.
            errorBar.Type = ErrorBarType.Percentage
            
            'Sets the fixed value, percentage, or number of standard deviations for the error bars.
            errorBar.Amount = 10
            
            'Sets whether the error bars are T-shaped.
            errorBar.ShowMarkerTTop = True
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IErrorBar.Delete">
            <summary>
            Deletes the ErrorBar object.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Represents the error bars on a chart series.
            IErrorBar errorBar = series.ErrorBarsY;
            
            //Deletes the ErrorBar object.
            errorBar.Delete();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Represents the error bars on a chart series.
            Dim errorBar As IErrorBar = series.ErrorBarsY
            
            'Deletes the ErrorBar object.
            errorBar.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.Border">
            <summary>
            Gets a Acey.ExcelX.Drawing.ILine of the ErrorBar object.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.DisplayType">
            <summary>
            Gets or sets the direction of the error bars.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.Amount">
            <summary>
            Gets or sets the fixed value, percentage, or number of standard deviations for the error bars.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.Type">
            <summary>
            Gets or sets the error amount type of the error bars.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.ShowMarkerTTop">
            <summary>
            Gets or sets whether the error bars are T-shaped.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.MinusValue">
            <summary>
            Represents positive error amount when error bar type is Custom.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IErrorBar.PlusValue">
            <summary>
            Represents negative error amount when error bar type is Custom.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IDisplayUnitLabel">
            <summary>
            Represents the display unit label.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
                 
            //Gets a DisplayUnitLabel object of the ValueAxis object.
            IDisplayUnitLabel displayUnitLabel = valueAxis.DisplayUnitLabel;
            
            //Sets shadow of the DisplayUnitLabel object.
            displayUnitLabel.Shadow = true;
            
            //Gets a Characters object of the DisplayUnitLabel object.
            ICharacters characters = displayUnitLabel.Characters;
            
            //Sets font' bold of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Bold = true;
            
            //Sets font' size of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Size = 16;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Gets a DisplayUnitLabel object of the ValueAxis object.
            Dim displayUnitLabel As IDisplayUnitLabel = valueAxis.DisplayUnitLabel
            
            'Sets shadow of the DisplayUnitLabel object.
            displayUnitLabel.Shadow = True
            
            'Gets a Characters object of the DisplayUnitLabel object.
            Dim characters As ICharacters = displayUnitLabel.Characters
            
            'Sets font' bold of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Bold = True
            
            'Sets font' size of characters at the specified position.
            characters.SubCharacters(0, 2).Font.Size = 16
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Drawing.WeightType">
            <summary>
            Specifies the thickness of the line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.WeightType.Hairline">
            <summary>
            Represent a hair line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.WeightType.Narrowline">
            <summary>
            Represent a narrow(single) line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.WeightType.Mediumline">
            <summary>
            Represent a medium (double) line.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.WeightType.WideLine">
            <summary>
            Represent a wide (triple) line.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Drawing.CheckState">
            <summary>
            Specifies check state of the check box.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.CheckState.UnChecked">
            <summary>
            Indicates that checkbox is unchecked.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.CheckState.Checked">
            <summary>
            Indicates that checkbox is checked.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.CheckState.Mixed">
            <summary>
            Mixed state.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IVPageBreakCollection">
            <summary>
            Specifies a list of all explicit column page breaks in the sheet.
            </summary>
            <example>
            How to get a collection of vertical page break objects from a worksheet object.
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection from a workbook object.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet object from the worksheet collection by using zero-based index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a vertical page break collection from the worksheet object.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
             
            //Removes the specified zero-based index in vertical page break collection.
            vPageBreaks.RemoveAt(0);
            
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection from a workbook object.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet object from the worksheet collection by using zero-based index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a vertical page break collection from the worksheet object.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Removes the specified zero-based index in vertical page break collection.
            vPageBreaks.RemoveAt(0)
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IVPageBreakCollection.Add(Acey.ExcelX.IRange)">
            <summary>
            Adds a new vertical page break to a worksheet and returns a reference to it.  
            </summary>
            <param name="before"> The range before which to add the vertical page break.</param>
            <returns> The vertical page break.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a worksheet collection of the workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a range object.
            IRange range = worksheet.Cells.CreateRange("A1:B2");
            
            //Gets a column page breaks collection of the worksheet.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks; 
             
            //Adds a vertical page break.
            IVPageBreak vPageBreak = vPageBreaks.Add(range);
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet collection of the workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a range object.
            Dim range As IRange = worksheet.Cells.CreateRange("A1:B2")
            
            'Gets a column page breaks collection of the worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Adds a vertical page break.
            Dim vPageBreak As IVPageBreak = vPageBreaks.Add(range)
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="before"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.IVPageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified zero-based index.
            </summary>
            <param name="index">the specified zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to IVPageBreakCollection.Count.</exception>
        </member>
        <member name="P:Acey.ExcelX.IVPageBreakCollection.Count">
            <summary>
            Gets the number of column page breaks.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection of the workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets a column page breaks collection of the worksheet.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
             
            //Gets the number of column page breaks.
            int count = vPageBreaks.Count;
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection of the workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets a column page breaks collection of the worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Gets the number of column page breaks.
            Dim count As Integer = vPageBreaks.Count
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.IVPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets the vertical page break specified by the zero based index.
            </summary>
            <param name="index">The zero-based index of the vertical page break.</param>
            <returns>The vertical page break at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a worksheet collection of the workbook.
            IWorksheetCollection worksheets = workbook.Worksheets;
            
            //Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            IWorksheet worksheet = worksheets[0];
            
            //Gets column page breaks collection of the worksheet.
            IVPageBreakCollection vPageBreaks = worksheet.VPageBreaks;
             
            //Gets column page break by using zero-based index.
            IVPageBreak vPageBreak = vPageBreaks[0];
            
            [Visual Basic]
            'Creates a workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet collection of the workbook.
            Dim worksheets As IWorksheetCollection = workbook.Worksheets
            
            'Gets a worksheet in the worksheet collection by using zero-based worksheet index.
            Dim worksheet As IWorksheet = worksheets(0)
            
            'Gets column page breaks collection of the worksheet.
            Dim vPageBreaks As IVPageBreakCollection = worksheet.VPageBreaks
            
            'Gets column page break by using zero-based index.
            Dim vPageBreak As IVPageBreak = vPageBreaks(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than IVPageBreakCollection.Count.</exception>       
        </member>
        <member name="T:Acey.ExcelX.IRowCollection">
            <summary>
            Collects the objects that represent the individual rows in a worksheet.
            </summary>
            <example>
            How to get a collection of row object in a worksheet.
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[0]; 
            
            //Clears content of the row object.
            row.ClearContent();
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(0)
            
            'Clears content of the row object.
            row.ClearContent()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRowCollection.Contains(System.Int32)">
            <summary>
            Gets wether the collection contains the speicifed row index.
            </summary>
            <param name="rowIndex">zero-based row index.</param>
            <returns>True if exists in the collection; otherwise false. </returns>
        </member>
        <member name="M:Acey.ExcelX.IRowCollection.Remove(System.Int32)">
            <summary>
            Removes the speicifed row index.
            </summary>
            <param name="rowIndex">zero-based row index.</param>
            <returns>True if delete the speicifed row index; otherwise false.</returns>
        </member>
        <member name="M:Acey.ExcelX.IRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index
            </summary>
            <param name="index">The specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than IRowCollection.Count.</exception>
        </member>
        <member name="M:Acey.ExcelX.IRowCollection.Clear">
            <summary>
            Clears all rows and cells.
            </summary>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a workbook object using reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a Row object collection in the Worksheet object.
            IRowCollection rows = worksheet.Rows; 
            
            //Clears all rows and cells.
            rows.Clear();
            
            
            [Visual Basic] 
            'Creates a workbook object using reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a worksheet object using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Row object collection in the Worksheet object.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Clears all rows and cells.
            rows.Clear()
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.IRowCollection.GetRowByIndex(System.Int32)">
            <summary>
            Gets the row object in the collection at the specified position.
            </summary>
            <param name="index">The specified position.</param>
            <returns>The Row object at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to count of row object collection.</exception>
        </member>
        <member name="P:Acey.ExcelX.IRowCollection.Count">
            <summary>
            Gets the used Rows' count
            //Gets the number of the Row object collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IRowCollection.WorkSheet">
            <summary>
            Gets the parent worksheet object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows;
            
            //Gets the parent worksheet object.
            IWorksheet parentWorksheet = rows.WorkSheet;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets the parent worksheet object.
            Dim parentWorksheet As IWorksheet = rows.WorkSheet
            </code> 
            </example>
        </member>
        <member name="P:Acey.ExcelX.IRowCollection.Item(System.Int32)">
            <summary>
            Get a Row object by zero-based row index. The Row object will be instantiated if it does not exist.
            </summary>
            <param name="rowIndex"> The zero-based index of the row.</param>
            <returns>The row at th specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
             
            //Gets a worksheet by using zero-based worksheet index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets a row collection of the worksheet.
            IRowCollection rows = worksheet.Rows; 
            
            //Gets a row object by using zero-based row index.
            IRow row = rows[0];
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a worksheet by using zero-based worksheet index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a row collection of the worksheet.
            Dim rows As IRowCollection = worksheet.Rows
            
            'Gets a row object by using zero-based row index.
            Dim row As IRow = rows(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex"/> is less than 0.-or-<paramref name="rowIndex"/> is equal to or greater than IRowCollection.Count.</exception>      
        </member>
        <member name="T:Acey.ExcelX.INameCollection">
            <summary>
            Gets the collection of defined names in a workbook.
            </summary>
            <example>
            <code>
            [C#]
            //Creates a Workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            [Visual Basic]
            'Creates a Workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.INameCollection.Add(System.String,System.String)">
            <summary>
            Adds a name to the collection, or modifies the name if it already exists.
            </summary>
            <param name="name">Specifies the name of the defined name.</param>
            <param name="formula">Specifies the formula to assign to the defined name.</param>
            <returns>The created or modified defined name.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Adds a define name in workbook object.
            IName nameObject =  names.Add("abc", "=Sheet1!$A$1");
            
            [Visual Basic]
            'Creates a Workbook.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Adds a define name in workbook object.
            Dim nameObject As IName = names.Add("abc", "=Sheet1!$A$1")
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="M:Acey.ExcelX.INameCollection.Clear">
            <summary>
            Clears all of name in name collection.
            </summary>
        </member>
        <member name="M:Acey.ExcelX.INameCollection.Contains(System.String)">
            <summary> 
            Returns whether name exists.
            </summary>
            <param name="name">The name of define name</param>
            <returns>True, if name exists, otherwise false.</returns>
            <example>
            This example shows how you might use this method:
            <code>
            [C#]
            //Creates a Workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Gets whether name exists.
            bool isContains = names.Contains("abc");
            
            [Visual Basic]
            'Creates a Workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets whether name exists.
            Dim isContains As Boolean = names.Contains("abc")
            </code>
            </example>
        </member>
        <member name="M:Acey.ExcelX.INameCollection.Remove(System.String)">
            <summary>
            Removes the name of name object.
            </summary>
            <param name="name">the name of name object</param>
            <returns>Returns true if is removed, otherwise returns false.</returns>
        </member>
        <member name="M:Acey.ExcelX.INameCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the speified zero-based index.
            </summary>
            <param name="index">the speified zero-based index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or greater than or equal to the Count of Name collection.</exception>
        </member>
        <member name="P:Acey.ExcelX.INameCollection.Count">
            <summary>
            Gets the number of defined names in the workbook.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.INameCollection.Item(System.Int32)">
            <summary>
            Gets the defined name at the specified index.
            </summary>
            <param name="index">The zero-based index of the define name.</param>
            <returns>The define name at the specified index.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
            
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Gets a Name by zero-based name index.
            IName name = names[0];
             
            [Visual Basic]
            'Creates a Workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a Name by zero-based name index.
            Dim name As IName = names(0)
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  is less than 0.-or-<paramref name="index"/>  is equal to or greater than Count.</exception>        
        </member>
        <member name="P:Acey.ExcelX.INameCollection.Item(System.String)">
            <summary>
            Gets the defined name specified by name.
            </summary>
            <param name="name">The name of define name.</param>
            <returns>Gets the defined name specified by name. If don't exist the name object of name, return null.</returns>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a Workbook by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\book1.xls");
             
            //Gets a Name object collection in the Workbook.
            INameCollection names = workbook.Names;
            
            //Gets a Name object by using name.
            IName name = names["abc"];
            
            [Visual Basic]
            'Creates a Workbook by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\book1.xls")
            
            'Gets a Name object collection in the Workbook.
            Dim names As INameCollection = workbook.Names
            
            'Gets a Name object by using name.
            Dim name As IName = names("abc")
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.VertAlign">
            <summary>
            The VertAlign enumeration specifies the vertical alignment.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.VertAlign.Top">
            <summary>
            Specifies top alignment.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.VertAlign.Center">
            <summary>
            Specifies center alignment.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.VertAlign.Bottom">
             <summary>
            Specifies bottom alignment.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.VertAlign.Justify">
            <summary>
            Specifies justify alignment.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.VertAlign.Distributed">
            <summary>
            Specifies distributed alignment.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FontFamily">
            <summary>
             Specifies the font family this font belongs to.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.NotApplicable">
            <summary>
            Dontcare Specifies a generic family name. This name is used when information about a font does not exist or does not matter. The default font is used.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.Roman">
            <summary>
            Roman Specifies a proportional font with serifs. An example is Times New Roman. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.Swiss">
            <summary>
            Swiss Specifies a proportional font without serifs. An example is Arial. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.Modern">
            <summary>
            Modern Specifies a monospace font with or without serifs. Monospace fonts are usually modern; examples include Pica, Elite, and Courier New. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.Script">
            <summary>
            Script Specifies a font that is designed to look like handwriting; examples include Script and Cursive. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FontFamily.Decorative">
            <summary>
            Decorative Specifies a novelty font. An example is Old English. 
            </summary>
        </member>
        <member name="T:Acey.ExcelX.FindLookAt">
            <summary>
            Specifies partial or complete match. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FindLookAt.Part">
            <summary>
            Specifies that a partial match will be accepted.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.FindLookAt.Whole">
            <summary>
            Specifies that a complete match will be required.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartPointCollection">
            <summary>
            A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            IChartPointCollection points = series.Points;
            
            //Gets a ChartPoint object by using zero-based index.
            IChartPoint point = points[1];
            
            //Sets shadow of the ChartPoint object.
            point.Shadow = true;
            
            //Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'A collection of all the Acey.ExcelX.Charts.IChartPoint objects in the specified series in a chart.
            Dim points As IChartPointCollection = series.Points
            
            'Gets a ChartPoint object by using zero-based index.
            Dim point As IChartPoint = points(1)
            
            'Sets shadow of the ChartPoint object.
            point.Shadow = True
            
            'Sets the type of data marker  in a line chart, scatter chart, or radar chart.
            point.MarkerStyle = ChartMarkerType.Circle
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPointCollection.Count">
            <summary>
            Gets the number of the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartPointCollection.Item(System.Int32)">
            <summary>
            Gets a ChartPoint object at the specified zero-based index.
            </summary>
            <param name="index">The specified zero-based index.</param>
            <returns>A ChartPoint object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less then zero or greater than or equal to IChartPointCollection.Count.</exception>
        </member>
        <member name="T:Acey.ExcelX.Charts.TrendlineType">
            <summary>
            Represents the trendline type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.Polynomial">
            <summary>
            Polynomial
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.Exponential">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.Logarithmic">
            <summary>
            Logarithmic
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.Power">
            <summary>
            Power
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.MovingAverage">
            <summary>
            Moving average
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.TrendlineType.Linear">
            <summary>
            Linear
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.RowCol">
            <summary>
            Specifies the way the data is to be plotted.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.RowCol.Rows">
            <summary>
            Rows
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.RowCol.Columns">
            <summary>
            Columns
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.ChartType">
            <summary>
            Specifes type of the chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Area">
            <summary>
            Represents Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Area3D">
            <summary>
            Represents 3D Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.AreaStacked">
            <summary>
            Represents Stacked Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.AreaStacked100">
            <summary>
            Represents 100% Stacked Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.AreaStacked1003D">
            <summary>
            Represents 3D 100% Stacked Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.AreaStacked3D">
            <summary>
            Represents 3D Stacked Area Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarClustered">
            <summary>
            Represents Clustered Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarClustered3D">
            <summary>
            Represents 3D Colustered Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarStacked">
            <summary>
            Represents Stacked Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarStacked100">
            <summary>
            Represents 100% Stacked Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarStacked1003D">
            <summary>
            Represents 3D 100% Stacked Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.BarStacked3D">
            <summary>
            Represents 3D Stacked Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Bubble">
            <summary>
            Represents Bubble Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Bubble3D">
            <summary>
            Represents 3D Bubble Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Column3D">
            <summary>
            Represents 3D Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnClustered">
            <summary>
            Represents Clustered Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnClustered3D">
            <summary>
            Represents 3D Colustered Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnStacked">
            <summary>
            Represents Stacked Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnStacked100">
            <summary>
            Represents 100% Stacked Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnStacked1003D">
            <summary>
            Represents 3D 100% Stacked Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ColumnStacked3D">
            <summary>
            Represents 3D Stacked Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Cone">
            <summary>
            Represents Cone Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeStacked">
            <summary>
            Represents Stacked Cone Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeStacked100">
            <summary>
            Represents Stacked Cone Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeBar">
            <summary>
            Represents Conical Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeBarStacked">
            <summary>
            Represents the Cone Bar Stacked chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeBarStacked100">
            <summary>
            Represents the Cone Bar Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ConeColumn3D">
            <summary>
             Represents the Cone column 3D chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Cylinder">
            <summary>
            Represents Cylinder Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderStacked">
            <summary>
            Represents the Cylinder Stacked chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderStacked100">
            <summary>
            Represents the Cylinder Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderBar">
            <summary>
            Represents the Cylinder Bar chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderBarStacked">
            <summary>
            Represents the Cylinder Bar Stacked chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderBarStacked100">
            <summary>
            Represents the Cylinder Bar Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.CylinderColumn3D">
            <summary>
            Represents 3D Cylinder Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Doughnut">
            <summary>
            Represents Doughnut Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.DoughnutExploded">
            <summary>
            Represents Exploded Doughnut Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Line">
            <summary>
            Represents the Line chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Line3D">
            <summary>
            Represents the Line 3D chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.LineMarkers">
            <summary>
            Represents the Line Markers chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.LineMarkersStacked">
            <summary>
            Represents the Line Markers Stacked chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.LineMarkersStacked100">
            <summary>
            Represents the Line Markers Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.LineStacked">
            <summary>
            Represents Stacked Line Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.LineStacked100">
            <summary>
            Represents the Line Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Pie">
            <summary>
            Represents Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Pie3D">
            <summary>
            Represents 3D Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PieBar">
            <summary>
            Represents Bar of Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PieExploded">
            <summary>
            Represents Exploded Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PieExploded3D">
            <summary>
            Represents 3D Exploded Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PieOfPie">
            <summary>
            Represents Pie of Pie Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Pyramid">
            <summary>
            Represents Pyramid Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidStacked">
            <summary>
            Represents Stacked Pyramid Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidStacked100">
            <summary>
            Represents the Pyramid Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidBar">
            <summary>
            Represents Pyramid Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidBarStacked">
            <summary>
            Represents Stacked Pyramid Bar Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidBarStacked100">
            <summary>
            Represents the Pyramid Bar Stacked 100 chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.PyramidColumn3D">
            <summary>
            Represents 3D Pyramid Column Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Radar">
            <summary>
            Represents the Radar chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.RadarFilled">
            <summary>
            Represents the Radar Filled chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.RadarMarkers">
            <summary>
            Represents the Radar Markers chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.StockHighLowClose">
            <summary>
            Represents High-Low-Close Stock Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.StockOpenHighLowClose">
            <summary>
            Represents Open-High-Low-Close Stock Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.StockVolumeHighLowClose">
            <summary>
            Represents Volume-High-Low-Close Stock Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.StockVolumeOpenHighLowClose">
            <summary>
            Represents Volume-Open-High-Low-Close Stock Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Surface3D">
            <summary>
            3D Surface Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.SurfaceContour">
            <summary>
            Contour Chart
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.SurfaceContourWireframe">
            <summary>
            Wireframe Contour Chart
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.SurfaceWireframe3D">
            <summary>
            Wireframe 3D Surface Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.Scatter">
            <summary>
            Represents Scatter Chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ScatterLine">
            <summary>
            Represents the ScatterLine chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ScatterLineMarkers">
             <summary>
            Represents the ScatterLineMarkers chart type.
             </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ScatterSmoothedLine">
            <summary>
            Represents the ScatterSmoothedLine chart type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.ChartType.ScatterSmoothedLineMarkers">
            <summary>
            Represents the ScatterSmoothedLineMarkers chart type.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.Bar3DShapeType">
            <summary>
            Specifies the shape used with the 3-D bar or column chart.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.Box">
            <summary>
            Box.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.PyramidToPoint">
            <summary>
            Pyramid, coming to point at value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.PyramidToMax">
            <summary>
            Pyramid, truncated at value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.Cylinder">
            <summary>
            Cylinder.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.ConeToPoint">
            <summary>
            Cone, coming to point at value.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.Bar3DShapeType.ConeToMax">
            <summary>
            Cone, truncated at value.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.ITab">
            <summary>
            Represents a sheet tab.
            </summary>
            <example>
            How to get tab object from worksheet object.
            <code>
            [C#]
            //Creates a Workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Tab object of the Worksheet.
            ITab tab = worksheet.Tab;
            
            //Sets the color of sheet tab.
            tab.Color = System.Drawing.Color.Blue;
            
            //Sets the tint and shade value to be applied to the color.
            tab.TintAndShade = 0.2;
            
            [Visual Basic]
            'Creates a Workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Tab object of the Worksheet.
            Dim tab As ITab = worksheet.Tab
            
            'Sets the color of sheet tab.
            tab.Color = System.Drawing.Color.Blue
            
            'Sets the tint and shade value to be applied to the color.
            tab.TintAndShade = 0.2
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ITab.Color">
            <summary>
            Gets or sets the color of sheet tab.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Tab object of the Worksheet.
            ITab tab = worksheet.Tab;
            
            //Sets the color of sheet tab.
            tab.Color = System.Drawing.Color.Red;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Tab object of the Worksheet.
            Dim tab As ITab = worksheet.Tab
            
            'Sets the color of sheet tab.
            tab.Color = System.Drawing.Color.Red
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.ITab.TintAndShade">
            <summary>
            Gets or sets the tint and shade value to be applied to the color.
            </summary>
            <remarks>Should be greater than or equal to -1.0 and less than or equal to 1.0.</remarks>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
            //Creates a workbook object.
            IWorkbook workbook = ExcelxApplication.CreateWorkbook();
            
            //Gets a Worksheet object by using zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Gets a Tab object of the Worksheet.
            ITab tab =worksheet.Tab;
            
            //Set the tint and shade value to be applied to the color.
            tab.TintAndShade = 0.2;
            
            [Visual Basic]
            'Creates a workbook object.
            Dim workbook As IWorkbook = ExcelxApplication.CreateWorkbook()
            
            'Gets a Worksheet object by using zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets a Tab object of the Worksheet.
            Dim tab As ITab = worksheet.Tab
            
            'Set the tint and shade value to be applied to the color.
            tab.TintAndShade = 0.2
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">value greater than 1.0 or less than -1.0.</exception>
        </member>
        <member name="T:Acey.ExcelX.PaperSize">
            <summary>
            Specifies the size of the paper.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Letter">
            <summary>
            Letter (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.LetterSmall">
            <summary>
            Letter Small (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Tabloid">
            <summary>
             Tabloid (11 in. x 17 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Ledger">
            <summary>
            Ledger (17 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Legal">
            <summary>
            Legal (8-1/2 in. x 14 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Statement">
            <summary>
            Statement (5-1/2 in. x 8-1/2 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Executive">
            <summary>
             Executive (7-1/2 in. x 10-1/2 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.A3">
            <summary>
             A3 (297 mm x 420 mm)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.A4">
            <summary>
              A4 (210 mm x 297 mm)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.A4Small">
            <summary>
             A4 Small (210 mm x 297 mm)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.A5">
            <summary>
             A5 (148 mm x 210 mm)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.B4">
            <summary>
            B4 (JIS) (250mm x 354mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.B5">
            <summary>
            B5 (JIS) (182mm x 257 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Folio">
            <summary>
            Folio (8-1/2 in. x 13 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Quarto">
            <summary>
             Quarto (215 mm x 275 mm)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper10x14">
            <summary>
             10 in. x 14 in.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper11x17">
            <summary>
            11 in. x 17 in.
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Note">
            <summary>
              Note (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Envelope9">
            <summary>
            Envelope #9 (3-7/8 in. x 8-7/8 in.)
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Envelope10">
            <summary>
             Envelope #10 (4-1/8 in. x 9-1/2 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Envelope11">
            <summary>
            Envelope #11 (4-1/2 in. x 10-3/8 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Envelope12">
            <summary>
             Envelope #12 (4-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Envelope14">
            <summary>
            Envelope #14 (5 in. x 11-1/2 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Csheet">
            <summary>
             C size sheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Dsheet">
            <summary>
            D size sheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Esheet">
            <summary>
             E size sheet.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeDL">
            <summary>
            Envelope DL (110 mm x 220 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeC5">
            <summary>
            Envelope C5 (162 mm x 229 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeC3">
            <summary>
             Envelope C3 (324 mm x 458 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeC4">
            <summary>
             Envelope C4 (229 mm x 324 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeC6">
            <summary>
            Envelope C6 (114 mm x 162 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeC65">
            <summary>
            Envelope C65 (114 mm x 229 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeB4">
            <summary>
             Envelope B4 (250 mm x 353 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeB5">
            <summary>
            Envelope B5 (176 mm x 250 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeB6">
            <summary>
             Envelope B6 (176 mm x 125 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeItaly">
            <summary>
            Envelope (110 mm x 230 mm).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopeMonarch">
            <summary>
             Envelope Monarch (3-7/8 in. x 7-1/2 in.).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.EnvelopePersonal">
            <summary>
             Envelope (3-5/8 in. x 6-1/2 in.).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.FanfoldUS">
            <summary>
             U.S. Standard Fanfold (14-7/8 in. x 11 in.).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.FanfoldStdGerman">
            <summary>
            German Legal Fanfold (8-1/2 in. x 13 in.).
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.FanfoldLegalGerman">
            <summary>
             German Legal Fanfold (8-1/2 in. x 13 in.)
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperISOB4">
            <summary>
            B4 (ISO) 250 x 353 mm
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapanesePostcard">
            <summary>
            Japanese Postcard (100mm × 148mm)
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper9x11">
            <summary>
            9 × 11
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper10x11">
            <summary>
            10 × 11
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper15x11">
            <summary>
            15 × 11
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperEnvelopeInvite">
            <summary>
            Envelope Invite(220mm × 220mm)
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLetterExtra">
            <summary>
            US Letter Extra 9 \275 x 12 in
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLegalExtra">
            <summary>
            US Legal Extra 9 \275 x 15 in
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperTabloidExtra">
            <summary>
            US Tabloid Extra 11.69 x 18 in
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA4Extra">
            <summary>
            A4 Extra 9.27 x 12.69 in
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLetterTransverse">
            <summary>
            Letter Transverse 8 \275 x 11 in
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA4Transverse">
            <summary>
            A4 Transverse 210 x 297 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLetterExtraTransverse">
            <summary>
            Letter Extra Transverse 9\275 x 12 in
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperSuperA">
            <summary>
            SuperA/SuperA/A4 227 x 356 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperSuperB">
            <summary>
            SuperB/SuperB/A3 305 x 487 mm
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLetterPlus">
            <summary>
            US Letter Plus 8.5 x 12.69 in
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA4Plus">
            <summary>
            A4 Plus 210 x 330 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA5Transverse">
            <summary>
            A5 Transverse 148 x 210 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJISB5Transverse">
            <summary>
             B5 (JIS) Transverse 182 x 257 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA3Extra">
            <summary>
            A3 Extra 322 x 445 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA5Extra">
            <summary>
            A5 Extra 174 x 235 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperISOB5Extra">
            <summary>
            B5 (ISO) Extra 201 x 276 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA2">
            <summary>
            A2 420 x 594 mm
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA3Transverse">
            <summary>
            A3 Transverse 297 x 420 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA3ExtraTransverse">
            <summary>
            A3 Extra Transverse 322 x 445 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseDoublePostcard">
            <summary>
             Japanese Double Postcard 200 x 148 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA6">
            <summary>
             A6 105 x 148 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeKaku2">
            <summary>
            Japanese Envelope Kaku #2
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeKaku3">
            <summary>
            Japanese Envelope Kaku #3
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeChou3">
            <summary>
            Japanese Envelope Chou #3
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeChou4">
            <summary>
            Japanese Envelope Chou #4
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperLetterRotated">
            <summary>
            11in × 8.5in
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA3Rotated">
            <summary>
            420mm × 297mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA4Rotated">
            <summary>
            297mm × 210mm
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA5Rotated">
            <summary>
            210mm × 148mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJISB4Rotated">
            <summary>
            B4 (JIS) Rotated 364 x 257 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJISB5Rotated">
            <summary>
            B5 (JIS) Rotated 257 x 182 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapanesePostcardRotated">
            <summary>
            Japanese Postcard Rotated 148 x 100 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseDoublePostcardRotated">
            <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperA6Rotated">
            <summary>
            A6 Rotated 148 x 105 mm
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeKaku2Rotated">
            <summary>
            Japanese Envelope Kaku #2 Rotated
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeKaku3Rotated">
            <summary>
             Japanese Envelope Kaku #3 Rotated
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeChou3Rotated">
            <summary>
            Japanese Envelope Chou #3 Rotated
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeChou4Rotated">
            <summary>
            Japanese Envelope Chou #4 Rotated
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJISB6">
            <summary>
            B6 (JIS) 128 x 182 mm
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJISB6Rotated">
            <summary>
            B6 (JIS) Rotated 182 x 128 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.Paper12x11">
            <summary>
            12 x 11 in
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeYou4">
            <summary>
            Japanese Envelope You #4
            </summary> 
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperJapaneseEnvelopeYou4Rotated">
            <summary>
            Japanese Envelope You #4 Rotated
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRC16K">
            <summary>
             PRC 16K 146 x 215 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRC32K">
            <summary>
            PRC 32K 97 x 151 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCBig32K">
            <summary>
            PRC 32K(Big) 97 x 151 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope1">
            <summary>
            PRC Envelope #1 102 x 165 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope2">
            <summary>
            PRC Envelope #2 102 x 176 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope3">
            <summary>
            PRC Envelope #3 125 x 176 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope4">
            <summary>
            PRC Envelope #4 110 x 208 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope5">
            <summary>
            PRC Envelope #5 110 x 220 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope6">
            <summary>
             PRC Envelope #6 120 x 230 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope7">
            <summary>
            PRC Envelope #7 160 x 230 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope8">
            <summary>
            PRC Envelope #8 120 x 309 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope9">
            <summary>
            PRC Envelope #9 229 x 324 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope10">
            <summary>
            PRC Envelope #10 324 x 458 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRC16KRotated">
            <summary>
             PRC 16K Rotated
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRC32KRotated">
            <summary>
            PRC 32K Rotated
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCBig32KRotated">
            <summary>
            PRC 32K(Big) Rotated
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope1Rotated">
            <summary>
             PRC Envelope #1 Rotated 165 x 102 mm
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope2Rotated">
            <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            </summary>  
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope3Rotated">
            <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope4Rotated">
            <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope5Rotated">
            <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            </summary>     
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope6Rotated">
            <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope7Rotated">
            <summary>
             PRC Envelope #7 Rotated 230 x 160 mm
            </summary>   
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope8Rotated">
            <summary>
             PRC Envelope #8 Rotated 309 x 120 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope9Rotated">
            <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            </summary>    
        </member>
        <member name="F:Acey.ExcelX.PaperSize.PaperPRCEnvelope10Rotated">
            <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            </summary>     
        </member>
        <member name="T:Acey.ExcelX.Drawing.PlacementType">
            <summary>
            Specifies the way an object is attached to its underlying cells.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PlacementType.MoveAndSize">
            <summary>
            Object is moved and sized with the cells. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PlacementType.Move">
            <summary>
            Object is moved with the cells. 
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Drawing.PlacementType.FreeFloating">
            <summary>
            Object is free floating.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.CalculationMode">
            <summary>
            Specifies the calculation mode.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.CalculationMode.Manual">
            <summary>
            Specifies that workbook sets are not calculated automatically.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.CalculationMode.Automatic">
            <summary>
            Specifies that workbook sets are calculated automatically.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.CalculationMode.SemiAutomatic">
            <summary>
             Specifies that workbook sets are calculated automatically except for tables.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.IFilterCollection">
            <summary>
            Gets the collection of the filer columns.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFilterCollection.Count">
            <summary>
            Gets number of the collection.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.IFilterCollection.Item(System.Int32)">
            <summary>
            Gets a Filter object at the specified index.
            </summary>
            <param name="fieldIndex">The integer offset of the field on which you want to base the filter (from
                the left of the list; the leftmost field is field 0).</param>
            <returns>A Filter object.</returns>
        </member>
        <member name="T:Acey.ExcelX.Charts.IWalls">
            <summary>
            Represents the walls of a 3-D chart.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Walls object of the Chart object.
            IWalls walls = chart.Walls;
             
            //Gets border of the Walls object.
            Acey.ExcelX.Drawing.ILine line = walls.Border;
            
            //Sets border's style of the Walls object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the Walls object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the Walls object.
            line.Color = Color.Blue;
            
            //Gets area of the Walls object.
            Acey.ExcelX.Drawing.IArea area = walls.Area;
            
            //Sets forefound color of the area of the Walls object.
            area.ForegroundColor = Color.Yellow;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Walls object of the Chart object.
            Dim walls As IWalls = chart.Walls
            
            'Gets border of the Walls object.
            Dim line As Acey.ExcelX.Drawing.ILine = walls.Border
            
            'Sets border's style of the Walls object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the Walls object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the Walls object.
            line.Color = Color.Blue
            
            'Gets area of the Walls object.
            Dim area As Acey.ExcelX.Drawing.IArea = walls.Area
            
            'Sets forefound color of the area of the Walls object.
            area.ForegroundColor = Color.Yellow
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.ISeriesAxis">
            <summary>
            Represents the chart series Axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a SeriesAxis object of the Chart object.
            ISeriesAxis seriesAxis = chart.SeriesAxis;
                 
            //Gets border of the SeriesAxis object.
            Acey.ExcelX.Drawing.ILine line = seriesAxis.AxisLine;
            
            //Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray;
            
            //Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine;
            
            //Sets border's color of the PlotArea object.
            line.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a SeriesAxis object of the Chart object.
            Dim seriesAxis As ISeriesAxis = chart.SeriesAxis
            
            'Gets border of the SeriesAxis object.
            Dim line As Acey.ExcelX.Drawing.ILine = seriesAxis.AxisLine
            
            'Sets border's style of the PlotArea object.
            line.Style = LineType.DarkGray
            
            'Sets border's weight of the PlotArea object.
            line.Weight = WeightType.WideLine
            
            'Sets border's color of the PlotArea object.
            line.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeriesAxis.TickLabelSpacing">
            <summary>
            Represents the number of categories or series between tick-mark labels.
            </summary>        
            <remarks>The number must be between 1 and 31999.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than 1 or greater than 31999.</exception>
        </member>
        <member name="P:Acey.ExcelX.Charts.ISeriesAxis.TickMarkSpacing">
            <summary>
            Represents the number of categories or series between tick marks.
            </summary>
            <remarks>应介于1到31999之间。</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">小于1或者大于31999。</exception>
        </member>
        <member name="T:Acey.ExcelX.Charts.IHiLoLines">
            <summary>
            Represents the high-low lines in a chart group.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\LineChart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a Series object collection object of the Chart object.
            ISeriesCollection seriesCollection = chart.SeriesCollection;
             
            //Gets a Series object by using zero-based index.
            ISeries series = seriesCollection[0];
            
            //Gets a HiLoLines object of the Series object.
             IHiLoLines hiLoLines = series.HiLoLines;
            
            //Sets border's style of the Series object.
            hiLoLines.Style = LineType.DarkGray;
            
            //Sets border's weight of the Series object.
            hiLoLines.Weight = WeightType.WideLine;
            
            //Sets border's color of the Series object.
            hiLoLines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\Book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a Series object collection object of the Chart object.
            Dim seriesCollection As ISeriesCollection = chart.SeriesCollection
            
            'Gets a Series object by using zero-based index.
            Dim series As ISeries = seriesCollection(0)
            
            'Gets a HiLoLines object of the Series object.
            Dim hiLoLines As IHiLoLines = series.HiLoLines
            
            'Sets border's style of the Series object.
            hiLoLines.Style = LineType.DarkGray
            
            'Sets border's weight of the Series object.
            hiLoLines.Weight = WeightType.WideLine
            
            'Sets border's color of the Series object.
            hiLoLines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\Book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IGridlines">
            <summary>
            Represents major or minor gridlines on a chart axis.
            </summary>
            <example>
            This example shows how you might use this object:
            <code>
            [C#]
            //Gets a Workbook object by reading a excel file.
            IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
            //Gets a Worksheet object by zero-based index.
            IWorksheet worksheet = workbook.Worksheets[0];
             
            //Gets get a collection of chart objects.
            IChartCollection charts = worksheet.Charts;
            
            //Gets a Chart object by zero-based index.
            IChart chart = charts[0];
            
            //Gets a ValueAxis object of the Chart object.
            IValueAxis valueAxis = chart.ValueAxis;
             
            //Gets major gridlines of the ValueAxis object.
            IGridlines gridlines = valueAxis.MajorGridlines;
            
            //Sets major gridlines style of the ValueAxis object.
            gridlines.Style = LineType.DarkGray;
            
            //Sets major gridlines weight of the ValueAxis object.
            gridlines.Weight = WeightType.WideLine;
            
            //Sets major gridlines color of the ValueAxis object.
            gridlines.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets a ValueAxis object of the Chart object.
            Dim valueAxis As IValueAxis = chart.ValueAxis
            
            'Gets major gridlines of the ValueAxis object.
            Dim gridlines As IGridlines = valueAxis.MajorGridlines
            
            'Sets major gridlines style of the ValueAxis object.
            gridlines.Style = LineType.DarkGray
            
            'Sets major gridlines weight of the ValueAxis object.
            gridlines.Weight = WeightType.WideLine
            
            'Sets major gridlines color of the ValueAxis object.
            gridlines.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="T:Acey.ExcelX.Charts.IChartDataTable">
             <summary>
            Represents the chart data table.
             </summary>
             <example>
             This example shows how you might use this object:
             <code>
             [C#]
              //Gets a Workbook object by reading a excel file.
              IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
              
              //Gets a Worksheet object by zero-based index.
              IWorksheet worksheet = workbook.Worksheets[0];
              
              //Gets get a collection of chart objects.
              IChartCollection charts = worksheet.Charts;
             
              //Gets a Chart object by zero-based index.
              IChart chart = charts[0];
             
              //Gets chart datatable of the Chart object.
              IChartDataTable dataTable = chart.DataTable;
              
              //Sets the chart data table whether has horizontal border.
              dataTable.HasBorderHorizontal = true;
              
              //Sets the chart data table whether has outline borders.
              dataTable.HasBorderOutline = false;
              
              //Sets the chart data table whether has vertical border.
              dataTable.HasBorderVertical = true;  
              
              //Sets the chart data table whether the text is attached to a legend key.
              dataTable.ShowLegendKey = false;   
             
             //Saves as the specified file format.
             workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
             
             
             [Visual Basic]
             'Gets a Workbook object by reading a excel file.
             Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
             
             'Gets a Worksheet object by zero-based index.
             Dim worksheet As IWorksheet = workbook.Worksheets(0)
             
             'Gets get a collection of chart objects.
             Dim charts As IChartCollection = worksheet.Charts
             
             'Gets a Chart object by zero-based index.
             Dim chart As IChart = charts(0)
             
             'Gets chart datatable of the Chart object.
             Dim dataTable As IChartDataTable = chart.DataTable
             
             'Sets the chart data table whether has horizontal border.
             dataTable.HasBorderHorizontal = True
             
             'Sets the chart data table whether has outline borders.
             dataTable.HasBorderOutline = False
             
             'Sets the chart data table whether has vertical border.
             dataTable.HasBorderVertical = True
             
             'Sets the chart data table whether the text is attached to a legend key.
             dataTable.ShowLegendKey = False
             
             'Saves as the specified file format.
             workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
             </code>
             </example>
        </member>
        <member name="M:Acey.ExcelX.Charts.IChartDataTable.Delete">
            <summary>
            Deletes the ChartDataTable object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart datatable of the Chart object.
             IChartDataTable dataTable = chart.DataTable;
             
            //Deletes the chart datatable.
            dataTable.Delete();
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart datatable of the Chart object.
            Dim dataTable As IChartDataTable = chart.DataTable
            
            'Deletes the chart datatable.
            dataTable.Delete()
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.BackgroundMode">
            <summary>
            Gets or sets the display mode of the background of the text.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.Border">
            <summary>
            Returns a Acey.ExcelX.Drawing.ILine object of the object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart datatable of the Chart object.
             IChartDataTable dataTable = chart.DataTable;
             
             //Gets font of chart datatable object.
             Acey.ExcelX.Drawing.ILine line = dataTable.Border;
             
             //Sets style of the chart datatable's border.
             line.Style = LineType.MediumGray;
             
             //Sets weight of the chart datatable's border.
             line.Weight = WeightType.WideLine;  
             
             //Sets color of the chart datatable's border.
             line.Color = Color.Blue;
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart datatable of the Chart object.
            Dim dataTable As IChartDataTable = chart.DataTable
            
            'Gets font of chart datatable object.
            Dim line As Acey.ExcelX.Drawing.ILine = dataTable.Border
            
            'Sets style of the chart datatable's border.
            line.Style = LineType.MediumGray
            
            'Sets weight of the chart datatable's border.
            line.Weight = WeightType.WideLine
            
            'Sets color of the chart datatable's border.
            line.Color = Color.Blue
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003) 
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.Font">
            <summary>
            Returns a Acey.ExcelX.Drawing.IFont object of the object.
            </summary>
            <example>
            This example shows how you might use this property:
            <code>
            [C#]
             //Gets a Workbook object by reading a excel file.
             IWorkbook workbook = ExcelxApplication.Open(@"D:\chart.xls");
             
             //Gets a Worksheet object by zero-based index.
             IWorksheet worksheet = workbook.Worksheets[0];
             
             //Gets get a collection of chart objects.
             IChartCollection charts = worksheet.Charts;
            
             //Gets a Chart object by zero-based index.
             IChart chart = charts[0];
            
             //Gets chart datatable of the Chart object.
             IChartDataTable dataTable = chart.DataTable;
             
             //Gets font of chart datatable object.
             Acey.ExcelX.IFont font = dataTable.Font;
             
             //Sets name of the chart datatable's font.
             font.Name = "Verdana";
             
             //Sets size of the chart datatable's font.
             font.Size = 16;  
            
            //Saves as the specified file format.
            workbook.SaveAs(@"D:\book1.xls", FileFormat.Excel97To2003);
            
            
            [Visual Basic]
            'Gets a Workbook object by reading a excel file.
            Dim workbook As IWorkbook = ExcelxApplication.Open("D:\chart.xls")
            
            'Gets a Worksheet object by zero-based index.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            
            'Gets get a collection of chart objects.
            Dim charts As IChartCollection = worksheet.Charts
            
            'Gets a Chart object by zero-based index.
            Dim chart As IChart = charts(0)
            
            'Gets chart datatable of the Chart object.
            Dim dataTable As IChartDataTable = chart.DataTable
            
            'Gets font of chart datatable object.
            Dim font As Acey.ExcelX.IFont = dataTable.Font
            
            'Sets name of the chart datatable's font.
            font.Name = "Verdana"
            
            'Sets size of the chart datatable's font.
            font.Size = 16
            
            'Saves as the specified file format.
            workbook.SaveAs("D:\book1.xls", FileFormat.Excel97To2003)
            </code>
            </example>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.HasBorderHorizontal">
            <summary>
            True if data table has horizontal border.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.HasBorderOutline">
            <summary>
            True if the chart data table has outline borders
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.HasBorderVertical">
            <summary>
            True if data table has vertical border.
            </summary>
        </member>
        <member name="P:Acey.ExcelX.Charts.IChartDataTable.ShowLegendKey">
            <summary>
            Gets or sets whether the text is attached to a legend key.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.Charts.CategoryType">
            <summary>
            Represents category type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.CategoryType.AutomaticScale">
            <summary>
            Represents automatic category type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.CategoryType.CategoryScale">
            <summary>
            Represents Category category type.
            </summary>
        </member>
        <member name="F:Acey.ExcelX.Charts.CategoryType.TimeScale">
            <summary>
            Represents time category type.
            </summary>
        </member>
        <member name="T:Acey.ExcelX.PaneType">
            <summary>
            frozenpanes panes Type
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaneType.BOTRIGHT">
            <summary>
            logical bottom-right pane
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaneType.TOPRIGHT">
            <summary>
            logical top-right pane
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaneType.BOTLEFT">
            <summary>
            logical bottom-left pane
            </summary>
        </member>
        <member name="F:Acey.ExcelX.PaneType.TOPLEFT">
            <summary>
            logical top-left pane
            </summary>
        </member>
    </members>
</doc>
